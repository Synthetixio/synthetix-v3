/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface SomeModuleInterface extends utils.Interface {
  functions: {
    "getSomeValue()": FunctionFragment;
    "getValue()": FunctionFragment;
    "setSomeValue(uint256)": FunctionFragment;
    "setValue(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getSomeValue"
      | "getValue"
      | "setSomeValue"
      | "setValue"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getSomeValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getValue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setSomeValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setValue",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getSomeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSomeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setValue", data: BytesLike): Result;

  events: {
    "ValueSet(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ValueSet"): EventFragment;
}

export interface ValueSetEventObject {
  sender: string;
  value: BigNumber;
}
export type ValueSetEvent = TypedEvent<
  [string, BigNumber],
  ValueSetEventObject
>;

export type ValueSetEventFilter = TypedEventFilter<ValueSetEvent>;

export interface SomeModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SomeModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getSomeValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    setSomeValue(
      newSomeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValue(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getSomeValue(overrides?: CallOverrides): Promise<BigNumber>;

  getValue(overrides?: CallOverrides): Promise<BigNumber>;

  setSomeValue(
    newSomeValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValue(
    newValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getSomeValue(overrides?: CallOverrides): Promise<BigNumber>;

    getValue(overrides?: CallOverrides): Promise<BigNumber>;

    setSomeValue(
      newSomeValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setValue(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ValueSet(address,uint256)"(
      sender?: null,
      value?: null
    ): ValueSetEventFilter;
    ValueSet(sender?: null, value?: null): ValueSetEventFilter;
  };

  estimateGas: {
    getSomeValue(overrides?: CallOverrides): Promise<BigNumber>;

    getValue(overrides?: CallOverrides): Promise<BigNumber>;

    setSomeValue(
      newSomeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValue(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getSomeValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSomeValue(
      newSomeValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValue(
      newValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
