/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  Core_routerProxy,
  Core_routerProxyInterface,
} from "../Core_routerProxy";

const _abi = [
  {
    type: "error",
    name: "AlreadyInitialized",
    inputs: [],
  },
  {
    type: "error",
    name: "ImplementationIsSterile",
    inputs: [
      {
        type: "address",
        name: "implementation",
      },
    ],
  },
  {
    type: "error",
    name: "NoChange",
    inputs: [],
  },
  {
    type: "error",
    name: "NotAContract",
    inputs: [
      {
        type: "address",
        name: "contr",
      },
    ],
  },
  {
    type: "error",
    name: "NotNominated",
    inputs: [
      {
        type: "address",
        name: "addr",
      },
    ],
  },
  {
    type: "error",
    name: "Unauthorized",
    inputs: [
      {
        type: "address",
        name: "addr",
      },
    ],
  },
  {
    type: "error",
    name: "UpgradeSimulationFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "ZeroAddress",
    inputs: [],
  },
  {
    type: "event",
    anonymous: false,
    name: "OwnerChanged",
    inputs: [
      {
        type: "address",
        name: "oldOwner",
        indexed: false,
      },
      {
        type: "address",
        name: "newOwner",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "OwnerNominated",
    inputs: [
      {
        type: "address",
        name: "newOwner",
        indexed: false,
      },
    ],
  },
  {
    type: "event",
    anonymous: false,
    name: "Upgraded",
    inputs: [
      {
        type: "address",
        name: "self",
        indexed: true,
      },
      {
        type: "address",
        name: "implementation",
        indexed: false,
      },
    ],
  },
  {
    type: "function",
    name: "acceptOwnership",
    constant: false,
    payable: false,
    inputs: [],
    outputs: [],
  },
  {
    type: "function",
    name: "getImplementation",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [],
    outputs: [
      {
        type: "address",
      },
    ],
  },
  {
    type: "function",
    name: "initializeOwnerModule",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "address",
        name: "initialOwner",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "isOwnerModuleInitialized",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [],
    outputs: [
      {
        type: "bool",
      },
    ],
  },
  {
    type: "function",
    name: "nominateNewOwner",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "address",
        name: "newNominatedOwner",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "nominatedOwner",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [],
    outputs: [
      {
        type: "address",
      },
    ],
  },
  {
    type: "function",
    name: "owner",
    constant: true,
    stateMutability: "view",
    payable: false,
    inputs: [],
    outputs: [
      {
        type: "address",
      },
    ],
  },
  {
    type: "function",
    name: "renounceNomination",
    constant: false,
    payable: false,
    inputs: [],
    outputs: [],
  },
  {
    type: "function",
    name: "simulateUpgradeTo",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "address",
        name: "newImplementation",
      },
    ],
    outputs: [],
  },
  {
    type: "function",
    name: "upgradeTo",
    constant: false,
    payable: false,
    inputs: [
      {
        type: "address",
        name: "newImplementation",
      },
    ],
    outputs: [],
  },
];

export class Core_routerProxy__factory {
  static readonly abi = _abi;
  static createInterface(): Core_routerProxyInterface {
    return new utils.Interface(_abi) as Core_routerProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Core_routerProxy {
    return new Contract(address, _abi, signerOrProvider) as Core_routerProxy;
  }
}
