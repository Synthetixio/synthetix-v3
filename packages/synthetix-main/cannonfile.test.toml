name = "synthetix"
version = "<%= package.version %>"
description = "Core synthetix system"

# `salt` here only affects proxy contract
[setting.salt]
description = "Change this to a unique string when deploying multiple instances of the system. Note that only the proxy contract will be unique."
defaultValue = "main"

[setting.owner]
description = "Admin user for the system"
defaultValue = "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"

[contract.InitialModuleBundle]
artifact = "contracts/modules/InitialModuleBundle.sol:InitialModuleBundle"

[contract.FeatureFlagModule]
artifact = "contracts/modules/core/FeatureFlagModule.sol:FeatureFlagModule"

[contract.AccountModule]
artifact = "contracts/modules/core/AccountModule.sol:AccountModule"

[contract.AssociateDebtModule]
artifact = "contracts/modules/core/AssociateDebtModule.sol:AssociateDebtModule"

[contract.AssociatedSystemsModule]
artifact = "contracts/modules/associated-systems/AssociatedSystemsModule.sol:AssociatedSystemsModule"

[contract.CollateralModule]
artifact = "contracts/modules/core/CollateralModule.sol:CollateralModule"

[contract.IssueUSDModule]
artifact = "contracts/modules/core/IssueUSDModule.sol:IssueUSDModule"

[contract.LiquidationModule]
artifact = "contracts/modules/core/LiquidationModule.sol:LiquidationModule"

[contract.MarketCollateralModule]
artifact = "contracts/modules/core/MarketCollateralModule.sol:MarketCollateralModule"

[contract.MarketManagerModule]
artifact = "contracts/modules/core/MarketManagerModule.sol:MarketManagerModule"

[contract.MulticallModule]
artifact = "contracts/modules/core/MulticallModule.sol:MulticallModule"

[contract.PoolConfigurationModule]
artifact = "contracts/modules/core/PoolConfigurationModule.sol:PoolConfigurationModule"

[contract.PoolModule]
artifact = "contracts/modules/core/PoolModule.sol:PoolModule"

[contract.RewardsManagerModule]
artifact = "contracts/modules/core/RewardsManagerModule.sol:RewardsManagerModule"

[contract.UtilsModule]
artifact = "contracts/modules/core/UtilsModule.sol:UtilsModule"

[contract.VaultModule]
artifact = "contracts/modules/core/VaultModule.sol:VaultModule"

[contract.AccountTokenModule]
artifact = "contracts/modules/account/AccountTokenModule.sol:AccountTokenModule"

[contract.SNXTokenModule]
artifact = "contracts/modules/snx/SNXTokenModule.sol:SNXTokenModule"

[contract.USDTokenModule]
artifact = "contracts/modules/usd/USDTokenModule.sol:USDTokenModule"

# Test Modules
[contract.TestableAccountModule]
artifact = "contracts/modules/test/TestableAccountModule.sol:TestableAccountModule"

[contract.TestableAccountRBACModule]
artifact = "contracts/modules/test/TestableAccountRBACModule.sol:TestableAccountRBACModule"

[contract.TestableCollateralModule]
artifact = "contracts/modules/test/TestableCollateralModule.sol:TestableCollateralModule"

[contract.TestableCollateralConfigurationModule]
artifact = "contracts/modules/test/TestableCollateralConfigurationModule.sol:TestableCollateralConfigurationModule"

[contract.TestableCollateralLockModule]
artifact = "contracts/modules/test/TestableCollateralLockModule.sol:TestableCollateralLockModule"

[contract.TestableDistributionModule]
artifact = "contracts/modules/test/TestableDistributionModule.sol:TestableDistributionModule"

[contract.TestableDistributionActorModule]
artifact = "contracts/modules/test/TestableDistributionActorModule.sol:TestableDistributionActorModule"

[contract.TestableDistributionEntryModule]
artifact = "contracts/modules/test/TestableDistributionEntryModule.sol:TestableDistributionEntryModule"

[contract.TestableMarketModule]
artifact = "contracts/modules/test/TestableMarketModule.sol:TestableMarketModule"

[contract.TestableMarketConfigurationModule]
artifact = "contracts/modules/test/TestableMarketConfigurationModule.sol:TestableMarketConfigurationModule"

[contract.TestablePoolModule]
artifact = "contracts/modules/test/TestablePoolModule.sol:TestablePoolModule"

[contract.TestablePoolConfigurationModule]
artifact = "contracts/modules/test/TestablePoolConfigurationModule.sol:TestablePoolConfigurationModule"

[contract.TestableRewardDistributionModule]
artifact = "contracts/modules/test/TestableRewardDistributionModule.sol:TestableRewardDistributionModule"

[contract.TestableRewardDistributionStatusModule]
artifact = "contracts/modules/test/TestableRewardDistributionStatusModule.sol:TestableRewardDistributionStatusModule"

[contract.TestableVaultEpochModule]
artifact = "contracts/modules/test/TestableVaultEpochModule.sol:TestableVaultEpochModule"

[contract.TestableVaultModule]
artifact = "contracts/modules/test/TestableVaultModule.sol:TestableVaultModule"

# Core
[run.core_generate_router]
exec = "@synthetixio/core-router"
func = "generate"
args = [
  "contracts/routers/chain-<%= chainId %>/CoreRouter.sol:CoreRouter",
  '''<%= JSON.stringify({
    InitialModuleBundle: contracts.InitialModuleBundle,
    AccountTokenModule: contracts.AccountTokenModule,
    FeatureFlagModule: contracts.FeatureFlagModule,
    AccountModule: contracts.AccountModule,
    AssociateDebtModule: contracts.AssociateDebtModule,
    AssociatedSystemsModule: contracts.AssociatedSystemsModule,
    CollateralModule: contracts.CollateralModule,
    IssueUSDModule: contracts.IssueUSDModule,
    LiquidationModule: contracts.LiquidationModule,
    MarketCollateralModule: contracts.MarketCollateralModule,
    MarketManagerModule: contracts.MarketManagerModule,
    MulticallModule: contracts.MulticallModule,
    PoolConfigurationModule: contracts.PoolConfigurationModule,
    PoolModule: contracts.PoolModule,
    RewardsManagerModule: contracts.RewardsManagerModule,
    UtilsModule: contracts.UtilsModule,
    VaultModule: contracts.VaultModule,
    TestableAccountModule: contracts.TestableAccountModule,
    TestableAccountRBACModule: contracts.TestableAccountRBACModule,
    TestableCollateralModule: contracts.TestableCollateralModule,
    TestableCollateralConfigurationModule: contracts.TestableCollateralConfigurationModule,
    TestableCollateralLockModule: contracts.TestableCollateralLockModule,
    TestableDistributionModule: contracts.TestableDistributionModule,
    TestableDistributionActorModule: contracts.TestableDistributionActorModule,
    TestableDistributionEntryModule: contracts.TestableDistributionEntryModule,
    TestableMarketModule: contracts.TestableMarketModule,
    TestableMarketConfigurationModule: contracts.TestableMarketConfigurationModule,
    TestablePoolModule: contracts.TestablePoolModule,
    TestablePoolConfigurationModule: contracts.TestablePoolConfigurationModule,
    TestableRewardDistributionModule: contracts.TestableRewardDistributionModule,
    TestableRewardDistributionStatusModule: contracts.TestableRewardDistributionStatusModule,
    TestableVaultEpochModule: contracts.TestableVaultEpochModule,
    TestableVaultModule: contracts.TestableVaultModule,
  }) %>'''
]
modified = ["contracts/modules/core"]
depends = [
  "contract.InitialModuleBundle",
  "contract.FeatureFlagModule",
  "contract.AccountModule",
  "contract.AssociateDebtModule",
  "contract.AssociatedSystemsModule",
  "contract.CollateralModule",
  "contract.IssueUSDModule",
  "contract.LiquidationModule",
  "contract.MarketCollateralModule",
  "contract.MarketManagerModule",
  "contract.MulticallModule",
  "contract.PoolConfigurationModule",
  "contract.PoolModule",
  "contract.RewardsManagerModule",
  "contract.UtilsModule",
  "contract.VaultModule",
  "contract.TestableAccountModule",
  "contract.TestableAccountRBACModule",
  "contract.TestableCollateralModule",
  "contract.TestableCollateralConfigurationModule",
  "contract.TestableCollateralLockModule",
  "contract.TestableDistributionModule",
  "contract.TestableDistributionActorModule",
  "contract.TestableDistributionEntryModule",
  "contract.TestableMarketModule",
  "contract.TestableMarketConfigurationModule",
  "contract.TestablePoolModule",
  "contract.TestablePoolConfigurationModule",
  "contract.TestableRewardDistributionModule",
  "contract.TestableRewardDistributionStatusModule",
  "contract.TestableVaultEpochModule",
  "contract.TestableVaultModule",
]

[contract.CoreRouter]
artifact = "contracts/routers/chain-<%= chainId %>/CoreRouter.sol:CoreRouter"
abiOf = [
  "InitialModuleBundle",
  "FeatureFlagModule",
  "AccountModule",
  "AssociateDebtModule",
  "AssociatedSystemsModule",
  "CollateralModule",
  "IssueUSDModule",
  "LiquidationModule",
  "MarketCollateralModule",
  "MarketManagerModule",
  "MulticallModule",
  "PoolConfigurationModule",
  "PoolModule",
  "RewardsManagerModule",
  "UtilsModule",
  "VaultModule",
  "TestableAccountModule",
  "TestableAccountRBACModule",
  "TestableCollateralModule",
  "TestableCollateralConfigurationModule",
  "TestableCollateralLockModule",
  "TestableDistributionModule",
  "TestableDistributionActorModule",
  "TestableDistributionEntryModule",
  "TestableMarketModule",
  "TestableMarketConfigurationModule",
  "TestablePoolModule",
  "TestablePoolConfigurationModule",
  "TestableRewardDistributionModule",
  "TestableRewardDistributionStatusModule",
  "TestableVaultEpochModule",
  "TestableVaultModule",
]
depends = ["run.core_generate_router"]

[contract.InitialCoreProxy]
artifact = "contracts/Proxy.sol:Proxy"
args = ["<%= contracts.InitialModuleBundle.address %>"]
abiOf = ["InitialModuleBundle"]
depends = ["contract.InitialModuleBundle"]

[invoke.acquire_ownership]
target = ["InitialCoreProxy"]
from = "<%= settings.owner %>"
func = "initializeOwnerModule"
args = ["<%= settings.owner %>"]
depends = ["contract.InitialCoreProxy"]

[invoke.upgrade_core_proxy]
target = ["InitialCoreProxy"]
abi = "UpgradeModule"
from = "<%= settings.owner %>"
func = "upgradeTo"
args = ["<%= contracts.CoreRouter.address %>"]

factory.CoreProxy.abiOf = ["CoreRouter"]
factory.CoreProxy.event = "Upgraded"
factory.CoreProxy.arg = 0

depends = [
  "invoke.acquire_ownership",
  "contract.CoreRouter"
]

# Account
[run.account_generate_router]
exec = "@synthetixio/core-router"
func = "generate"
args = [
  "contracts/routers/chain-<%= chainId %>/AccountRouter.sol:AccountRouter",
  '''<%= JSON.stringify({
    InitialModuleBundle: contracts.InitialModuleBundle,
    AccountTokenModule: contracts.AccountTokenModule,
  }) %>'''
]
modified = ["contracts/modules/common", "contracts/modules/account"]
depends = [
  "contract.InitialModuleBundle",
  "contract.AccountTokenModule"
]

[contract.AccountRouter]
artifact = "contracts/routers/chain-<%= chainId %>/AccountRouter.sol:AccountRouter"
abiOf = [
  "InitialModuleBundle",
  "AccountTokenModule"
]
depends = ["run.account_generate_router"]

# SNX
[run.snx_generate_router]
exec = "@synthetixio/core-router"
func = "generate"
args = [
  "contracts/routers/chain-<%= chainId %>/SNXRouter.sol:SNXRouter",
  '''<%= JSON.stringify({
    InitialModuleBundle: contracts.InitialModuleBundle,
    SNXTokenModule: contracts.SNXTokenModule,
  }) %>'''
]
modified = ["contracts/modules/snx"]
depends = [
  "contract.InitialModuleBundle",
  "contract.SNXTokenModule"
]

[contract.SNXRouter]
artifact = "contracts/routers/chain-<%= chainId %>/SNXRouter.sol:SNXRouter"
abiOf = [
  "InitialModuleBundle",
  "SNXTokenModule"
]
depends = ["run.snx_generate_router"]

# USD
[run.usd_generate_router]
exec = "@synthetixio/core-router"
func = "generate"
args = [
  "contracts/routers/chain-<%= chainId %>/USDRouter.sol:USDRouter",
  '''<%= JSON.stringify({
    InitialModuleBundle: contracts.InitialModuleBundle,
    AssociatedSystemsModule: contracts.AssociatedSystemsModule,
    USDTokenModule: contracts.USDTokenModule,
  }) %>'''
]
modified = ["contracts/modules/associated-systems", "contracts/modules/usd"]
depends = [
  "contract.InitialModuleBundle",
  "contract.AssociatedSystemsModule",
  "contract.USDTokenModule"
]

[contract.USDRouter]
artifact = "contracts/routers/chain-<%= chainId %>/USDRouter.sol:USDRouter"
abiOf = [
  "InitialModuleBundle",
  "AssociatedSystemsModule",
  "USDTokenModule"
]
depends = ["run.usd_generate_router"]

# Post stuff

[invoke.init_account]
target = ["CoreProxy"]
from = "<%= settings.owner %>"
func = "initOrUpgradeNft"
args = [
  "0x6163636f756e744e667400000000000000000000000000000000000000000000",
  "Synthetix Account",
  "SACCT",
  "https://synthetix.io",
  "<%= contracts.AccountRouter.address %>"
]
depends = [
  "invoke.upgrade_core_proxy",
  "contract.AccountRouter"
]
factory.AccountProxy.abiOf = ["AccountRouter"]
factory.AccountProxy.event = "AssociatedSystemSet"
factory.AccountProxy.arg = 2

[invoke.init_snx]
target = ["CoreProxy"]
from = "<%= settings.owner %>"
func = "initOrUpgradeToken"
args = [
  "0x534e58546f6b656e000000000000000000000000000000000000000000000000",
  "Synthetix System Token",
  "SNX",
  18,
  "<%= contracts.SNXRouter.address %>"
]
depends = [
  "invoke.upgrade_core_proxy",
  "contract.SNXRouter"
]
factory.SNXProxy.abiOf = ["SNXRouter"]
factory.SNXProxy.event = "AssociatedSystemSet"
factory.SNXProxy.arg = 2

[invoke.init_usd]
target = ["CoreProxy"]
from = "<%= settings.owner %>"
func = "initOrUpgradeToken"
args = [
  "0x555344546f6b656e000000000000000000000000000000000000000000000000",
  "Synthetic USD Token v3",
  "snxUSD",
  18,
  "<%= contracts.USDRouter.address %>"
]
depends = [
  "invoke.upgrade_core_proxy",
  "contract.USDRouter"
]
factory.USDProxy.abiOf = ["USDRouter"]
factory.USDProxy.event = "AssociatedSystemSet"
factory.USDProxy.arg = 2
