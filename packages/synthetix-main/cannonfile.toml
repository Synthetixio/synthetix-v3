name = "synthetix"
version = "3.0.0-lm"
description = "Core synthetix system"

# `salt` here only affects proxy contract
[setting.salt]
description = "Change this to a unique string when deploying multiple instances of the system. Note that only the proxy contract will be unique."
defaultValue = "main"

[setting.owner]
description = "Admin user for the system"
defaultValue = "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"

[setting.additionalModules]
description = "Any additional modules which should be deployed"
defaultValue = "core"

[contract.common_owner_module]
artifact = "contracts/modules/common/OwnerModule.sol:OwnerModule"

[contract.common_upgrade_module]
artifact = "contracts/modules/common/UpgradeModule.sol:UpgradeModule"

[contract.common_initial_upgrade]
artifact = "contracts/modules/common/InitialUpgrade.sol:InitialUpgrade"

[contract.core_account_module]
artifact = "contracts/modules/core/AccountModule.sol:AccountModule"

[contract.core_associate_debt_module]
artifact = "contracts/modules/core/AssociateDebtModule.sol:AssociateDebtModule"

[contract.core_associated_systems_module]
artifact = "contracts/modules/core/AssociatedSystemsModule.sol:AssociatedSystemsModule"

[contract.core_collateral_module]
artifact = "contracts/modules/core/CollateralModule.sol:CollateralModule"

[contract.core_liquidation_module]
artifact = "contracts/modules/core/LiquidationModule.sol:LiquidationModule"

[contract.core_market_collateral_module]
artifact = "contracts/modules/core/MarketCollateralModule.sol:MarketCollateralModule"

[contract.core_market_manager_module]
artifact = "contracts/modules/core/MarketManagerModule.sol:MarketManagerModule"

[contract.core_multicall_module]
artifact = "contracts/modules/core/MulticallModule.sol:MulticallModule"

[contract.core_pool_configuration_module]
artifact = "contracts/modules/core/PoolConfigurationModule.sol:PoolConfigurationModule"

[contract.core_pool_module]
artifact = "contracts/modules/core/PoolModule.sol:PoolModule"

[contract.core_rewards_manager_module]
artifact = "contracts/modules/core/RewardsManagerModule.sol:RewardsManagerModule"

[contract.core_utils_module]
artifact = "contracts/modules/core/UtilsModule.sol:UtilsModule"

[contract.core_vault_module]
artifact = "contracts/modules/core/VaultModule.sol:VaultModule"

[contract.account_token_module]
artifact = "contracts/modules/account/AccountTokenModule.sol:AccountTokenModule"

[contract.esnx_token_module]
artifact = "contracts/modules/esnx/ESNXTokenModule.sol:ESNXTokenModule"

[contract.snx_token_module]
artifact = "contracts/modules/snx/SNXTokenModule.sol:SNXTokenModule"

[contract.usd_token_module]
artifact = "contracts/modules/usd/USDTokenModule.sol:USDTokenModule"

# Core
[run.core_generate_router]
exec = "../hardhat-router/dist/cannon/router.js"
func = "generate"
args = ["CoreRouter", "contracts/modules/common", "contracts/modules/core"]
modified = ["contracts/modules/common", "contracts/modules/core"]
depends = [
  "contract.common_owner_module",
  "contract.common_upgrade_module",
  "contract.core_account_module",
  "contract.core_associate_debt_module",
  "contract.core_associated_systems_module",
  "contract.core_collateral_module",
  "contract.core_liquidation_module",
  "contract.core_market_collateral_module",
  "contract.core_market_manager_module",
  "contract.core_multicall_module",
  "contract.core_pool_configuration_module",
  "contract.core_pool_module",
  "contract.core_rewards_manager_module",
  "contract.core_utils_module",
  "contract.core_vault_module"
]

[contract.core_router]
artifact = "contracts/CoreRouter.sol:CoreRouter"

[contract.core_proxy]
artifact = "contracts/Proxy.sol:Proxy"
args = ["<%= contracts.common_initial_upgrade.address %>"]
depends = ["contract.common_initial_upgrade"]

[invoke.upgrade_core_proxy]
target = ["core_proxy"]
abi = "contracts/modules/common/UpgradeModule.sol:UpgradeModule"
from = "<%= settings.owner %>"
func = "upgradeTo"
args = ["<%= contracts.core_router.address %>"]
depends = [
  "contract.core_proxy",
  "contract.common_owner_module",
  "contract.common_upgrade_module"
]

# Account
[run.account_generate_router]
exec = "../hardhat-router/dist/cannon/router.js"
func = "generate"
args = ["AccountRouter", "contracts/modules/common", "contracts/modules/account"]
modified = ["contracts/modules/common", "contracts/modules/account"]
depends = [
  "contract.common_owner_module",
  "contract.common_upgrade_module",
  "contract.account_token_module"
]

[contract.account_router]
artifact = "contracts/AccountRouter.sol:AccountRouter"

[contract.account_proxy]
artifact = "contracts/Proxy.sol:Proxy"
args = ["<%= contracts.common_initial_upgrade.address %>"]
depends = ["contract.common_initial_upgrade"]

[invoke.upgrade_account_proxy]
target = ["account_proxy"]
abi = "contracts/modules/common/UpgradeModule.sol:UpgradeModule"
from = "<%= settings.owner %>"
func = "upgradeTo"
args = ["<%= contracts.account_router.address %>"]
depends = [
  "contract.account_proxy",
  "contract.common_owner_module",
  "contract.common_upgrade_module"
]

# ESNX
[run.esnx_generate_router]
exec = "../hardhat-router/dist/cannon/router.js"
func = "generate"
args = ["ESNXRouter", "contracts/modules/common", "contracts/modules/esnx"]
modified = ["contracts/modules/common", "contracts/modules/esnx"]
depends = [
  "contract.common_owner_module",
  "contract.common_upgrade_module",
  "contract.esnx_token_module"
]

[contract.esnx_router]
artifact = "contracts/ESNXRouter.sol:ESNXRouter"

[contract.esnx_proxy]
artifact = "contracts/Proxy.sol:Proxy"
args = ["<%= contracts.common_initial_upgrade.address %>"]
depends = ["contract.common_initial_upgrade"]

[invoke.upgrade_esnx_proxy]
target = ["esnx_proxy"]
abi = "contracts/modules/common/UpgradeModule.sol:UpgradeModule"
from = "<%= settings.owner %>"
func = "upgradeTo"
args = ["<%= contracts.esnx_router.address %>"]
depends = [
  "contract.esnx_proxy",
  "contract.common_owner_module",
  "contract.common_upgrade_module"
]

# SNX
[run.snx_generate_router]
exec = "../hardhat-router/dist/cannon/router.js"
func = "generate"
args = ["SNXRouter", "contracts/modules/common", "contracts/modules/snx"]
modified = ["contracts/modules/common", "contracts/modules/snx"]
depends = [
  "contract.common_owner_module",
  "contract.common_upgrade_module",
  "contract.snx_token_module"
]

[contract.snx_router]
artifact = "contracts/SNXRouter.sol:SNXRouter"

[contract.snx_proxy]
artifact = "contracts/Proxy.sol:Proxy"
args = ["<%= contracts.common_initial_upgrade.address %>"]
depends = ["contract.common_initial_upgrade"]

[invoke.upgrade_snx_proxy]
target = ["snx_proxy"]
abi = "contracts/modules/common/UpgradeModule.sol:UpgradeModule"
from = "<%= settings.owner %>"
func = "upgradeTo"
args = ["<%= contracts.snx_router.address %>"]
depends = [
  "contract.snx_proxy",
  "contract.common_owner_module",
  "contract.common_upgrade_module"
]

# USD
[run.usd_generate_router]
exec = "../hardhat-router/dist/cannon/router.js"
func = "generate"
args = ["USDRouter", "contracts/modules/common", "contracts/modules/usd"]
modified = ["contracts/modules/common", "contracts/modules/usd"]
depends = [
  "contract.common_owner_module",
  "contract.common_upgrade_module",
  "contract.usd_token_module"
]

[contract.usd_router]
artifact = "contracts/USDRouter.sol:USDRouter"

[contract.usd_proxy]
artifact = "contracts/Proxy.sol:Proxy"
args = ["<%= contracts.common_initial_upgrade.address %>"]
depends = ["contract.common_initial_upgrade"]

[invoke.upgrade_usd_proxy]
target = ["usd_proxy"]
abi = "contracts/modules/common/UpgradeModule.sol:UpgradeModule"
from = "<%= settings.owner %>"
func = "upgradeTo"
args = ["<%= contracts.usd_router.address %>"]
depends = [
  "contract.usd_proxy",
  "contract.common_owner_module",
  "contract.common_upgrade_module"
]

[invoke.acquire_ownership]
target = ["core_proxy"]
abi = "contracts/modules/common/UpgradeModule.sol:UpgradeModule"
from = "<%= settings.owner %>"
func = "initializeOwnerModule"
args = ["<%= settings.owner %>"]
depends = [
  "contract.core_proxy",
  "contract.common_owner_module",
  "contract.common_upgrade_module"
]

[invoke.init_account]
target = ["core_proxy"]
abi = "contracts/modules/core/AssociatedSystemsModule.sol:AssociatedSystemsModule"
from = "<%= settings.owner %>"
func = "initOrUpgradeNft"
args = [
  "0x6163636f756e744e667400000000000000000000000000000000000000000000",
  "Synthetix Account",
  "SACCT",
  "https://synthetix.io",
  "<%= contracts.account_router.address %>"
]
depends = [
  "invoke.acquire_ownership",
  "contract.account_proxy",
  "contract.core_associated_systems_module"
]
factory.account_proxy.abiOf = "core_associated_systems_module"
factory.account_proxy.event = "AssociatedSystemSet"
factory.account_proxy.arg = 2

[invoke.init_snx]
target = ["core_proxy"]
abi = "contracts/modules/core/AssociatedSystemsModule.sol:AssociatedSystemsModule"
from = "<%= settings.owner %>"
func = "initOrUpgradeToken"
args = [
  "0x534e58546f6b656e000000000000000000000000000000000000000000000000",
  "Synthetix System Token",
  "SNX",
  18,
  "<%= contracts.snx_router.address %>"
]
depends = [
  "invoke.acquire_ownership",
  "contract.snx_proxy",
  "contract.core_associated_systems_module"
]
factory.snx_proxy.abiOf = "core_associated_systems_module"
factory.snx_proxy.event = "AssociatedSystemSet"
factory.snx_proxy.arg = 2

[invoke.init_esnx]
target = ["core_proxy"]
abi = "contracts/modules/core/AssociatedSystemsModule.sol:AssociatedSystemsModule"
from = "<%= settings.owner %>"
func = "initOrUpgradeToken"
args = [
  "0x65534e58546f6b656e0000000000000000000000000000000000000000000000",
  "Escrowed Synthetix",
  "eSNX",
  18,
  "<%= contracts.esnx_router.address %>"
]
depends = [
  "invoke.acquire_ownership",
  "contract.esnx_proxy",
  "contract.core_associated_systems_module"
]
factory.esnx_proxy.abiOf = "core_associated_systems_module"
factory.esnx_proxy.event = "AssociatedSystemSet"
factory.esnx_proxy.arg = 2

[invoke.init_usd]
target = ["core_proxy"]
abi = "contracts/modules/core/AssociatedSystemsModule.sol:AssociatedSystemsModule"
from = "<%= settings.owner %>"
func = "initOrUpgradeToken"
args = [
  "0x555344546f6b656e000000000000000000000000000000000000000000000000",
  "Synthetic USD Token v3",
  "snxUSD",
  18,
  "<%= contracts.usd_router.address %>"
]
depends = [
  "invoke.acquire_ownership",
  "contract.usd_proxy",
  "contract.core_associated_systems_module"
]
factory.usd_proxy.abiOf = "core_associated_systems_module"
factory.usd_proxy.event = "AssociatedSystemSet"
factory.usd_proxy.arg = 2
