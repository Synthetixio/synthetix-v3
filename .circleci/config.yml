version: 2.1

parameters:
  node-version:
    type: string
    default: "16.20.1"

commands:
  yarn-install:
    steps:
      - run: yarn install --immutable --immutable-cache

  install-foundry:
    steps:
      - restore_cache:
          keys:
            - foundry-{{ .Environment.FOUNDRY_CACHE_VERSION }}

      - run:
          name: "Install Foundry"
          working_directory: ~/
          environment:
            SHELL: /bin/bash
          command: |-
            if [ command -v anvil ]; then
              echo "Anvil already installed"
              anvil --version
            else
              curl -L https://foundry.paradigm.xyz | bash
              export PATH="$PATH:$HOME/.foundry/bin"
              echo 'export PATH=$PATH:$HOME/.foundry/bin' >> $BASH_ENV
              foundryup
            fi

      - save_cache:
          key: foundry-{{ .Environment.FOUNDRY_CACHE_VERSION }}
          paths:
            - "~/.foundry"

  install-ipfs:
    steps:
      - restore_cache:
          keys:
            - ipfs-{{ .Environment.IPFS_CACHE_VERSION }}

      - run:
          name: "Install IPFS"
          working_directory: ~/
          command: |
            if [ command -v ipfs ]; then
              echo "IPFS already installed"
              ipfs version
              ipfs id
            else
              LATEST_VERSION=$(curl -sSL https://dist.ipfs.tech/go-ipfs/versions | tail -n 1)
              LATEST_VERSION_NUMBER=${LATEST_VERSION#*v}
              DOWNLOAD_URL="https://dist.ipfs.tech/go-ipfs/${LATEST_VERSION}/go-ipfs_${LATEST_VERSION}_linux-amd64.tar.gz"
              echo "DOWNLOAD_URL=$DOWNLOAD_URL"
              curl -sSL -o ipfs.tar.gz $DOWNLOAD_URL
              tar -xzf ipfs.tar.gz
              export PATH="$PATH:$HOME/go-ipfs"
              echo 'export PATH=$PATH:$HOME/go-ipfs' >> $BASH_ENV
              rm -rf ~/.ipfs
              ipfs init
            fi

      - save_cache:
          key: ipfs-{{ .Environment.IPFS_CACHE_VERSION }}
          paths:
            - "~/go-ipfs"
            - "~/.ipfs"

  run-ipfs-daemon:
    steps:
      - run:
          command: ipfs daemon
          background: true

  wait-for-ipfs:
    steps:
      - run:
          name: "Wait for IPFS daemon to start"
          command: wget --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data '' "http://localhost:5001/api/v0/version"

jobs:
  build-testable:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - install-foundry
      - install-ipfs
      - run-ipfs-daemon
      - yarn-install
      - run: yarn workspaces foreach --topological-dev --verbose run build:ts

      - restore_cache:
          keys:
            - cannon-{{ .Environment.CANNON_CACHE_VERSION }}

      - run: yarn workspaces foreach --topological-dev --verbose run build-testable

      - save_cache:
          key: cannon-{{ .Environment.CANNON_CACHE_VERSION }}
          paths:
            - "~/.local/share/cannon"

  test:
    parameters:
      workspace:
        type: string
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    parallelism: 2
    steps:
      - checkout
      - install-foundry
      - install-ipfs
      - run-ipfs-daemon
      - yarn-install

      - run: yarn workspaces foreach --topological-dev --recursive --verbose --from "<< parameters.workspace >>" run build:ts

      - restore_cache:
          keys:
            - cannon-{{ .Environment.CANNON_CACHE_VERSION }}

      - run:
          environment:
            REPORT_GAS: true
          command: |
            export PATH=$PATH:$PWD/node_modules/.bin
            _dir=$(yarn workspace "<< parameters.workspace >>" exec pwd)
            echo "Workspace: $_dir"
            cd $_dir
            _tests=$(circleci tests glob 'test/**/*.test.ts' | circleci tests split --split-by=timings)
            echo "Tests:"
            for _test in $_tests; do
              echo $_test
            done
            mocha --require hardhat/register --reporter mocha-junit-reporter --reporter-options mochaFile=/tmp/junit/report.xml --exit $_tests

      - store_test_results:
          path: "/tmp/junit"

workflows:
  version: 2.1

  tests:
    jobs:
      - build-testable
      - test:
          name: "test-main"
          workspace: "@synthetixio/main"
          requires: [build-testable]
