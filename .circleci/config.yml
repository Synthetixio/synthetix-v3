version: 2.1

commands:
  yarn-install:
    steps:
      - run: yarn install --immutable --immutable-cache

  run-ipfs-daemon:
    steps:
      - run:
          command: ipfs daemon
          background: true

  wait-for-ipfs:
    steps:
      - run:
          name: "Wait for IPFS daemon to start"
          command: wget --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data '' "http://localhost:5001/api/v0/version"

jobs:
  build-testable:
    docker:
      - image: noisekit/synthetix-cci:node-16.20.1
    steps:
      - run: echo export PATH="$PATH:$HOME/.foundry/bin:$HOME/go-ipfs" > $BASH_ENV
      - checkout
      - run-ipfs-daemon
      - yarn-install
      - run: yarn workspaces foreach --topological-dev --verbose run build:ts

      - restore_cache:
          keys:
            - cannon-{{ .Environment.CACHE_VERSION }}

      - run: yarn workspaces foreach --topological-dev --verbose run build-testable

      - save_cache:
          key: cannon-{{ .Environment.CACHE_VERSION }}
          paths:
            - "~/.local/share/cannon"

  test:
    parameters:
      workspace:
        type: string
    docker:
      - image: noisekit/synthetix-cci:node-16.20.1
    parallelism: 2
    steps:
      - run: echo export PATH="$PATH:$HOME/.foundry/bin:$HOME/go-ipfs" > $BASH_ENV
      - checkout
      - run-ipfs-daemon
      - yarn-install

      - run: yarn workspaces foreach --topological-dev --recursive --verbose --from "<< parameters.workspace >>" run build:ts

      - restore_cache:
          keys:
            - cannon-{{ .Environment.CACHE_VERSION }}

      - run:
          environment:
            REPORT_GAS: true
          command: |
            export PATH=$PATH:$PWD/node_modules/.bin
            _dir=$(yarn workspace "<< parameters.workspace >>" exec pwd)
            echo "Workspace: $_dir"
            cd $_dir
            _tests=$(circleci tests glob 'test/**/*.test.ts' | circleci tests split --split-by=timings)
            echo "Tests:"
            for _test in $_tests; do
              echo $_test
            done
            mocha --require hardhat/register --reporter mocha-junit-reporter --reporter-options mochaFile=/tmp/junit/report.xml --exit $_tests

      - store_test_results:
          path: "/tmp/junit"

workflows:
  version: 2.1

  tests:
    jobs:
      - build-testable
      - test:
          name: "test-main"
          workspace: "@synthetixio/main"
          requires: [build-testable]
