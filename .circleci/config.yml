version: 2.1

parameters:
  node-version:
    type: string
    default: "20.17.0"

commands:
  yarn-install:
    steps:
      - run: date +"%Y-%m" > /tmp/month.txt && cat /tmp/month.txt
      - restore_cache:
          keys:
            - yarn-{{ .Environment.YARN_CACHE_VERSION }}-{{ checksum "/tmp/month.txt" }}-{{ checksum "yarn.lock" }}
            - yarn-{{ .Environment.YARN_CACHE_VERSION }}-{{ checksum "/tmp/month.txt" }}-
      - run: yarn -v
      - run: yarn install --immutable
      - save_cache:
          key: yarn-{{ .Environment.YARN_CACHE_VERSION }}-{{ checksum "/tmp/month.txt" }}-{{ checksum "yarn.lock" }}
          paths:
            - "~/.yarn/berry"

  install-foundry:
    steps:
      - restore_cache:
          keys:
            - foundry-{{ .Environment.FOUNDRY_CACHE_VERSION }}-{{ .Environment.FOUNDRY_COMMIT }}

      - run:
          name: "Add .foundry/bin to PATH"
          command: |-
            export PATH="$PATH:$HOME/.foundry/bin"
            echo 'export PATH=$PATH:$HOME/.foundry/bin' >> $BASH_ENV

      - run:
          name: "forge --version"
          command: |-
            if command -v forge; then
              forge --version
            else
              echo "Forge needs to be installed"
              exit 1 # EXIT! We must compile
              curl -L https://foundry.paradigm.xyz | bash
              cd .foundry/bin
              ./foundryup
              forge --version
            fi

      #- save_cache:
      #    key: foundry-{{ .Environment.FOUNDRY_CACHE_VERSION }}
      #    paths:
      #      - "~/.foundry/bin"

  compile-foundry:
    steps:
      - restore_cache:
          keys:
            - foundry-{{ .Environment.FOUNDRY_CACHE_VERSION }}-{{ .Environment.FOUNDRY_COMMIT }}

      - run:
          name: "Add .foundry/bin to PATH"
          command: |-
            export PATH="$PATH:$HOME/.foundry/bin"
            echo 'export PATH=$PATH:$HOME/.foundry/bin' >> $BASH_ENV

      - run:
          name: "Install Foundry"
          working_directory: ~/
          environment:
            SHELL: /bin/bash
          command: |-
            if command -v forge; then
              echo "Forge already installed"
            else
              curl https://sh.rustup.rs -sSf | sh -s -- -y
              . "$HOME/.cargo/env"
              curl -L https://foundry.paradigm.xyz | bash
              cd .foundry/bin
              ./foundryup -C $FOUNDRY_COMMIT
              forge --version
            fi

      - save_cache:
          key: foundry-{{ .Environment.FOUNDRY_CACHE_VERSION }}-{{ .Environment.FOUNDRY_COMMIT }}
          paths:
            - "~/.foundry/bin"

  install-ipfs:
    steps:
      - restore_cache:
          keys:
            - ipfs-{{ .Environment.IPFS_CACHE_VERSION }}

      - run:
          name: "Install IPFS"
          working_directory: ~/
          command: |
            export PATH="$PATH:$HOME/go-ipfs"
            echo 'export PATH=$PATH:$HOME/go-ipfs' >> $BASH_ENV

            if command -v ipfs; then
              echo "IPFS already installed"
              ipfs version
              ipfs id
            else
              LATEST_VERSION=$(curl -sSL https://dist.ipfs.tech/go-ipfs/versions | tail -n 1)
              LATEST_VERSION_NUMBER=${LATEST_VERSION#*v}
              DOWNLOAD_URL="https://dist.ipfs.tech/go-ipfs/${LATEST_VERSION}/go-ipfs_${LATEST_VERSION}_linux-amd64.tar.gz"
              echo "DOWNLOAD_URL=$DOWNLOAD_URL"
              curl -sSL -o ipfs.tar.gz $DOWNLOAD_URL
              tar -xzf ipfs.tar.gz
              rm -rf ~/.ipfs
              ipfs init
            fi

      - save_cache:
          key: ipfs-{{ .Environment.IPFS_CACHE_VERSION }}
          paths:
            - "~/go-ipfs"
            - "~/.ipfs"

  run-ipfs-daemon:
    steps:
      - run:
          command: ipfs daemon
          background: true

  wait-for-ipfs:
    steps:
      - run:
          name: "Wait for IPFS daemon to start"
          command: wget --output-document - --retry-connrefused --waitretry=20 --read-timeout=20 --timeout=15 -t 10 --post-data '' "http://localhost:5001/api/v0/version"

  github-pr:
    parameters:
      working_directory:
        type: string
      repo_slug:
        type: string
      branch_head:
        type: string
      branch_base:
        type: string
      commit_message:
        type: string
    steps:
      - run:
          working_directory: << parameters.working_directory >>
          name: "Push to '<< parameters.branch_head >>' branch in '<< parameters.repo_slug >>' and open a PR"
          command: |
            STATUS=$(git status)
            if [[ $STATUS == *"nothing to commit, working tree clean"* ]]; then
              echo "SKIP. Working tree is clean. No changes"
              exit 0
            fi

            git branch "<< parameters.branch_head >>"
            git checkout "<< parameters.branch_head >>"

            git config --global user.email engineering@snxdao.io
            git config --global user.name synthetix-team

            git add .
            git commit -m "<< parameters.commit_message >>"
            git push --set-upstream --force origin "<< parameters.branch_head >>"

            curl -s -H "Authorization: token $GITHUB_TOKEN" \
              https://api.github.com/repos/<< parameters.repo_slug >>/pulls?state=open | tee /tmp/opened-pulls.txt

            PR_URL=$(cat /tmp/opened-pulls.txt | jq -r '.[] | select(.head.ref=="<< parameters.branch_head >>") | .html_url')
            echo "Existing PR: $PR_URL"

            # If no PR exists with the branch "<< parameters.branch_head >>", create one
            # If PR already exists it would be updated with the most recent docs via forced push
            if [ -z "$PR_URL" ]; then
              curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
                https://api.github.com/repos/<< parameters.repo_slug >>/pulls \
                -d '{
                  "title": "<< parameters.commit_message >>",
                  "head": "<< parameters.branch_head >>",
                  "base": "<< parameters.branch_base >>"
                }'
            else
              echo "Pull Request already exists: $PR_URL"
            fi

  save-cannon-cache:
    steps:
      - save_cache:
          key: cannon-{{ .Environment.CANNON_CACHE_VERSION }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - "~/.local/share/cannon"

  restore-cannon-cache:
    steps:
      - restore_cache:
          keys:
            - cannon-{{ .Environment.CANNON_CACHE_VERSION }}-{{ .Environment.CIRCLE_SHA1 }}

jobs:
  compile-foundry:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    resource_class: large
    steps:
      - compile-foundry

  build-testable:
    parameters:
      generate-testable-command:
        type: string
        default: "yarn generate-testable"
      build-testable-command:
        type: string
        default: "yarn build-testable"
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - install-foundry
      - yarn-install

      - run: yarn build:ts

      - restore_cache:
          keys:
            - hardhat-{{ .Environment.SOLC_VERSION }}

      - restore_cache:
          keys:
            - testable-hardhat-cache-{{ .Environment.CIRCLE_SHA1 }}
            - testable-hardhat-cache-

      - restore_cache:
          keys:
            - generated-testable-{{ .Environment.CIRCLE_SHA1 }}
            - generated-testable-

      - run:
          name: "Generate testable contracts sources"
          command: << parameters.generate-testable-command >>
      - save_cache:
          key: generated-testable-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - "auxiliary/PythERC7412Wrapper/contracts/generated"
            - "protocol/governance/contracts/generated"
            - "protocol/oracle-manager/contracts/generated"
            - "protocol/synthetix/contracts/generated"
            - "utils/core-modules/contracts/generated"
            # Add more folders here if we generate more

      - restore-cannon-cache
      - run:
          name: "Build testable contracts"
          environment:
            CANNON_REGISTRY_PRIORITY: "local"
          command: << parameters.build-testable-command >>
      - save-cannon-cache

      - save_cache:
          key: testable-hardhat-cache-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - "protocol/synthetix/artifacts"
            - "protocol/synthetix/cache"
            - "protocol/synthetix/typechain-types"
            - "protocol/oracle-manager/artifacts"
            - "protocol/oracle-manager/cache"
            - "protocol/oracle-manager/typechain-types"

            - "markets/perps-market/artifacts"
            - "markets/perps-market/cache"
            - "markets/perps-market/typechain-types"
            - "markets/spot-market/artifacts"
            - "markets/spot-market/cache"
            - "markets/spot-market/typechain-types"
            - "markets/legacy-market/artifacts"
            - "markets/legacy-market/cache"
            - "markets/legacy-market/typechain-types"
            - "markets/bfp-market/artifacts"
            - "markets/bfp-market/cache"
            - "markets/bfp-market/typechain-types"

            - "auxiliary/ArbitrumGasPriceOracle/artifacts"
            - "auxiliary/BuybackSnx/artifacts"
            - "auxiliary/OwnedFeeCollector/artifacts"
            - "auxiliary/ERC4626ToAssetsRatioOracle/artifacts"
            - "auxiliary/OpGasPriceOracle/artifacts"
            - "auxiliary/PythERC7412Wrapper/artifacts"
            - "auxiliary/SpotMarketOracle/artifacts"
            - "auxiliary/TrustedMulticallForwarder/artifacts"
            - "auxiliary/WstEthToStEthRatioOracle/artifacts"

            - "auxiliary/ArbitrumGasPriceOracle/cache"
            - "auxiliary/BuybackSnx/cache"
            - "auxiliary/OwnedFeeCollector/cache"
            - "auxiliary/ERC4626ToAssetsRatioOracle/cache"
            - "auxiliary/OpGasPriceOracle/cache"
            - "auxiliary/PythERC7412Wrapper/cache"
            - "auxiliary/SpotMarketOracle/cache"
            - "auxiliary/TrustedMulticallForwarder/cache"
            - "auxiliary/WstEthToStEthRatioOracle/cache"

            - "auxiliary/ArbitrumGasPriceOracle/typechain-types"
            - "auxiliary/BuybackSnx/typechain-types"
            - "auxiliary/OwnedFeeCollector/typechain-types"
            - "auxiliary/ERC4626ToAssetsRatioOracle/typechain-types"
            - "auxiliary/OpGasPriceOracle/typechain-types"
            - "auxiliary/PythERC7412Wrapper/typechain-types"
            - "auxiliary/SpotMarketOracle/typechain-types"
            - "auxiliary/TrustedMulticallForwarder/typechain-types"
            - "auxiliary/WstEthToStEthRatioOracle/typechain-types"

            - "utils/core-contracts/artifacts"
            - "utils/core-contracts/cache"
            - "utils/core-contracts/typechain-types"
            - "utils/core-modules/artifacts"
            - "utils/core-modules/cache"
            - "utils/core-modules/typechain-types"

      - save_cache:
          key: hardhat-{{ .Environment.SOLC_VERSION }}
          paths:
            - "~/.cache/hardhat-nodejs"

  test-contracts:
    parameters:
      dir:
        type: string
      parallelism:
        type: integer
      mocha-retries:
        type: integer
        default: 2
      batch-retries:
        type: integer
        default: 5
      batch-size:
        type: integer
        default: 1

    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    parallelism: << parameters.parallelism >>
    environment:
      #CANNON_IPFS_URL: "http://127.0.0.1:5001"
    steps:
      - checkout

      - run:
          name: "Split tests"
          working_directory: "<< parameters.dir >>"
          command: |
            circleci tests glob 'test/**/*.test.ts' | circleci tests run --command=">/tmp/tests.txt xargs echo" --verbose
            # if there are no tests, terminate execution after this step
            if [ -s "/tmp/tests.txt" ]; then
              echo cat "/tmp/tests.txt"
              cat "/tmp/tests.txt"
            else
              echo "SKIP: No tests found"
              circleci-agent step halt
            fi

      - store_artifacts:
          path: "/tmp/files.txt"

      - install-foundry
      #- install-ipfs
      #- run-ipfs-daemon
      - yarn-install
      #- wait-for-ipfs

      - restore_cache:
          keys:
            - hardhat-{{ .Environment.SOLC_VERSION }}

      - restore-cannon-cache
      - restore_cache:
          keys:
            - testable-hardhat-cache-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - generated-testable-{{ .Environment.CIRCLE_SHA1 }}

      - run: yarn build:ts

      - run:
          name: "Run tests"
          working_directory: "<< parameters.dir >>"
          environment:
            REPORT_GAS: true
            CANNON_REGISTRY_PRIORITY: local
            MOCHA_RETRIES: << parameters.mocha-retries >>
            BATCH_RETRIES: << parameters.batch-retries >>
            BATCH_SIZE: << parameters.batch-size >>
            TS_NODE_TRANSPILE_ONLY: true
            TS_NODE_TYPE_CHECK: false
          command: |
            set -eou pipefail
            export RUNNER=$HOME/project/.circleci/test-batch.js
            export PATH=$PATH:$HOME/project/node_modules/.bin
            export TEST_FILES=$(cat /tmp/tests.txt)
            node $RUNNER

      - store_test_results:
          path: "/tmp/junit"

      - store_artifacts:
          path: "/tmp/junit"
          destination: "."

  test-subgraph:
    parameters:
      workspace:
        type: string
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: yarn workspace "<< parameters.workspace >>" test

  size-contracts:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install
      - run: yarn build:ts
      - run: yarn size-contracts

  verify-storage:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - install-foundry
      - yarn-install
      - run: yarn build:ts
      - run: yarn storage:dump
      - run: yarn check:storage
      # pull the storage dumps from main so that we can compare against them
      - run: for f in $(find . -name 'storage.dump.json'); do git checkout $(git merge-base HEAD FETCH_HEAD) -- $f || true; done
      # todo: next step may be removable/optimizable, but it only takes like 20 seconds
      - run: yarn storage:verify

  lint:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    steps:
      - checkout
      - yarn-install

      - run: yarn dedupe --check
      - run: yarn deps
      - run: yarn deps:mismatched
      - run: yarn deps:circular
      - run: yarn lint
      # Do not fail the build
      - run: yarn audit || true

  simulate-release:
    parameters:
      workspace:
        type: string
      cannonPackage:
        type: string
      cannonPreset:
        type: string
      hardhatNetwork:
        type: string
      impersonate:
        type: string
      proxy:
        type: string
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    environment:
      #CANNON_IPFS_URL: "http://127.0.0.1:5001"
    steps:
      - checkout
      - install-foundry
      #- install-ipfs
      #- run-ipfs-daemon
      - yarn-install
      #- wait-for-ipfs
      - restore_cache:
          keys:
            - hardhat-{{ .Environment.SOLC_VERSION }}
      - run: yarn build:ts
      - run:
          name: "Simulate release and test for Proxy change"
          command: |
            set -eo pipefail
            yarn workspace "<< parameters.workspace >>" exec \
              hardhat cannon:build \
                --dry-run \
                --network "<< parameters.hardhatNetwork >>" \
                --upgrade-from << parameters.cannonPackage >>@<< parameters.cannonPreset >> \
                --impersonate << parameters.impersonate >> | tee deployment.log

            echo "grep '💥' deployment.log"
            grep '💥' deployment.log

            echo "grep -c 'Executing [<< parameters.proxy >>]' deployment.log"
            if [ $(grep -c 'Executing [<< parameters.proxy >>]' deployment.log) -gt 0 ]; then
              echo "Proxy << parameters.proxy >> was modified"
              exit 1
            fi

  docgen-contracts:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    environment:
      #CANNON_IPFS_URL: "http://127.0.0.1:5001"
      GIT_PAGER: cat
    working_directory: ~/synthetix-v3
    steps:
      - add_ssh_keys:
          fingerprints: "4b:3a:c8:23:b8:4e:86:32:8e:d3:2d:17:0c:2b:63:b6"
      - run:
          working_directory: ~/
          name: "Checkout docs"
          command: |
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git clone git@github.com:Synthetixio/Synthetix-Gitbook-v3.git --verbose --depth 1 --no-tags --single-branch synthetix-gitbook-v3

      - checkout
      - install-foundry
      #- install-ipfs
      #- run-ipfs-daemon
      - yarn-install
      #- wait-for-ipfs

      - run: yarn build:ts

      - restore_cache:
          keys:
            - hardhat-{{ .Environment.SOLC_VERSION }}
      - run:
          name: "Generate docs for each contract"
          command: yarn workspaces foreach --all --verbose run docgen
      - save_cache:
          key: hardhat-{{ .Environment.SOLC_VERSION }}
          paths:
            - "~/.cache/hardhat-nodejs"

      - run:
          name: "Generate combined smart-contracts.md"
          working_directory: ~/synthetix-v3/utils/docgen
          command: |
            ./docgen-contracts.sh
            cp ~/synthetix-v3/docs/smart-contracts.md ~/synthetix-gitbook-v3/for-developers/smart-contracts.md

      - store_artifacts:
          path: "docs"
          destination: "."

      - github-pr:
          working_directory: "~/synthetix-gitbook-v3"
          repo_slug: "Synthetixio/Synthetix-Gitbook-v3"
          branch_head: smart-contracts
          branch_base: en
          commit_message: "Update Smart Contracts"

  update-subgraphs:
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    environment:
      #CANNON_IPFS_URL: "http://127.0.0.1:5001"
      GIT_PAGER: cat
    working_directory: ~/synthetix-v3
    steps:
      - run:
          working_directory: ~/
          name: "Checkout synthetix-v3"
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            git clone git@github.com:Synthetixio/synthetix-v3.git --verbose --no-tags synthetix-v3
            cd synthetix-v3
            git checkout $CIRCLE_SHA1

      - install-foundry
      #- install-ipfs
      #- run-ipfs-daemon
      - yarn-install
      #- wait-for-ipfs

      - run:
          name: "Generate updated subgraph code"
          command: |
            export CANNON_REGISTRY_PROVIDER_URL="https://mainnet.infura.io/v3/$INFURA_API_KEY"
            export CANNON_PROVIDER_URL="https://mainnet.infura.io/v3/$INFURA_API_KEY"
            yarn subgraph:codegen

      - run: yarn workspace @synthetixio/core-subgraph test
      - run: yarn workspace @synthetixio/spot-market-subgraph test
      - run: yarn workspace @synthetixio/perps-market-subgraph test

      - github-pr:
          working_directory: "~/synthetix-v3"
          repo_slug: "Synthetixio/synthetix-v3"
          branch_head: subgraph-updates
          branch_base: main
          commit_message: "Update Subgraphs"

  test-forge:
    parameters:
      workspace:
        type: string
      parallelism:
        type: integer
        default: 1
    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>
    parallelism: << parameters.parallelism >>
    steps:
      - checkout
      - install-foundry
      - yarn-install
      - run: yarn workspace "<< parameters.workspace >>" run forge-test
      - run: yarn workspace "<< parameters.workspace >>" run forge-coverage

      # TODO: Setup codecov job
      - store_artifacts:
          path: "lcov.info"

  single-test:
    parameters:
      dir:
        type: string
      test:
        type: string
      mocha-retries:
        type: integer
        default: 2
      batch-retries:
        type: integer
        default: 5
      batch-size:
        type: integer
        default: 1

    docker:
      - image: cimg/node:<< pipeline.parameters.node-version >>

    steps:
      - checkout

      - install-foundry
      - yarn-install

      - restore_cache:
          keys:
            - hardhat-{{ .Environment.SOLC_VERSION }}
      - restore-cannon-cache
      - restore_cache:
          keys:
            - testable-hardhat-cache-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          keys:
            - generated-testable-{{ .Environment.CIRCLE_SHA1 }}

      - run: yarn build:ts

      - run:
          name: "Run test << parameters.test >>"
          working_directory: "<< parameters.dir >>"
          environment:
            CANNON_REGISTRY_PRIORITY: local
            TS_NODE_TRANSPILE_ONLY: true
            TS_NODE_TYPE_CHECK: false
          command: |
            set -eou pipefail
            export RUNNER=$HOME/project/.circleci/test-batch.js
            export PATH=$PATH:$HOME/project/node_modules/.bin
            mocha --jobs 1 --timeout 10000 -require hardhat/register --exit << parameters.test >>

workflows:
  version: 2.1

  skip:
    when:
      or:
        - equal: ["skip", << pipeline.git.branch >>]
    jobs:
      - build-testable:
          generate-testable-command: "yarn workspaces foreach --recursive --from '@synthetixio/perps-market' --topological-dev --verbose run generate-testable"
          build-testable-command: "yarn workspaces foreach --recursive --from '@synthetixio/perps-market' --topological-dev --verbose run build-testable"

      - single-test:
          name: "test-perps-market"
          requires: [build-testable]
          dir: "./markets/perps-market"
          test: "test/integration/Liquidation/Liquidation.maxLiquidationAmount.maxPd.test.ts"

  tests:
    unless:
      or:
        - equal: ["skip", << pipeline.git.branch >>]
        - equal: ["update-subgraphs", << pipeline.git.branch >>]
        - equal: ["scheduled_pipeline", << pipeline.trigger_source >>]

    jobs:
      - compile-foundry
      - lint
      - size-contracts
      - verify-storage:
          requires: [compile-foundry]

      - build-testable:
          requires: [compile-foundry]

      - test-contracts:
          name: "test-main"
          requires: [build-testable]
          dir: "./protocol/synthetix"
          parallelism: 2
          batch-size: 8

      - test-contracts:
          name: "test-oracle-manager"
          requires: [build-testable]
          dir: "./protocol/oracle-manager"
          parallelism: 1
          batch-size: 5

      - test-contracts:
          name: "test-spot-market"
          requires: [build-testable]
          dir: "./markets/spot-market"
          parallelism: 2
          batch-size: 3

      - test-contracts:
          name: "test-perps-market"
          requires: [build-testable]
          dir: "./markets/perps-market"
          parallelism: 8
          batch-size: 1

      - test-contracts:
          name: "test-bfp-market"
          requires: [build-testable]
          dir: "./markets/bfp-market"
          parallelism: 6
          batch-size: 1

      - test-contracts:
          name: "test-core-modules"
          requires: [compile-foundry]
          dir: "./utils/core-modules"
          parallelism: 1
          batch-size: 5

      - test-contracts:
          name: "test-core-contracts"
          requires: [build-testable]
          dir: "./utils/core-contracts"
          parallelism: 2
          batch-size: 5

      - test-contracts:
          name: "test-core-utils"
          requires: [compile-foundry]
          dir: "./utils/core-utils"
          parallelism: 2
          batch-size: 5

      - test-forge:
          name: "test-rewards-distributor"
          requires: [compile-foundry]
          workspace: "@synthetixio/rewards-distributor"

      - test-subgraph:
          name: "test-subgraph-core"
          workspace: "@synthetixio/core-subgraph"

      - test-subgraph:
          name: "test-subgraph-spot-market"
          workspace: "@synthetixio/spot-market-subgraph"

      - test-subgraph:
          name: "test-subgraph-perps-market"
          workspace: "@synthetixio/perps-market-subgraph"

      #- simulate-release:
      #    name: "synthetix--base-mainnet-andromeda"
      #    requires: [compile-foundry]
      #    workspace: "@synthetixio/main"
      #    cannonPackage: "synthetix:latest"
      #    cannonPreset: "andromeda"
      #    hardhatNetwork: "base-mainnet"
      #    impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
      #    proxy: "contract.InitialCoreProxy"

      #- simulate-release:
      #    name: "synthetix--base-sepolia-andromeda"
      #    requires: [compile-foundry]
      #    workspace: "@synthetixio/main"
      #    cannonPackage: "synthetix:latest"
      #    cannonPreset: "andromeda"
      #    hardhatNetwork: "base-sepolia"
      #    impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
      #    proxy: "contract.InitialCoreProxy"

      #- simulate-release:
      #    name: "synthetix--optimism-mainnet"
      #    requires: [compile-foundry]
      #    workspace: "@synthetixio/main"
      #    cannonPackage: "synthetix:latest"
      #    cannonPreset: "main"
      #    hardhatNetwork: "optimistic-mainnet"
      #    impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
      #    proxy: "contract.InitialCoreProxy"

      #- simulate-release:
      #    name: "synthetix--mainnet"
      #    requires: [compile-foundry]
      #    workspace: "@synthetixio/main"
      #    cannonPackage: "synthetix:latest"
      #    cannonPreset: "main"
      #    hardhatNetwork: "mainnet"
      #    impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
      #    proxy: "contract.InitialCoreProxy"

      - simulate-release:
          name: "oracle-manager--base-mainnet-andromeda"
          requires: [compile-foundry]
          workspace: "@synthetixio/oracle-manager"
          cannonPackage: "oracle-manager:latest"
          cannonPreset: "with-synthetix"
          hardhatNetwork: "base-mainnet"
          impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          proxy: "contract.InitialProxy"

      - simulate-release:
          name: "oracle-manager--base-sepolia-andromeda"
          requires: [compile-foundry]
          workspace: "@synthetixio/oracle-manager"
          cannonPackage: "oracle-manager:latest"
          cannonPreset: "with-synthetix"
          hardhatNetwork: "base-sepolia"
          impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          proxy: "contract.InitialProxy"

      - simulate-release:
          name: "oracle-manager--optimism-mainnet"
          requires: [compile-foundry]
          workspace: "@synthetixio/oracle-manager"
          cannonPackage: "oracle-manager:latest"
          cannonPreset: "with-synthetix"
          hardhatNetwork: "optimistic-mainnet"
          impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          proxy: "contract.InitialProxy"

      - simulate-release:
          name: "oracle-manager--mainnet"
          requires: [compile-foundry]
          workspace: "@synthetixio/oracle-manager"
          cannonPackage: "oracle-manager:latest"
          cannonPreset: "with-synthetix"
          hardhatNetwork: "mainnet"
          impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          proxy: "contract.InitialProxy"

      - simulate-release:
          name: "spot-market--base-mainnet-andromeda"
          requires: [compile-foundry]
          workspace: "@synthetixio/spot-market"
          cannonPackage: "synthetix-spot-market:latest"
          cannonPreset: "andromeda"
          hardhatNetwork: "base-mainnet"
          impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          proxy: "contract.InitialSpotMarketProxy"

      - simulate-release:
          name: "spot-market--base-sepolia-andromeda"
          requires: [compile-foundry]
          workspace: "@synthetixio/spot-market"
          cannonPackage: "synthetix-spot-market:latest"
          cannonPreset: "andromeda"
          hardhatNetwork: "base-sepolia"
          impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          proxy: "contract.InitialSpotMarketProxy"

      - simulate-release:
          name: "spot-market--optimism-mainnet"
          requires: [compile-foundry]
          workspace: "@synthetixio/spot-market"
          cannonPackage: "synthetix-spot-market:latest"
          cannonPreset: "main"
          hardhatNetwork: "optimistic-mainnet"
          impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          proxy: "contract.InitialSpotMarketProxy"

      - simulate-release:
          name: "perps-market--base-mainnet-andromeda"
          requires: [compile-foundry]
          workspace: "@synthetixio/perps-market"
          cannonPackage: "synthetix-perps-market:latest"
          cannonPreset: "andromeda"
          hardhatNetwork: "base-mainnet"
          impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          proxy: "contract.InitialProxy"

      - simulate-release:
          name: "perps-market--base-sepolia-andromeda"
          requires: [compile-foundry]
          workspace: "@synthetixio/perps-market"
          cannonPackage: "synthetix-perps-market:latest"
          cannonPreset: "andromeda"
          hardhatNetwork: "base-sepolia"
          impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
          proxy: "contract.InitialProxy"

      # TODO: Uncomment when deployed
      #- simulate-release:
      #    name: "perps-market--optimism-mainnet"
      #    requires: [compile-foundry]
      #    workspace: "@synthetixio/perps-market"
      #    cannonPackage: "synthetix-perps-market:latest"
      #    cannonPreset: "main"
      #    hardhatNetwork: "optimistic-mainnet"
      #    impersonate: "0x48914229deDd5A9922f44441ffCCfC2Cb7856Ee9"
      #    proxy: "contract.InitialProxy"

  # TODO: Uncomment when update-subgraphs has been refactored/re-implemented to work.
  # update-subgraphs:
  #   when:
  #     or:
  #       - and:
  #           - equal: ["scheduled_pipeline", << pipeline.trigger_source >>]
  #           - equal: ["Check deploys", << pipeline.schedule.name >>]
  #       - equal: ["update-subgraphs", << pipeline.git.branch >>]
  #   jobs:
  #     - update-subgraphs

  docgen-contracts:
    unless:
      or:
        - equal: ["scheduled_pipeline", << pipeline.trigger_source >>]
    jobs:
      - compile-foundry:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - docgen-contracts:
          name: "docgen-contracts"
          requires: [compile-foundry]
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  dev-docgen-contracts:
    unless:
      or:
        - equal: ["scheduled_pipeline", << pipeline.trigger_source >>]
    jobs:
      - compile-foundry:
          filters:
            tags:
              ignore: /.*/
            branches:
              only: /docgen-contracts/
      - docgen-contracts:
          requires: [compile-foundry]
          filters:
            tags:
              ignore: /.*/
            branches:
              only: /docgen-contracts/
