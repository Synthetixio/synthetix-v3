# overrides to create a testable deployment of the core system
version = "<%= package.version %>-testable"
include = ["cannonfile.toml"]

# use the testable oracle manager
[setting.oracle_manager_source]
defaultValue = "oracle-manager:<%= package.version %>-testable"
depends = []

# Test Modules
[contract.TestableAccountStorage]
artifact = "contracts/generated/test/TestableAccountStorage.sol:TestableAccountStorage"

[contract.TestableAccountRBACStorage]
artifact = "contracts/generated/test/TestableAccountRBACStorage.sol:TestableAccountRBACStorage"

[contract.TestableCollateralStorage]
artifact = "contracts/generated/test/TestableCollateralStorage.sol:TestableCollateralStorage"

[contract.TestableCollateralConfigurationStorage]
artifact = "contracts/generated/test/TestableCollateralConfigurationStorage.sol:TestableCollateralConfigurationStorage"

[contract.TestableCollateralLockStorage]
artifact = "contracts/generated/test/TestableCollateralLockStorage.sol:TestableCollateralLockStorage"

[contract.TestableCrossChainStorage]
artifact = "contracts/generated/test/TestableCrossChainStorage.sol:TestableCrossChainStorage"

[contract.TestableDistributionStorage]
artifact = "contracts/generated/test/TestableDistributionStorage.sol:TestableDistributionStorage"

[contract.TestableDistributionActorStorage]
artifact = "contracts/generated/test/TestableDistributionActorStorage.sol:TestableDistributionActorStorage"

[contract.TestableMarketStorage]
artifact = "contracts/generated/test/TestableMarketStorage.sol:TestableMarketStorage"

[contract.TestableMarketConfigurationStorage]
artifact = "contracts/generated/test/TestableMarketConfigurationStorage.sol:TestableMarketConfigurationStorage"

[contract.TestableMarketPoolInfoStorage]
artifact = "contracts/generated/test/TestableMarketPoolInfoStorage.sol:TestableMarketPoolInfoStorage"

[contract.TestablePoolStorage]
artifact = "contracts/generated/test/TestablePoolStorage.sol:TestablePoolStorage"

[contract.TestableSystemPoolConfigurationStorage]
artifact = "contracts/generated/test/TestableSystemPoolConfigurationStorage.sol:TestableSystemPoolConfigurationStorage"

[contract.TestableRewardDistributionStorage]
artifact = "contracts/generated/test/TestableRewardDistributionStorage.sol:TestableRewardDistributionStorage"

[contract.TestableRewardDistributionClaimStatusStorage]
artifact = "contracts/generated/test/TestableRewardDistributionClaimStatusStorage.sol:TestableRewardDistributionClaimStatusStorage"

[contract.TestableScalableMappingStorage]
artifact = "contracts/generated/test/TestableScalableMappingStorage.sol:TestableScalableMappingStorage"

[contract.TestableVaultEpochStorage]
artifact = "contracts/generated/test/TestableVaultEpochStorage.sol:TestableVaultEpochStorage"

[contract.TestableVaultStorage]
artifact = "contracts/generated/test/TestableVaultStorage.sol:TestableVaultStorage"

# Core
[router.CoreRouter]
contracts = [
    "InitialModuleBundle",
    "FeatureFlagModule",
    "AccountModule",
    "AssociateDebtModule",
    "AssociatedSystemsModule",
    "CcipReceiverModule",
    "CollateralModule",
    "CollateralConfigurationModule",
    "CrossChainUSDModule",
    "IssueUSDModule",
    "LiquidationModule",
    "MarketCollateralModule",
    "MarketManagerModule",
    "PoolConfigurationModule",
    "PoolModule",
    "RewardsManagerModule",
    "UtilsModule",
    "VaultModule",
    "TestableAccountStorage",
    "TestableAccountRBACStorage",
    "TestableCollateralStorage",
    "TestableCollateralConfigurationStorage",
    "TestableCollateralLockStorage",
    "TestableCrossChainStorage",
    "TestableDistributionStorage",
    "TestableDistributionActorStorage",
    "TestableMarketStorage",
    "TestableMarketConfigurationStorage",
    "TestablePoolStorage",
    "TestableSystemPoolConfigurationStorage",
    "TestableRewardDistributionStorage",
    "TestableRewardDistributionClaimStatusStorage",
    "TestableScalableMappingStorage",
    "TestableVaultEpochStorage",
    "TestableVaultStorage",
]
includeDiamondCompatibility = false

# Post stuff
[contract.CollateralMock]
artifact = "contracts/mocks/CollateralMock.sol:CollateralMock"

[contract.Collateral2Mock]
artifact = "contracts/mocks/CollateralMock.sol:CollateralMock"
salt = "2"

[invoke.intializeCollateralMock]
target = ["CollateralMock"]
func = "initialize"
args = ["SampleToken", "TKN", "18"]

[invoke.enable_feature_registerMarket]
target = ["CoreProxy"]
fromCall.func = "owner"
func = "setFeatureFlagAllowAll"
args = ["<%= formatBytes32String('registerMarket') %>", true]

[invoke.enable_feature_createPool]
target = ["CoreProxy"]
fromCall.func = "owner"
func = "setFeatureFlagAllowAll"
args = ["<%= formatBytes32String('createPool') %>", true]
