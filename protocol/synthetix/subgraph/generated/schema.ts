// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from '@graphprotocol/graph-ts';

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Pool entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Pool', id.toString(), this);
    }
  }

  static loadInBlock(id: string): Pool | null {
    return changetype<Pool | null>(store.get_in_block('Pool', id));
  }

  static load(id: string): Pool | null {
    return changetype<Pool | null>(store.get('Pool', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get('owner');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set('owner', Value.fromBytes(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updated_at(): BigInt | null {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt | null) {
    if (!value) {
      this.unset('updated_at');
    } else {
      this.set('updated_at', Value.fromBigInt(<BigInt>value));
    }
  }

  get updated_at_block(): BigInt | null {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt | null) {
    if (!value) {
      this.unset('updated_at_block');
    } else {
      this.set('updated_at_block', Value.fromBigInt(<BigInt>value));
    }
  }

  get nominated_owner(): Bytes | null {
    let value = this.get('nominated_owner');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set nominated_owner(value: Bytes | null) {
    if (!value) {
      this.unset('nominated_owner');
    } else {
      this.set('nominated_owner', Value.fromBytes(<Bytes>value));
    }
  }

  get name(): string | null {
    let value = this.get('name');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset('name');
    } else {
      this.set('name', Value.fromString(<string>value));
    }
  }

  get total_weight(): BigInt | null {
    let value = this.get('total_weight');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set total_weight(value: BigInt | null) {
    if (!value) {
      this.unset('total_weight');
    } else {
      this.set('total_weight', Value.fromBigInt(<BigInt>value));
    }
  }

  get market_ids(): Array<string> | null {
    let value = this.get('market_ids');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set market_ids(value: Array<string> | null) {
    if (!value) {
      this.unset('market_ids');
    } else {
      this.set('market_ids', Value.fromStringArray(<Array<string>>value));
    }
  }

  get configurations(): Array<string> | null {
    let value = this.get('configurations');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }
}

export class Market extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Market entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Market must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Market', id.toString(), this);
    }
  }

  static loadInBlock(id: string): Market | null {
    return changetype<Market | null>(store.get_in_block('Market', id));
  }

  static load(id: string): Market | null {
    return changetype<Market | null>(store.get('Market', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get('address');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set('address', Value.fromBytes(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get configurations(): Array<string> | null {
    let value = this.get('configurations');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get market_snapshots_by_day(): Array<string> | null {
    let value = this.get('market_snapshots_by_day');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get market_snapshots_by_week(): Array<string> | null {
    let value = this.get('market_snapshots_by_week');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }

  get usd_deposited(): BigDecimal {
    let value = this.get('usd_deposited');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set usd_deposited(value: BigDecimal) {
    this.set('usd_deposited', Value.fromBigDecimal(value));
  }

  get usd_withdrawn(): BigDecimal {
    let value = this.get('usd_withdrawn');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set usd_withdrawn(value: BigDecimal) {
    this.set('usd_withdrawn', Value.fromBigDecimal(value));
  }

  get net_issuance(): BigDecimal {
    let value = this.get('net_issuance');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set net_issuance(value: BigDecimal) {
    this.set('net_issuance', Value.fromBigDecimal(value));
  }

  get reported_debt(): BigDecimal {
    let value = this.get('reported_debt');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set reported_debt(value: BigDecimal) {
    this.set('reported_debt', Value.fromBigDecimal(value));
  }
}

export class MarketSnapshotByDay extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save MarketSnapshotByDay entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketSnapshotByDay must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('MarketSnapshotByDay', id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketSnapshotByDay | null {
    return changetype<MarketSnapshotByDay | null>(store.get_in_block('MarketSnapshotByDay', id));
  }

  static load(id: string): MarketSnapshotByDay | null {
    return changetype<MarketSnapshotByDay | null>(store.get('MarketSnapshotByDay', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updates_in_period(): BigInt {
    let value = this.get('updates_in_period');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updates_in_period(value: BigInt) {
    this.set('updates_in_period', Value.fromBigInt(value));
  }

  get market(): string {
    let value = this.get('market');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set('market', Value.fromString(value));
  }

  get usd_deposited(): BigDecimal {
    let value = this.get('usd_deposited');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set usd_deposited(value: BigDecimal) {
    this.set('usd_deposited', Value.fromBigDecimal(value));
  }

  get usd_withdrawn(): BigDecimal {
    let value = this.get('usd_withdrawn');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set usd_withdrawn(value: BigDecimal) {
    this.set('usd_withdrawn', Value.fromBigDecimal(value));
  }

  get net_issuance(): BigDecimal {
    let value = this.get('net_issuance');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set net_issuance(value: BigDecimal) {
    this.set('net_issuance', Value.fromBigDecimal(value));
  }

  get reported_debt(): BigDecimal {
    let value = this.get('reported_debt');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set reported_debt(value: BigDecimal) {
    this.set('reported_debt', Value.fromBigDecimal(value));
  }
}

export class MarketSnapshotByWeek extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save MarketSnapshotByWeek entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketSnapshotByWeek must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('MarketSnapshotByWeek', id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketSnapshotByWeek | null {
    return changetype<MarketSnapshotByWeek | null>(store.get_in_block('MarketSnapshotByWeek', id));
  }

  static load(id: string): MarketSnapshotByWeek | null {
    return changetype<MarketSnapshotByWeek | null>(store.get('MarketSnapshotByWeek', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updates_in_period(): BigInt {
    let value = this.get('updates_in_period');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updates_in_period(value: BigInt) {
    this.set('updates_in_period', Value.fromBigInt(value));
  }

  get market(): string {
    let value = this.get('market');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set('market', Value.fromString(value));
  }

  get usd_deposited(): BigDecimal {
    let value = this.get('usd_deposited');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set usd_deposited(value: BigDecimal) {
    this.set('usd_deposited', Value.fromBigDecimal(value));
  }

  get usd_withdrawn(): BigDecimal {
    let value = this.get('usd_withdrawn');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set usd_withdrawn(value: BigDecimal) {
    this.set('usd_withdrawn', Value.fromBigDecimal(value));
  }

  get net_issuance(): BigDecimal {
    let value = this.get('net_issuance');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set net_issuance(value: BigDecimal) {
    this.set('net_issuance', Value.fromBigDecimal(value));
  }

  get reported_debt(): BigDecimal {
    let value = this.get('reported_debt');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set reported_debt(value: BigDecimal) {
    this.set('reported_debt', Value.fromBigDecimal(value));
  }
}

export class MarketConfiguration extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save MarketConfiguration entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketConfiguration must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('MarketConfiguration', id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketConfiguration | null {
    return changetype<MarketConfiguration | null>(store.get_in_block('MarketConfiguration', id));
  }

  static load(id: string): MarketConfiguration | null {
    return changetype<MarketConfiguration | null>(store.get('MarketConfiguration', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get pool(): string {
    let value = this.get('pool');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get market(): string {
    let value = this.get('market');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set market(value: string) {
    this.set('market', Value.fromString(value));
  }

  get weight(): BigInt {
    let value = this.get('weight');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set weight(value: BigInt) {
    this.set('weight', Value.fromBigInt(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get max_debt_share_value(): BigDecimal {
    let value = this.get('max_debt_share_value');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set max_debt_share_value(value: BigDecimal) {
    this.set('max_debt_share_value', Value.fromBigDecimal(value));
  }
}

export class CollateralType extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save CollateralType entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollateralType must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('CollateralType', id.toString(), this);
    }
  }

  static loadInBlock(id: string): CollateralType | null {
    return changetype<CollateralType | null>(store.get_in_block('CollateralType', id));
  }

  static load(id: string): CollateralType | null {
    return changetype<CollateralType | null>(store.get('CollateralType', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get oracle_node_id(): BigInt {
    let value = this.get('oracle_node_id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set oracle_node_id(value: BigInt) {
    this.set('oracle_node_id', Value.fromBigInt(value));
  }

  get depositing_enabled(): boolean {
    let value = this.get('depositing_enabled');
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set depositing_enabled(value: boolean) {
    this.set('depositing_enabled', Value.fromBoolean(value));
  }

  get issuance_ratio(): BigDecimal {
    let value = this.get('issuance_ratio');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set issuance_ratio(value: BigDecimal) {
    this.set('issuance_ratio', Value.fromBigDecimal(value));
  }

  get liquidation_ratio(): BigDecimal {
    let value = this.get('liquidation_ratio');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidation_ratio(value: BigDecimal) {
    this.set('liquidation_ratio', Value.fromBigDecimal(value));
  }

  get liquidation_reward(): BigDecimal {
    let value = this.get('liquidation_reward');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set liquidation_reward(value: BigDecimal) {
    this.set('liquidation_reward', Value.fromBigDecimal(value));
  }

  get min_delegation(): BigDecimal {
    let value = this.get('min_delegation');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set min_delegation(value: BigDecimal) {
    this.set('min_delegation', Value.fromBigDecimal(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }

  get total_amount_deposited(): BigDecimal | null {
    let value = this.get('total_amount_deposited');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set total_amount_deposited(value: BigDecimal | null) {
    if (!value) {
      this.unset('total_amount_deposited');
    } else {
      this.set('total_amount_deposited', Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Account entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Account', id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block('Account', id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get('Account', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get('owner');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set('owner', Value.fromBytes(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }

  get permissions(): Array<string> | null {
    let value = this.get('permissions');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set permissions(value: Array<string> | null) {
    if (!value) {
      this.unset('permissions');
    } else {
      this.set('permissions', Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class AccountPermissionUsers extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save AccountPermissionUsers entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountPermissionUsers must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('AccountPermissionUsers', id.toString(), this);
    }
  }

  static loadInBlock(id: string): AccountPermissionUsers | null {
    return changetype<AccountPermissionUsers | null>(
      store.get_in_block('AccountPermissionUsers', id)
    );
  }

  static load(id: string): AccountPermissionUsers | null {
    return changetype<AccountPermissionUsers | null>(store.get('AccountPermissionUsers', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get('address');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set('address', Value.fromBytes(value));
  }

  get account(): string {
    let value = this.get('account');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set('account', Value.fromString(value));
  }

  get permissions(): Array<Bytes> {
    let value = this.get('permissions');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytesArray();
    }
  }

  set permissions(value: Array<Bytes>) {
    this.set('permissions', Value.fromBytesArray(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }
}

export class Position extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Position entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Position must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Position', id.toString(), this);
    }
  }

  static loadInBlock(id: string): Position | null {
    return changetype<Position | null>(store.get_in_block('Position', id));
  }

  static load(id: string): Position | null {
    return changetype<Position | null>(store.get('Position', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get collateral_amount(): BigDecimal {
    let value = this.get('collateral_amount');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set collateral_amount(value: BigDecimal) {
    this.set('collateral_amount', Value.fromBigDecimal(value));
  }

  get leverage(): BigDecimal {
    let value = this.get('leverage');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set leverage(value: BigDecimal) {
    this.set('leverage', Value.fromBigDecimal(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }

  get account(): string {
    let value = this.get('account');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set('account', Value.fromString(value));
  }

  get pool(): string {
    let value = this.get('pool');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get collateral_type(): string {
    let value = this.get('collateral_type');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set collateral_type(value: string) {
    this.set('collateral_type', Value.fromString(value));
  }

  get net_issuance(): BigDecimal | null {
    let value = this.get('net_issuance');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set net_issuance(value: BigDecimal | null) {
    if (!value) {
      this.unset('net_issuance');
    } else {
      this.set('net_issuance', Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get total_minted(): BigDecimal | null {
    let value = this.get('total_minted');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set total_minted(value: BigDecimal | null) {
    if (!value) {
      this.unset('total_minted');
    } else {
      this.set('total_minted', Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get total_burned(): BigDecimal | null {
    let value = this.get('total_burned');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set total_burned(value: BigDecimal | null) {
    if (!value) {
      this.unset('total_burned');
    } else {
      this.set('total_burned', Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Vault entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Vault', id.toString(), this);
    }
  }

  static loadInBlock(id: string): Vault | null {
    return changetype<Vault | null>(store.get_in_block('Vault', id));
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get('Vault', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get collateral_amount(): BigDecimal {
    let value = this.get('collateral_amount');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set collateral_amount(value: BigDecimal) {
    this.set('collateral_amount', Value.fromBigDecimal(value));
  }

  get collateral_type(): string {
    let value = this.get('collateral_type');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set collateral_type(value: string) {
    this.set('collateral_type', Value.fromString(value));
  }

  get pool(): string {
    let value = this.get('pool');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }
}

export class RewardsDistributor extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save RewardsDistributor entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardsDistributor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('RewardsDistributor', id.toString(), this);
    }
  }

  static loadInBlock(id: string): RewardsDistributor | null {
    return changetype<RewardsDistributor | null>(store.get_in_block('RewardsDistributor', id));
  }

  static load(id: string): RewardsDistributor | null {
    return changetype<RewardsDistributor | null>(store.get('RewardsDistributor', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get total_distributed(): BigDecimal {
    let value = this.get('total_distributed');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set total_distributed(value: BigDecimal) {
    this.set('total_distributed', Value.fromBigDecimal(value));
  }

  get total_claimed(): BigDecimal {
    let value = this.get('total_claimed');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set total_claimed(value: BigDecimal) {
    this.set('total_claimed', Value.fromBigDecimal(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }
}

export class RewardsDistribution extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save RewardsDistribution entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardsDistribution must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('RewardsDistribution', id.toString(), this);
    }
  }

  static loadInBlock(id: string): RewardsDistribution | null {
    return changetype<RewardsDistribution | null>(store.get_in_block('RewardsDistribution', id));
  }

  static load(id: string): RewardsDistribution | null {
    return changetype<RewardsDistribution | null>(store.get('RewardsDistribution', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get collateral_type(): Bytes {
    let value = this.get('collateral_type');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set collateral_type(value: Bytes) {
    this.set('collateral_type', Value.fromBytes(value));
  }

  get pool(): string {
    let value = this.get('pool');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get('amount');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set('amount', Value.fromBigDecimal(value));
  }

  get start(): BigInt {
    let value = this.get('start');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set start(value: BigInt) {
    this.set('start', Value.fromBigInt(value));
  }

  get duration(): BigInt {
    let value = this.get('duration');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt) {
    this.set('duration', Value.fromBigInt(value));
  }

  get distributor(): string {
    let value = this.get('distributor');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set distributor(value: string) {
    this.set('distributor', Value.fromString(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }
}

export class AccountRewardsDistributor extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save AccountRewardsDistributor entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountRewardsDistributor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('AccountRewardsDistributor', id.toString(), this);
    }
  }

  static loadInBlock(id: string): AccountRewardsDistributor | null {
    return changetype<AccountRewardsDistributor | null>(
      store.get_in_block('AccountRewardsDistributor', id)
    );
  }

  static load(id: string): AccountRewardsDistributor | null {
    return changetype<AccountRewardsDistributor | null>(store.get('AccountRewardsDistributor', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get distributor(): string {
    let value = this.get('distributor');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set distributor(value: string) {
    this.set('distributor', Value.fromString(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }

  get total_claimed(): BigDecimal | null {
    let value = this.get('total_claimed');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set total_claimed(value: BigDecimal | null) {
    if (!value) {
      this.unset('total_claimed');
    } else {
      this.set('total_claimed', Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}

export class RewardsClaimed extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save RewardsClaimed entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RewardsClaimed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('RewardsClaimed', id.toString(), this);
    }
  }

  static loadInBlock(id: string): RewardsClaimed | null {
    return changetype<RewardsClaimed | null>(store.get_in_block('RewardsClaimed', id));
  }

  static load(id: string): RewardsClaimed | null {
    return changetype<RewardsClaimed | null>(store.get('RewardsClaimed', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get account(): string {
    let value = this.get('account');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set('account', Value.fromString(value));
  }

  get pool(): string {
    let value = this.get('pool');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get collateral_type(): Bytes {
    let value = this.get('collateral_type');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set collateral_type(value: Bytes) {
    this.set('collateral_type', Value.fromBytes(value));
  }

  get distributor(): string {
    let value = this.get('distributor');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set distributor(value: string) {
    this.set('distributor', Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get('amount');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal) {
    this.set('amount', Value.fromBigDecimal(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }
}

export class Liquidation extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Liquidation entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Liquidation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Liquidation', id.toString(), this);
    }
  }

  static loadInBlock(id: string): Liquidation | null {
    return changetype<Liquidation | null>(store.get_in_block('Liquidation', id));
  }

  static load(id: string): Liquidation | null {
    return changetype<Liquidation | null>(store.get('Liquidation', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get account(): string {
    let value = this.get('account');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set account(value: string) {
    this.set('account', Value.fromString(value));
  }

  get pool(): string {
    let value = this.get('pool');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get collateral_type(): Bytes {
    let value = this.get('collateral_type');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set collateral_type(value: Bytes) {
    this.set('collateral_type', Value.fromBytes(value));
  }

  get debt_liquidated(): BigDecimal {
    let value = this.get('debt_liquidated');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set debt_liquidated(value: BigDecimal) {
    this.set('debt_liquidated', Value.fromBigDecimal(value));
  }

  get collateral_liquidated(): BigDecimal {
    let value = this.get('collateral_liquidated');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set collateral_liquidated(value: BigDecimal) {
    this.set('collateral_liquidated', Value.fromBigDecimal(value));
  }

  get amount_rewarded(): BigDecimal {
    let value = this.get('amount_rewarded');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set amount_rewarded(value: BigDecimal) {
    this.set('amount_rewarded', Value.fromBigDecimal(value));
  }

  get liquidate_as_account_id(): string {
    let value = this.get('liquidate_as_account_id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set liquidate_as_account_id(value: string) {
    this.set('liquidate_as_account_id', Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get('sender');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set('sender', Value.fromBytes(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }
}

export class VaultLiquidation extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save VaultLiquidation entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultLiquidation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('VaultLiquidation', id.toString(), this);
    }
  }

  static loadInBlock(id: string): VaultLiquidation | null {
    return changetype<VaultLiquidation | null>(store.get_in_block('VaultLiquidation', id));
  }

  static load(id: string): VaultLiquidation | null {
    return changetype<VaultLiquidation | null>(store.get('VaultLiquidation', id));
  }

  get id(): string {
    let value = this.get('id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get pool(): string {
    let value = this.get('pool');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set pool(value: string) {
    this.set('pool', Value.fromString(value));
  }

  get collateral_type(): Bytes {
    let value = this.get('collateral_type');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set collateral_type(value: Bytes) {
    this.set('collateral_type', Value.fromBytes(value));
  }

  get amount_rewarded(): BigDecimal {
    let value = this.get('amount_rewarded');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set amount_rewarded(value: BigDecimal) {
    this.set('amount_rewarded', Value.fromBigDecimal(value));
  }

  get amount_liquidated(): BigDecimal {
    let value = this.get('amount_liquidated');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set amount_liquidated(value: BigDecimal) {
    this.set('amount_liquidated', Value.fromBigDecimal(value));
  }

  get collateral_liquidated(): BigDecimal {
    let value = this.get('collateral_liquidated');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigDecimal();
    }
  }

  set collateral_liquidated(value: BigDecimal) {
    this.set('collateral_liquidated', Value.fromBigDecimal(value));
  }

  get liquidate_as_account_id(): string {
    let value = this.get('liquidate_as_account_id');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toString();
    }
  }

  set liquidate_as_account_id(value: string) {
    this.set('liquidate_as_account_id', Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get('sender');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set('sender', Value.fromBytes(value));
  }

  get created_at(): BigInt {
    let value = this.get('created_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at(value: BigInt) {
    this.set('created_at', Value.fromBigInt(value));
  }

  get created_at_block(): BigInt {
    let value = this.get('created_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set created_at_block(value: BigInt) {
    this.set('created_at_block', Value.fromBigInt(value));
  }

  get updated_at(): BigInt {
    let value = this.get('updated_at');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at(value: BigInt) {
    this.set('updated_at', Value.fromBigInt(value));
  }

  get updated_at_block(): BigInt {
    let value = this.get('updated_at_block');
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error('Cannot return null for a required field.');
    } else {
      return value.toBigInt();
    }
  }

  set updated_at_block(value: BigInt) {
    this.set('updated_at_block', Value.fromBigInt(value));
  }
}
