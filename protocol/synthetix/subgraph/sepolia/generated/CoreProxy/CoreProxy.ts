// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerNominated extends ethereum.Event {
  get params(): OwnerNominated__Params {
    return new OwnerNominated__Params(this);
  }
}

export class OwnerNominated__Params {
  _event: OwnerNominated;

  constructor(event: OwnerNominated) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get self(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get implementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FeatureFlagAllowAllSet extends ethereum.Event {
  get params(): FeatureFlagAllowAllSet__Params {
    return new FeatureFlagAllowAllSet__Params(this);
  }
}

export class FeatureFlagAllowAllSet__Params {
  _event: FeatureFlagAllowAllSet;

  constructor(event: FeatureFlagAllowAllSet) {
    this._event = event;
  }

  get feature(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get allowAll(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class FeatureFlagAllowlistAdded extends ethereum.Event {
  get params(): FeatureFlagAllowlistAdded__Params {
    return new FeatureFlagAllowlistAdded__Params(this);
  }
}

export class FeatureFlagAllowlistAdded__Params {
  _event: FeatureFlagAllowlistAdded;

  constructor(event: FeatureFlagAllowlistAdded) {
    this._event = event;
  }

  get feature(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FeatureFlagAllowlistRemoved extends ethereum.Event {
  get params(): FeatureFlagAllowlistRemoved__Params {
    return new FeatureFlagAllowlistRemoved__Params(this);
  }
}

export class FeatureFlagAllowlistRemoved__Params {
  _event: FeatureFlagAllowlistRemoved;

  constructor(event: FeatureFlagAllowlistRemoved) {
    this._event = event;
  }

  get feature(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FeatureFlagDeniersReset extends ethereum.Event {
  get params(): FeatureFlagDeniersReset__Params {
    return new FeatureFlagDeniersReset__Params(this);
  }
}

export class FeatureFlagDeniersReset__Params {
  _event: FeatureFlagDeniersReset;

  constructor(event: FeatureFlagDeniersReset) {
    this._event = event;
  }

  get feature(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get deniers(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class FeatureFlagDenyAllSet extends ethereum.Event {
  get params(): FeatureFlagDenyAllSet__Params {
    return new FeatureFlagDenyAllSet__Params(this);
  }
}

export class FeatureFlagDenyAllSet__Params {
  _event: FeatureFlagDenyAllSet;

  constructor(event: FeatureFlagDenyAllSet) {
    this._event = event;
  }

  get feature(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get denyAll(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class AccountCreated extends ethereum.Event {
  get params(): AccountCreated__Params {
    return new AccountCreated__Params(this);
  }
}

export class AccountCreated__Params {
  _event: AccountCreated;

  constructor(event: AccountCreated) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PermissionGranted extends ethereum.Event {
  get params(): PermissionGranted__Params {
    return new PermissionGranted__Params(this);
  }
}

export class PermissionGranted__Params {
  _event: PermissionGranted;

  constructor(event: PermissionGranted) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get permission(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get user(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class PermissionRevoked extends ethereum.Event {
  get params(): PermissionRevoked__Params {
    return new PermissionRevoked__Params(this);
  }
}

export class PermissionRevoked__Params {
  _event: PermissionRevoked;

  constructor(event: PermissionRevoked) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get permission(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get user(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class DebtAssociated extends ethereum.Event {
  get params(): DebtAssociated__Params {
    return new DebtAssociated__Params(this);
  }
}

export class DebtAssociated__Params {
  _event: DebtAssociated;

  constructor(event: DebtAssociated) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get accountId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get updatedDebt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class AssociatedSystemSet extends ethereum.Event {
  get params(): AssociatedSystemSet__Params {
    return new AssociatedSystemSet__Params(this);
  }
}

export class AssociatedSystemSet__Params {
  _event: AssociatedSystemSet;

  constructor(event: AssociatedSystemSet) {
    this._event = event;
  }

  get kind(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get proxy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get impl(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CollateralLockCreated extends ethereum.Event {
  get params(): CollateralLockCreated__Params {
    return new CollateralLockCreated__Params(this);
  }
}

export class CollateralLockCreated__Params {
  _event: CollateralLockCreated;

  constructor(event: CollateralLockCreated) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get expireTimestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CollateralLockExpired extends ethereum.Event {
  get params(): CollateralLockExpired__Params {
    return new CollateralLockExpired__Params(this);
  }
}

export class CollateralLockExpired__Params {
  _event: CollateralLockExpired;

  constructor(event: CollateralLockExpired) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get expireTimestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Deposited extends ethereum.Event {
  get params(): Deposited__Params {
    return new Deposited__Params(this);
  }
}

export class Deposited__Params {
  _event: Deposited;

  constructor(event: Deposited) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class CollateralConfigured extends ethereum.Event {
  get params(): CollateralConfigured__Params {
    return new CollateralConfigured__Params(this);
  }
}

export class CollateralConfigured__Params {
  _event: CollateralConfigured;

  constructor(event: CollateralConfigured) {
    this._event = event;
  }

  get collateralType(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get config(): CollateralConfiguredConfigStruct {
    return changetype<CollateralConfiguredConfigStruct>(this._event.parameters[1].value.toTuple());
  }
}

export class CollateralConfiguredConfigStruct extends ethereum.Tuple {
  get depositingEnabled(): boolean {
    return this[0].toBoolean();
  }

  get issuanceRatioD18(): BigInt {
    return this[1].toBigInt();
  }

  get liquidationRatioD18(): BigInt {
    return this[2].toBigInt();
  }

  get liquidationRewardD18(): BigInt {
    return this[3].toBigInt();
  }

  get oracleNodeId(): Bytes {
    return this[4].toBytes();
  }

  get tokenAddress(): Address {
    return this[5].toAddress();
  }

  get minDelegationD18(): BigInt {
    return this[6].toBigInt();
  }
}

export class TransferCrossChainInitiated extends ethereum.Event {
  get params(): TransferCrossChainInitiated__Params {
    return new TransferCrossChainInitiated__Params(this);
  }
}

export class TransferCrossChainInitiated__Params {
  _event: TransferCrossChainInitiated;

  constructor(event: TransferCrossChainInitiated) {
    this._event = event;
  }

  get destChainId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class IssuanceFeePaid extends ethereum.Event {
  get params(): IssuanceFeePaid__Params {
    return new IssuanceFeePaid__Params(this);
  }
}

export class IssuanceFeePaid__Params {
  _event: IssuanceFeePaid;

  constructor(event: IssuanceFeePaid) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UsdBurned extends ethereum.Event {
  get params(): UsdBurned__Params {
    return new UsdBurned__Params(this);
  }
}

export class UsdBurned__Params {
  _event: UsdBurned;

  constructor(event: UsdBurned) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class UsdMinted extends ethereum.Event {
  get params(): UsdMinted__Params {
    return new UsdMinted__Params(this);
  }
}

export class UsdMinted__Params {
  _event: UsdMinted;

  constructor(event: UsdMinted) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Liquidation extends ethereum.Event {
  get params(): Liquidation__Params {
    return new Liquidation__Params(this);
  }
}

export class Liquidation__Params {
  _event: Liquidation;

  constructor(event: Liquidation) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get liquidationData(): LiquidationLiquidationDataStruct {
    return changetype<LiquidationLiquidationDataStruct>(this._event.parameters[3].value.toTuple());
  }

  get liquidateAsAccountId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class LiquidationLiquidationDataStruct extends ethereum.Tuple {
  get debtLiquidated(): BigInt {
    return this[0].toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this[1].toBigInt();
  }

  get amountRewarded(): BigInt {
    return this[2].toBigInt();
  }
}

export class VaultLiquidation extends ethereum.Event {
  get params(): VaultLiquidation__Params {
    return new VaultLiquidation__Params(this);
  }
}

export class VaultLiquidation__Params {
  _event: VaultLiquidation;

  constructor(event: VaultLiquidation) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidationData(): VaultLiquidationLiquidationDataStruct {
    return changetype<VaultLiquidationLiquidationDataStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }

  get liquidateAsAccountId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class VaultLiquidationLiquidationDataStruct extends ethereum.Tuple {
  get debtLiquidated(): BigInt {
    return this[0].toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this[1].toBigInt();
  }

  get amountRewarded(): BigInt {
    return this[2].toBigInt();
  }
}

export class MarketCollateralDeposited extends ethereum.Event {
  get params(): MarketCollateralDeposited__Params {
    return new MarketCollateralDeposited__Params(this);
  }
}

export class MarketCollateralDeposited__Params {
  _event: MarketCollateralDeposited;

  constructor(event: MarketCollateralDeposited) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get creditCapacity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get netIssuance(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get depositedCollateralValue(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get reportedDebt(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class MarketCollateralWithdrawn extends ethereum.Event {
  get params(): MarketCollateralWithdrawn__Params {
    return new MarketCollateralWithdrawn__Params(this);
  }
}

export class MarketCollateralWithdrawn__Params {
  _event: MarketCollateralWithdrawn;

  constructor(event: MarketCollateralWithdrawn) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get creditCapacity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get netIssuance(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get depositedCollateralValue(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get reportedDebt(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class MaximumMarketCollateralConfigured extends ethereum.Event {
  get params(): MaximumMarketCollateralConfigured__Params {
    return new MaximumMarketCollateralConfigured__Params(this);
  }
}

export class MaximumMarketCollateralConfigured__Params {
  _event: MaximumMarketCollateralConfigured;

  constructor(event: MaximumMarketCollateralConfigured) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get systemAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class MarketRegistered extends ethereum.Event {
  get params(): MarketRegistered__Params {
    return new MarketRegistered__Params(this);
  }
}

export class MarketRegistered__Params {
  _event: MarketRegistered;

  constructor(event: MarketRegistered) {
    this._event = event;
  }

  get market(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get marketId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MarketSystemFeePaid extends ethereum.Event {
  get params(): MarketSystemFeePaid__Params {
    return new MarketSystemFeePaid__Params(this);
  }
}

export class MarketSystemFeePaid__Params {
  _event: MarketSystemFeePaid;

  constructor(event: MarketSystemFeePaid) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MarketUsdDeposited extends ethereum.Event {
  get params(): MarketUsdDeposited__Params {
    return new MarketUsdDeposited__Params(this);
  }
}

export class MarketUsdDeposited__Params {
  _event: MarketUsdDeposited;

  constructor(event: MarketUsdDeposited) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get target(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get market(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get creditCapacity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get netIssuance(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get depositedCollateralValue(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class MarketUsdWithdrawn extends ethereum.Event {
  get params(): MarketUsdWithdrawn__Params {
    return new MarketUsdWithdrawn__Params(this);
  }
}

export class MarketUsdWithdrawn__Params {
  _event: MarketUsdWithdrawn;

  constructor(event: MarketUsdWithdrawn) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get target(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get market(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get creditCapacity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get netIssuance(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get depositedCollateralValue(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class SetMarketMinLiquidityRatio extends ethereum.Event {
  get params(): SetMarketMinLiquidityRatio__Params {
    return new SetMarketMinLiquidityRatio__Params(this);
  }
}

export class SetMarketMinLiquidityRatio__Params {
  _event: SetMarketMinLiquidityRatio;

  constructor(event: SetMarketMinLiquidityRatio) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minLiquidityRatio(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetMinDelegateTime extends ethereum.Event {
  get params(): SetMinDelegateTime__Params {
    return new SetMinDelegateTime__Params(this);
  }
}

export class SetMinDelegateTime__Params {
  _event: SetMinDelegateTime;

  constructor(event: SetMinDelegateTime) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get minDelegateTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PoolApprovedAdded extends ethereum.Event {
  get params(): PoolApprovedAdded__Params {
    return new PoolApprovedAdded__Params(this);
  }
}

export class PoolApprovedAdded__Params {
  _event: PoolApprovedAdded;

  constructor(event: PoolApprovedAdded) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PoolApprovedRemoved extends ethereum.Event {
  get params(): PoolApprovedRemoved__Params {
    return new PoolApprovedRemoved__Params(this);
  }
}

export class PoolApprovedRemoved__Params {
  _event: PoolApprovedRemoved;

  constructor(event: PoolApprovedRemoved) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PreferredPoolSet extends ethereum.Event {
  get params(): PreferredPoolSet__Params {
    return new PreferredPoolSet__Params(this);
  }
}

export class PreferredPoolSet__Params {
  _event: PreferredPoolSet;

  constructor(event: PreferredPoolSet) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PoolCollateralConfigurationUpdated extends ethereum.Event {
  get params(): PoolCollateralConfigurationUpdated__Params {
    return new PoolCollateralConfigurationUpdated__Params(this);
  }
}

export class PoolCollateralConfigurationUpdated__Params {
  _event: PoolCollateralConfigurationUpdated;

  constructor(event: PoolCollateralConfigurationUpdated) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get config(): PoolCollateralConfigurationUpdatedConfigStruct {
    return changetype<PoolCollateralConfigurationUpdatedConfigStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class PoolCollateralConfigurationUpdatedConfigStruct extends ethereum.Tuple {
  get collateralLimitD18(): BigInt {
    return this[0].toBigInt();
  }

  get issuanceRatioD18(): BigInt {
    return this[1].toBigInt();
  }
}

export class PoolCollateralDisabledByDefaultSet extends ethereum.Event {
  get params(): PoolCollateralDisabledByDefaultSet__Params {
    return new PoolCollateralDisabledByDefaultSet__Params(this);
  }
}

export class PoolCollateralDisabledByDefaultSet__Params {
  _event: PoolCollateralDisabledByDefaultSet;

  constructor(event: PoolCollateralDisabledByDefaultSet) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get disabled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class PoolConfigurationSet extends ethereum.Event {
  get params(): PoolConfigurationSet__Params {
    return new PoolConfigurationSet__Params(this);
  }
}

export class PoolConfigurationSet__Params {
  _event: PoolConfigurationSet;

  constructor(event: PoolConfigurationSet) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get markets(): Array<PoolConfigurationSetMarketsStruct> {
    return this._event.parameters[1].value.toTupleArray<PoolConfigurationSetMarketsStruct>();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PoolConfigurationSetMarketsStruct extends ethereum.Tuple {
  get marketId(): BigInt {
    return this[0].toBigInt();
  }

  get weightD18(): BigInt {
    return this[1].toBigInt();
  }

  get maxDebtShareValueD18(): BigInt {
    return this[2].toBigInt();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PoolNameUpdated extends ethereum.Event {
  get params(): PoolNameUpdated__Params {
    return new PoolNameUpdated__Params(this);
  }
}

export class PoolNameUpdated__Params {
  _event: PoolNameUpdated;

  constructor(event: PoolNameUpdated) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PoolNominationRenounced extends ethereum.Event {
  get params(): PoolNominationRenounced__Params {
    return new PoolNominationRenounced__Params(this);
  }
}

export class PoolNominationRenounced__Params {
  _event: PoolNominationRenounced;

  constructor(event: PoolNominationRenounced) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolNominationRevoked extends ethereum.Event {
  get params(): PoolNominationRevoked__Params {
    return new PoolNominationRevoked__Params(this);
  }
}

export class PoolNominationRevoked__Params {
  _event: PoolNominationRevoked;

  constructor(event: PoolNominationRevoked) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolOwnerNominated extends ethereum.Event {
  get params(): PoolOwnerNominated__Params {
    return new PoolOwnerNominated__Params(this);
  }
}

export class PoolOwnerNominated__Params {
  _event: PoolOwnerNominated;

  constructor(event: PoolOwnerNominated) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nominatedOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PoolOwnershipAccepted extends ethereum.Event {
  get params(): PoolOwnershipAccepted__Params {
    return new PoolOwnershipAccepted__Params(this);
  }
}

export class PoolOwnershipAccepted__Params {
  _event: PoolOwnershipAccepted;

  constructor(event: PoolOwnershipAccepted) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolOwnershipRenounced extends ethereum.Event {
  get params(): PoolOwnershipRenounced__Params {
    return new PoolOwnershipRenounced__Params(this);
  }
}

export class PoolOwnershipRenounced__Params {
  _event: PoolOwnershipRenounced;

  constructor(event: PoolOwnershipRenounced) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetMinLiquidityRatio extends ethereum.Event {
  get params(): SetMinLiquidityRatio__Params {
    return new SetMinLiquidityRatio__Params(this);
  }
}

export class SetMinLiquidityRatio__Params {
  _event: SetMinLiquidityRatio;

  constructor(event: SetMinLiquidityRatio) {
    this._event = event;
  }

  get minLiquidityRatio(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get distributor(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RewardsDistributed extends ethereum.Event {
  get params(): RewardsDistributed__Params {
    return new RewardsDistributed__Params(this);
  }
}

export class RewardsDistributed__Params {
  _event: RewardsDistributed;

  constructor(event: RewardsDistributed) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get distributor(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get start(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RewardsDistributorRegistered extends ethereum.Event {
  get params(): RewardsDistributorRegistered__Params {
    return new RewardsDistributorRegistered__Params(this);
  }
}

export class RewardsDistributorRegistered__Params {
  _event: RewardsDistributorRegistered;

  constructor(event: RewardsDistributorRegistered) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get distributor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RewardsDistributorRemoved extends ethereum.Event {
  get params(): RewardsDistributorRemoved__Params {
    return new RewardsDistributorRemoved__Params(this);
  }
}

export class RewardsDistributorRemoved__Params {
  _event: RewardsDistributorRemoved;

  constructor(event: RewardsDistributorRemoved) {
    this._event = event;
  }

  get poolId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get distributor(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NewSupportedCrossChainNetwork extends ethereum.Event {
  get params(): NewSupportedCrossChainNetwork__Params {
    return new NewSupportedCrossChainNetwork__Params(this);
  }
}

export class NewSupportedCrossChainNetwork__Params {
  _event: NewSupportedCrossChainNetwork;

  constructor(event: NewSupportedCrossChainNetwork) {
    this._event = event;
  }

  get newChainId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DelegationUpdated extends ethereum.Event {
  get params(): DelegationUpdated__Params {
    return new DelegationUpdated__Params(this);
  }
}

export class DelegationUpdated__Params {
  _event: DelegationUpdated;

  constructor(event: DelegationUpdated) {
    this._event = event;
  }

  get accountId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class CoreProxy__getAccountPermissionsResultAccountPermsStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get permissions(): Array<Bytes> {
    return this[1].toBytesArray();
  }
}

export class CoreProxy__getAssociatedSystemResult {
  value0: Address;
  value1: Bytes;

  constructor(value0: Address, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromAddress(this.value0));
    map.set('value1', ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }

  getAddr(): Address {
    return this.value0;
  }

  getKind(): Bytes {
    return this.value1;
  }
}

export class CoreProxy__getAccountCollateralResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set('value2', ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTotalDeposited(): BigInt {
    return this.value0;
  }

  getTotalAssigned(): BigInt {
    return this.value1;
  }

  getTotalLocked(): BigInt {
    return this.value2;
  }
}

export class CoreProxy__getLocksResultLocksStruct extends ethereum.Tuple {
  get amountD18(): BigInt {
    return this[0].toBigInt();
  }

  get lockExpirationTime(): BigInt {
    return this[1].toBigInt();
  }
}

export class CoreProxy__getCollateralConfigurationResultValue0Struct extends ethereum.Tuple {
  get depositingEnabled(): boolean {
    return this[0].toBoolean();
  }

  get issuanceRatioD18(): BigInt {
    return this[1].toBigInt();
  }

  get liquidationRatioD18(): BigInt {
    return this[2].toBigInt();
  }

  get liquidationRewardD18(): BigInt {
    return this[3].toBigInt();
  }

  get oracleNodeId(): Bytes {
    return this[4].toBytes();
  }

  get tokenAddress(): Address {
    return this[5].toAddress();
  }

  get minDelegationD18(): BigInt {
    return this[6].toBigInt();
  }
}

export class CoreProxy__getCollateralConfigurationsResultValue0Struct extends ethereum.Tuple {
  get depositingEnabled(): boolean {
    return this[0].toBoolean();
  }

  get issuanceRatioD18(): BigInt {
    return this[1].toBigInt();
  }

  get liquidationRatioD18(): BigInt {
    return this[2].toBigInt();
  }

  get liquidationRewardD18(): BigInt {
    return this[3].toBigInt();
  }

  get oracleNodeId(): Bytes {
    return this[4].toBytes();
  }

  get tokenAddress(): Address {
    return this[5].toAddress();
  }

  get minDelegationD18(): BigInt {
    return this[6].toBigInt();
  }
}

export class CoreProxy__liquidateResultLiquidationDataStruct extends ethereum.Tuple {
  get debtLiquidated(): BigInt {
    return this[0].toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this[1].toBigInt();
  }

  get amountRewarded(): BigInt {
    return this[2].toBigInt();
  }
}

export class CoreProxy__liquidateVaultResultLiquidationDataStruct extends ethereum.Tuple {
  get debtLiquidated(): BigInt {
    return this[0].toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this[1].toBigInt();
  }

  get amountRewarded(): BigInt {
    return this[2].toBigInt();
  }
}

export class CoreProxy__getMarketFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getDepositFeeAmount(): BigInt {
    return this.value0;
  }

  getWithdrawFeeAmount(): BigInt {
    return this.value1;
  }
}

export class CoreProxy__getMarketPoolDebtDistributionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set('value2', ethereum.Value.fromSignedBigInt(this.value2));
    return map;
  }

  getSharesD18(): BigInt {
    return this.value0;
  }

  getTotalSharesD18(): BigInt {
    return this.value1;
  }

  getValuePerShareD27(): BigInt {
    return this.value2;
  }
}

export class CoreProxy__getMarketPoolsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getInRangePoolIds(): Array<BigInt> {
    return this.value0;
  }

  getOutRangePoolIds(): Array<BigInt> {
    return this.value1;
  }
}

export class CoreProxy__getPoolCollateralConfigurationResultConfigStruct extends ethereum.Tuple {
  get collateralLimitD18(): BigInt {
    return this[0].toBigInt();
  }

  get issuanceRatioD18(): BigInt {
    return this[1].toBigInt();
  }
}

export class CoreProxy__getPoolConfigurationResultValue0Struct extends ethereum.Tuple {
  get marketId(): BigInt {
    return this[0].toBigInt();
  }

  get weightD18(): BigInt {
    return this[1].toBigInt();
  }

  get maxDebtShareValueD18(): BigInt {
    return this[2].toBigInt();
  }
}

export class CoreProxy__updateRewardsResult {
  value0: Array<BigInt>;
  value1: Array<Address>;

  constructor(value0: Array<BigInt>, value1: Array<Address>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set('value1', ethereum.Value.fromAddressArray(this.value1));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Array<Address> {
    return this.value1;
  }
}

export class CoreProxy__getPositionResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set('value2', ethereum.Value.fromSignedBigInt(this.value2));
    map.set('value3', ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getCollateralAmount(): BigInt {
    return this.value0;
  }

  getCollateralValue(): BigInt {
    return this.value1;
  }

  getDebt(): BigInt {
    return this.value2;
  }

  getCollateralizationRatio(): BigInt {
    return this.value3;
  }
}

export class CoreProxy__getVaultCollateralResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }
}

export class CoreProxy extends ethereum.SmartContract {
  static bind(address: Address): CoreProxy {
    return new CoreProxy('CoreProxy', address);
  }

  getImplementation(): Address {
    let result = super.call('getImplementation', 'getImplementation():(address)', []);

    return result[0].toAddress();
  }

  try_getImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall('getImplementation', 'getImplementation():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nominatedOwner(): Address {
    let result = super.call('nominatedOwner', 'nominatedOwner():(address)', []);

    return result[0].toAddress();
  }

  try_nominatedOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall('nominatedOwner', 'nominatedOwner():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call('owner', 'owner():(address)', []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall('owner', 'owner():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDeniers(feature: Bytes): Array<Address> {
    let result = super.call('getDeniers', 'getDeniers(bytes32):(address[])', [
      ethereum.Value.fromFixedBytes(feature),
    ]);

    return result[0].toAddressArray();
  }

  try_getDeniers(feature: Bytes): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall('getDeniers', 'getDeniers(bytes32):(address[])', [
      ethereum.Value.fromFixedBytes(feature),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getFeatureFlagAllowAll(feature: Bytes): boolean {
    let result = super.call('getFeatureFlagAllowAll', 'getFeatureFlagAllowAll(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(feature),
    ]);

    return result[0].toBoolean();
  }

  try_getFeatureFlagAllowAll(feature: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall('getFeatureFlagAllowAll', 'getFeatureFlagAllowAll(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(feature),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getFeatureFlagAllowlist(feature: Bytes): Array<Address> {
    let result = super.call(
      'getFeatureFlagAllowlist',
      'getFeatureFlagAllowlist(bytes32):(address[])',
      [ethereum.Value.fromFixedBytes(feature)]
    );

    return result[0].toAddressArray();
  }

  try_getFeatureFlagAllowlist(feature: Bytes): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      'getFeatureFlagAllowlist',
      'getFeatureFlagAllowlist(bytes32):(address[])',
      [ethereum.Value.fromFixedBytes(feature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getFeatureFlagDenyAll(feature: Bytes): boolean {
    let result = super.call('getFeatureFlagDenyAll', 'getFeatureFlagDenyAll(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(feature),
    ]);

    return result[0].toBoolean();
  }

  try_getFeatureFlagDenyAll(feature: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall('getFeatureFlagDenyAll', 'getFeatureFlagDenyAll(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(feature),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFeatureAllowed(feature: Bytes, account: Address): boolean {
    let result = super.call('isFeatureAllowed', 'isFeatureAllowed(bytes32,address):(bool)', [
      ethereum.Value.fromFixedBytes(feature),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_isFeatureAllowed(feature: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall('isFeatureAllowed', 'isFeatureAllowed(bytes32,address):(bool)', [
      ethereum.Value.fromFixedBytes(feature),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createAccount(): BigInt {
    let result = super.call('createAccount', 'createAccount():(uint128)', []);

    return result[0].toBigInt();
  }

  try_createAccount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('createAccount', 'createAccount():(uint128)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccountLastInteraction(accountId: BigInt): BigInt {
    let result = super.call(
      'getAccountLastInteraction',
      'getAccountLastInteraction(uint128):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(accountId)]
    );

    return result[0].toBigInt();
  }

  try_getAccountLastInteraction(accountId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getAccountLastInteraction',
      'getAccountLastInteraction(uint128):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(accountId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccountOwner(accountId: BigInt): Address {
    let result = super.call('getAccountOwner', 'getAccountOwner(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(accountId),
    ]);

    return result[0].toAddress();
  }

  try_getAccountOwner(accountId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall('getAccountOwner', 'getAccountOwner(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(accountId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAccountPermissions(
    accountId: BigInt
  ): Array<CoreProxy__getAccountPermissionsResultAccountPermsStruct> {
    let result = super.call(
      'getAccountPermissions',
      'getAccountPermissions(uint128):((address,bytes32[])[])',
      [ethereum.Value.fromUnsignedBigInt(accountId)]
    );

    return result[0].toTupleArray<CoreProxy__getAccountPermissionsResultAccountPermsStruct>();
  }

  try_getAccountPermissions(
    accountId: BigInt
  ): ethereum.CallResult<Array<CoreProxy__getAccountPermissionsResultAccountPermsStruct>> {
    let result = super.tryCall(
      'getAccountPermissions',
      'getAccountPermissions(uint128):((address,bytes32[])[])',
      [ethereum.Value.fromUnsignedBigInt(accountId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<CoreProxy__getAccountPermissionsResultAccountPermsStruct>()
    );
  }

  getAccountTokenAddress(): Address {
    let result = super.call('getAccountTokenAddress', 'getAccountTokenAddress():(address)', []);

    return result[0].toAddress();
  }

  try_getAccountTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall('getAccountTokenAddress', 'getAccountTokenAddress():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasPermission(accountId: BigInt, permission: Bytes, user: Address): boolean {
    let result = super.call('hasPermission', 'hasPermission(uint128,bytes32,address):(bool)', [
      ethereum.Value.fromUnsignedBigInt(accountId),
      ethereum.Value.fromFixedBytes(permission),
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBoolean();
  }

  try_hasPermission(
    accountId: BigInt,
    permission: Bytes,
    user: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall('hasPermission', 'hasPermission(uint128,bytes32,address):(bool)', [
      ethereum.Value.fromUnsignedBigInt(accountId),
      ethereum.Value.fromFixedBytes(permission),
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAuthorized(accountId: BigInt, permission: Bytes, user: Address): boolean {
    let result = super.call('isAuthorized', 'isAuthorized(uint128,bytes32,address):(bool)', [
      ethereum.Value.fromUnsignedBigInt(accountId),
      ethereum.Value.fromFixedBytes(permission),
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBoolean();
  }

  try_isAuthorized(
    accountId: BigInt,
    permission: Bytes,
    user: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall('isAuthorized', 'isAuthorized(uint128,bytes32,address):(bool)', [
      ethereum.Value.fromUnsignedBigInt(accountId),
      ethereum.Value.fromFixedBytes(permission),
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  associateDebt(
    marketId: BigInt,
    poolId: BigInt,
    collateralType: Address,
    accountId: BigInt,
    amount: BigInt
  ): BigInt {
    let result = super.call(
      'associateDebt',
      'associateDebt(uint128,uint128,address,uint128,uint256):(int256)',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );

    return result[0].toBigInt();
  }

  try_associateDebt(
    marketId: BigInt,
    poolId: BigInt,
    collateralType: Address,
    accountId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'associateDebt',
      'associateDebt(uint128,uint128,address,uint128,uint256):(int256)',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAssociatedSystem(id: Bytes): CoreProxy__getAssociatedSystemResult {
    let result = super.call(
      'getAssociatedSystem',
      'getAssociatedSystem(bytes32):(address,bytes32)',
      [ethereum.Value.fromFixedBytes(id)]
    );

    return new CoreProxy__getAssociatedSystemResult(result[0].toAddress(), result[1].toBytes());
  }

  try_getAssociatedSystem(id: Bytes): ethereum.CallResult<CoreProxy__getAssociatedSystemResult> {
    let result = super.tryCall(
      'getAssociatedSystem',
      'getAssociatedSystem(bytes32):(address,bytes32)',
      [ethereum.Value.fromFixedBytes(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CoreProxy__getAssociatedSystemResult(value[0].toAddress(), value[1].toBytes())
    );
  }

  cleanExpiredLocks(
    accountId: BigInt,
    collateralType: Address,
    offset: BigInt,
    count: BigInt
  ): BigInt {
    let result = super.call(
      'cleanExpiredLocks',
      'cleanExpiredLocks(uint128,address,uint256,uint256):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(count),
      ]
    );

    return result[0].toBigInt();
  }

  try_cleanExpiredLocks(
    accountId: BigInt,
    collateralType: Address,
    offset: BigInt,
    count: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'cleanExpiredLocks',
      'cleanExpiredLocks(uint128,address,uint256,uint256):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(count),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccountAvailableCollateral(accountId: BigInt, collateralType: Address): BigInt {
    let result = super.call(
      'getAccountAvailableCollateral',
      'getAccountAvailableCollateral(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(accountId), ethereum.Value.fromAddress(collateralType)]
    );

    return result[0].toBigInt();
  }

  try_getAccountAvailableCollateral(
    accountId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getAccountAvailableCollateral',
      'getAccountAvailableCollateral(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(accountId), ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAccountCollateral(
    accountId: BigInt,
    collateralType: Address
  ): CoreProxy__getAccountCollateralResult {
    let result = super.call(
      'getAccountCollateral',
      'getAccountCollateral(uint128,address):(uint256,uint256,uint256)',
      [ethereum.Value.fromUnsignedBigInt(accountId), ethereum.Value.fromAddress(collateralType)]
    );

    return new CoreProxy__getAccountCollateralResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getAccountCollateral(
    accountId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<CoreProxy__getAccountCollateralResult> {
    let result = super.tryCall(
      'getAccountCollateral',
      'getAccountCollateral(uint128,address):(uint256,uint256,uint256)',
      [ethereum.Value.fromUnsignedBigInt(accountId), ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CoreProxy__getAccountCollateralResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getLocks(
    accountId: BigInt,
    collateralType: Address,
    offset: BigInt,
    count: BigInt
  ): Array<CoreProxy__getLocksResultLocksStruct> {
    let result = super.call(
      'getLocks',
      'getLocks(uint128,address,uint256,uint256):((uint128,uint64)[])',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(count),
      ]
    );

    return result[0].toTupleArray<CoreProxy__getLocksResultLocksStruct>();
  }

  try_getLocks(
    accountId: BigInt,
    collateralType: Address,
    offset: BigInt,
    count: BigInt
  ): ethereum.CallResult<Array<CoreProxy__getLocksResultLocksStruct>> {
    let result = super.tryCall(
      'getLocks',
      'getLocks(uint128,address,uint256,uint256):((uint128,uint64)[])',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(offset),
        ethereum.Value.fromUnsignedBigInt(count),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<CoreProxy__getLocksResultLocksStruct>()
    );
  }

  getCollateralConfiguration(
    collateralType: Address
  ): CoreProxy__getCollateralConfigurationResultValue0Struct {
    let result = super.call(
      'getCollateralConfiguration',
      'getCollateralConfiguration(address):((bool,uint256,uint256,uint256,bytes32,address,uint256))',
      [ethereum.Value.fromAddress(collateralType)]
    );

    return changetype<CoreProxy__getCollateralConfigurationResultValue0Struct>(result[0].toTuple());
  }

  try_getCollateralConfiguration(
    collateralType: Address
  ): ethereum.CallResult<CoreProxy__getCollateralConfigurationResultValue0Struct> {
    let result = super.tryCall(
      'getCollateralConfiguration',
      'getCollateralConfiguration(address):((bool,uint256,uint256,uint256,bytes32,address,uint256))',
      [ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CoreProxy__getCollateralConfigurationResultValue0Struct>(value[0].toTuple())
    );
  }

  getCollateralConfigurations(
    hideDisabled: boolean
  ): Array<CoreProxy__getCollateralConfigurationsResultValue0Struct> {
    let result = super.call(
      'getCollateralConfigurations',
      'getCollateralConfigurations(bool):((bool,uint256,uint256,uint256,bytes32,address,uint256)[])',
      [ethereum.Value.fromBoolean(hideDisabled)]
    );

    return result[0].toTupleArray<CoreProxy__getCollateralConfigurationsResultValue0Struct>();
  }

  try_getCollateralConfigurations(
    hideDisabled: boolean
  ): ethereum.CallResult<Array<CoreProxy__getCollateralConfigurationsResultValue0Struct>> {
    let result = super.tryCall(
      'getCollateralConfigurations',
      'getCollateralConfigurations(bool):((bool,uint256,uint256,uint256,bytes32,address,uint256)[])',
      [ethereum.Value.fromBoolean(hideDisabled)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<CoreProxy__getCollateralConfigurationsResultValue0Struct>()
    );
  }

  getCollateralPrice(collateralType: Address): BigInt {
    let result = super.call('getCollateralPrice', 'getCollateralPrice(address):(uint256)', [
      ethereum.Value.fromAddress(collateralType),
    ]);

    return result[0].toBigInt();
  }

  try_getCollateralPrice(collateralType: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getCollateralPrice', 'getCollateralPrice(address):(uint256)', [
      ethereum.Value.fromAddress(collateralType),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isPositionLiquidatable(accountId: BigInt, poolId: BigInt, collateralType: Address): boolean {
    let result = super.call(
      'isPositionLiquidatable',
      'isPositionLiquidatable(uint128,uint128,address):(bool)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );

    return result[0].toBoolean();
  }

  try_isPositionLiquidatable(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'isPositionLiquidatable',
      'isPositionLiquidatable(uint128,uint128,address):(bool)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isVaultLiquidatable(poolId: BigInt, collateralType: Address): boolean {
    let result = super.call('isVaultLiquidatable', 'isVaultLiquidatable(uint128,address):(bool)', [
      ethereum.Value.fromUnsignedBigInt(poolId),
      ethereum.Value.fromAddress(collateralType),
    ]);

    return result[0].toBoolean();
  }

  try_isVaultLiquidatable(poolId: BigInt, collateralType: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'isVaultLiquidatable',
      'isVaultLiquidatable(uint128,address):(bool)',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidate(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address,
    liquidateAsAccountId: BigInt
  ): CoreProxy__liquidateResultLiquidationDataStruct {
    let result = super.call(
      'liquidate',
      'liquidate(uint128,uint128,address,uint128):((uint256,uint256,uint256))',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(liquidateAsAccountId),
      ]
    );

    return changetype<CoreProxy__liquidateResultLiquidationDataStruct>(result[0].toTuple());
  }

  try_liquidate(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address,
    liquidateAsAccountId: BigInt
  ): ethereum.CallResult<CoreProxy__liquidateResultLiquidationDataStruct> {
    let result = super.tryCall(
      'liquidate',
      'liquidate(uint128,uint128,address,uint128):((uint256,uint256,uint256))',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(liquidateAsAccountId),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CoreProxy__liquidateResultLiquidationDataStruct>(value[0].toTuple())
    );
  }

  liquidateVault(
    poolId: BigInt,
    collateralType: Address,
    liquidateAsAccountId: BigInt,
    maxUsd: BigInt
  ): CoreProxy__liquidateVaultResultLiquidationDataStruct {
    let result = super.call(
      'liquidateVault',
      'liquidateVault(uint128,address,uint128,uint256):((uint256,uint256,uint256))',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(liquidateAsAccountId),
        ethereum.Value.fromUnsignedBigInt(maxUsd),
      ]
    );

    return changetype<CoreProxy__liquidateVaultResultLiquidationDataStruct>(result[0].toTuple());
  }

  try_liquidateVault(
    poolId: BigInt,
    collateralType: Address,
    liquidateAsAccountId: BigInt,
    maxUsd: BigInt
  ): ethereum.CallResult<CoreProxy__liquidateVaultResultLiquidationDataStruct> {
    let result = super.tryCall(
      'liquidateVault',
      'liquidateVault(uint128,address,uint128,uint256):((uint256,uint256,uint256))',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(liquidateAsAccountId),
        ethereum.Value.fromUnsignedBigInt(maxUsd),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CoreProxy__liquidateVaultResultLiquidationDataStruct>(value[0].toTuple())
    );
  }

  getMarketCollateralAmount(marketId: BigInt, collateralType: Address): BigInt {
    let result = super.call(
      'getMarketCollateralAmount',
      'getMarketCollateralAmount(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromAddress(collateralType)]
    );

    return result[0].toBigInt();
  }

  try_getMarketCollateralAmount(
    marketId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getMarketCollateralAmount',
      'getMarketCollateralAmount(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketCollateralValue(marketId: BigInt): BigInt {
    let result = super.call(
      'getMarketCollateralValue',
      'getMarketCollateralValue(uint128):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getMarketCollateralValue(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getMarketCollateralValue',
      'getMarketCollateralValue(uint128):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaximumMarketCollateral(marketId: BigInt, collateralType: Address): BigInt {
    let result = super.call(
      'getMaximumMarketCollateral',
      'getMaximumMarketCollateral(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromAddress(collateralType)]
    );

    return result[0].toBigInt();
  }

  try_getMaximumMarketCollateral(
    marketId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getMaximumMarketCollateral',
      'getMaximumMarketCollateral(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositMarketUsd(marketId: BigInt, target: Address, amount: BigInt): BigInt {
    let result = super.call(
      'depositMarketUsd',
      'depositMarketUsd(uint128,address,uint256):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );

    return result[0].toBigInt();
  }

  try_depositMarketUsd(
    marketId: BigInt,
    target: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'depositMarketUsd',
      'depositMarketUsd(uint128,address,uint256):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributeDebtToPools(marketId: BigInt, maxIter: BigInt): boolean {
    let result = super.call(
      'distributeDebtToPools',
      'distributeDebtToPools(uint128,uint256):(bool)',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(maxIter)]
    );

    return result[0].toBoolean();
  }

  try_distributeDebtToPools(marketId: BigInt, maxIter: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'distributeDebtToPools',
      'distributeDebtToPools(uint128,uint256):(bool)',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(maxIter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getMarketAddress(marketId: BigInt): Address {
    let result = super.call('getMarketAddress', 'getMarketAddress(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toAddress();
  }

  try_getMarketAddress(marketId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall('getMarketAddress', 'getMarketAddress(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMarketCollateral(marketId: BigInt): BigInt {
    let result = super.call('getMarketCollateral', 'getMarketCollateral(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketCollateral(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getMarketCollateral', 'getMarketCollateral(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketDebtPerShare(marketId: BigInt): BigInt {
    let result = super.call('getMarketDebtPerShare', 'getMarketDebtPerShare(uint128):(int256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketDebtPerShare(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getMarketDebtPerShare', 'getMarketDebtPerShare(uint128):(int256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketFees(param0: BigInt, amount: BigInt): CoreProxy__getMarketFeesResult {
    let result = super.call('getMarketFees', 'getMarketFees(uint128,uint256):(uint256,uint256)', [
      ethereum.Value.fromUnsignedBigInt(param0),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return new CoreProxy__getMarketFeesResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_getMarketFees(
    param0: BigInt,
    amount: BigInt
  ): ethereum.CallResult<CoreProxy__getMarketFeesResult> {
    let result = super.tryCall(
      'getMarketFees',
      'getMarketFees(uint128,uint256):(uint256,uint256)',
      [ethereum.Value.fromUnsignedBigInt(param0), ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CoreProxy__getMarketFeesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getMarketMinDelegateTime(marketId: BigInt): BigInt {
    let result = super.call(
      'getMarketMinDelegateTime',
      'getMarketMinDelegateTime(uint128):(uint32)',
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getMarketMinDelegateTime(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getMarketMinDelegateTime',
      'getMarketMinDelegateTime(uint128):(uint32)',
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketNetIssuance(marketId: BigInt): BigInt {
    let result = super.call('getMarketNetIssuance', 'getMarketNetIssuance(uint128):(int128)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketNetIssuance(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getMarketNetIssuance', 'getMarketNetIssuance(uint128):(int128)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketPoolDebtDistribution(
    marketId: BigInt,
    poolId: BigInt
  ): CoreProxy__getMarketPoolDebtDistributionResult {
    let result = super.call(
      'getMarketPoolDebtDistribution',
      'getMarketPoolDebtDistribution(uint128,uint128):(uint256,uint128,int128)',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(poolId)]
    );

    return new CoreProxy__getMarketPoolDebtDistributionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getMarketPoolDebtDistribution(
    marketId: BigInt,
    poolId: BigInt
  ): ethereum.CallResult<CoreProxy__getMarketPoolDebtDistributionResult> {
    let result = super.tryCall(
      'getMarketPoolDebtDistribution',
      'getMarketPoolDebtDistribution(uint128,uint128):(uint256,uint128,int128)',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CoreProxy__getMarketPoolDebtDistributionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getMarketPools(marketId: BigInt): CoreProxy__getMarketPoolsResult {
    let result = super.call('getMarketPools', 'getMarketPools(uint128):(uint128[],uint128[])', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return new CoreProxy__getMarketPoolsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_getMarketPools(marketId: BigInt): ethereum.CallResult<CoreProxy__getMarketPoolsResult> {
    let result = super.tryCall('getMarketPools', 'getMarketPools(uint128):(uint128[],uint128[])', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CoreProxy__getMarketPoolsResult(value[0].toBigIntArray(), value[1].toBigIntArray())
    );
  }

  getMarketReportedDebt(marketId: BigInt): BigInt {
    let result = super.call('getMarketReportedDebt', 'getMarketReportedDebt(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketReportedDebt(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getMarketReportedDebt',
      'getMarketReportedDebt(uint128):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketTotalDebt(marketId: BigInt): BigInt {
    let result = super.call('getMarketTotalDebt', 'getMarketTotalDebt(uint128):(int256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketTotalDebt(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getMarketTotalDebt', 'getMarketTotalDebt(uint128):(int256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinLiquidityRatio(marketId: BigInt): BigInt {
    let result = super.call('getMinLiquidityRatio', 'getMinLiquidityRatio(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_getMinLiquidityRatio(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getMinLiquidityRatio', 'getMinLiquidityRatio(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOracleManager(): Address {
    let result = super.call('getOracleManager', 'getOracleManager():(address)', []);

    return result[0].toAddress();
  }

  try_getOracleManager(): ethereum.CallResult<Address> {
    let result = super.tryCall('getOracleManager', 'getOracleManager():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUsdToken(): Address {
    let result = super.call('getUsdToken', 'getUsdToken():(address)', []);

    return result[0].toAddress();
  }

  try_getUsdToken(): ethereum.CallResult<Address> {
    let result = super.tryCall('getUsdToken', 'getUsdToken():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWithdrawableMarketUsd(marketId: BigInt): BigInt {
    let result = super.call(
      'getWithdrawableMarketUsd',
      'getWithdrawableMarketUsd(uint128):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );

    return result[0].toBigInt();
  }

  try_getWithdrawableMarketUsd(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getWithdrawableMarketUsd',
      'getWithdrawableMarketUsd(uint128):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(marketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMarketCapacityLocked(marketId: BigInt): boolean {
    let result = super.call('isMarketCapacityLocked', 'isMarketCapacityLocked(uint128):(bool)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBoolean();
  }

  try_isMarketCapacityLocked(marketId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall('isMarketCapacityLocked', 'isMarketCapacityLocked(uint128):(bool)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  registerMarket(market: Address): BigInt {
    let result = super.call('registerMarket', 'registerMarket(address):(uint128)', [
      ethereum.Value.fromAddress(market),
    ]);

    return result[0].toBigInt();
  }

  try_registerMarket(market: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('registerMarket', 'registerMarket(address):(uint128)', [
      ethereum.Value.fromAddress(market),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawMarketUsd(marketId: BigInt, target: Address, amount: BigInt): BigInt {
    let result = super.call(
      'withdrawMarketUsd',
      'withdrawMarketUsd(uint128,address,uint256):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawMarketUsd(
    marketId: BigInt,
    target: Address,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'withdrawMarketUsd',
      'withdrawMarketUsd(uint128,address,uint256):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromAddress(target),
        ethereum.Value.fromUnsignedBigInt(amount),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApprovedPools(): Array<BigInt> {
    let result = super.call('getApprovedPools', 'getApprovedPools():(uint256[])', []);

    return result[0].toBigIntArray();
  }

  try_getApprovedPools(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall('getApprovedPools', 'getApprovedPools():(uint256[])', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPreferredPool(): BigInt {
    let result = super.call('getPreferredPool', 'getPreferredPool():(uint128)', []);

    return result[0].toBigInt();
  }

  try_getPreferredPool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getPreferredPool', 'getPreferredPool():(uint128)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMinLiquidityRatio1(): BigInt {
    let result = super.call('getMinLiquidityRatio', 'getMinLiquidityRatio():(uint256)', []);

    return result[0].toBigInt();
  }

  try_getMinLiquidityRatio1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getMinLiquidityRatio', 'getMinLiquidityRatio():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNominatedPoolOwner(poolId: BigInt): Address {
    let result = super.call('getNominatedPoolOwner', 'getNominatedPoolOwner(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(poolId),
    ]);

    return result[0].toAddress();
  }

  try_getNominatedPoolOwner(poolId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      'getNominatedPoolOwner',
      'getNominatedPoolOwner(uint128):(address)',
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPoolCollateralConfiguration(
    poolId: BigInt,
    collateralType: Address
  ): CoreProxy__getPoolCollateralConfigurationResultConfigStruct {
    let result = super.call(
      'getPoolCollateralConfiguration',
      'getPoolCollateralConfiguration(uint128,address):((uint256,uint256))',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateralType)]
    );

    return changetype<CoreProxy__getPoolCollateralConfigurationResultConfigStruct>(
      result[0].toTuple()
    );
  }

  try_getPoolCollateralConfiguration(
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<CoreProxy__getPoolCollateralConfigurationResultConfigStruct> {
    let result = super.tryCall(
      'getPoolCollateralConfiguration',
      'getPoolCollateralConfiguration(uint128,address):((uint256,uint256))',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CoreProxy__getPoolCollateralConfigurationResultConfigStruct>(value[0].toTuple())
    );
  }

  getPoolCollateralIssuanceRatio(poolId: BigInt, collateral: Address): BigInt {
    let result = super.call(
      'getPoolCollateralIssuanceRatio',
      'getPoolCollateralIssuanceRatio(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateral)]
    );

    return result[0].toBigInt();
  }

  try_getPoolCollateralIssuanceRatio(
    poolId: BigInt,
    collateral: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getPoolCollateralIssuanceRatio',
      'getPoolCollateralIssuanceRatio(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateral)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolConfiguration(poolId: BigInt): Array<CoreProxy__getPoolConfigurationResultValue0Struct> {
    let result = super.call(
      'getPoolConfiguration',
      'getPoolConfiguration(uint128):((uint128,uint128,int128)[])',
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );

    return result[0].toTupleArray<CoreProxy__getPoolConfigurationResultValue0Struct>();
  }

  try_getPoolConfiguration(
    poolId: BigInt
  ): ethereum.CallResult<Array<CoreProxy__getPoolConfigurationResultValue0Struct>> {
    let result = super.tryCall(
      'getPoolConfiguration',
      'getPoolConfiguration(uint128):((uint128,uint128,int128)[])',
      [ethereum.Value.fromUnsignedBigInt(poolId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<CoreProxy__getPoolConfigurationResultValue0Struct>()
    );
  }

  getPoolName(poolId: BigInt): string {
    let result = super.call('getPoolName', 'getPoolName(uint128):(string)', [
      ethereum.Value.fromUnsignedBigInt(poolId),
    ]);

    return result[0].toString();
  }

  try_getPoolName(poolId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall('getPoolName', 'getPoolName(uint128):(string)', [
      ethereum.Value.fromUnsignedBigInt(poolId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getPoolOwner(poolId: BigInt): Address {
    let result = super.call('getPoolOwner', 'getPoolOwner(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(poolId),
    ]);

    return result[0].toAddress();
  }

  try_getPoolOwner(poolId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall('getPoolOwner', 'getPoolOwner(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(poolId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claimRewards(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address,
    distributor: Address
  ): BigInt {
    let result = super.call(
      'claimRewards',
      'claimRewards(uint128,uint128,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromAddress(distributor),
      ]
    );

    return result[0].toBigInt();
  }

  try_claimRewards(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address,
    distributor: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'claimRewards',
      'claimRewards(uint128,uint128,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromAddress(distributor),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAvailableRewards(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address,
    distributor: Address
  ): BigInt {
    let result = super.call(
      'getAvailableRewards',
      'getAvailableRewards(uint128,uint128,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromAddress(distributor),
      ]
    );

    return result[0].toBigInt();
  }

  try_getAvailableRewards(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address,
    distributor: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getAvailableRewards',
      'getAvailableRewards(uint128,uint128,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromAddress(distributor),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRewardRate(poolId: BigInt, collateralType: Address, distributor: Address): BigInt {
    let result = super.call('getRewardRate', 'getRewardRate(uint128,address,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(poolId),
      ethereum.Value.fromAddress(collateralType),
      ethereum.Value.fromAddress(distributor),
    ]);

    return result[0].toBigInt();
  }

  try_getRewardRate(
    poolId: BigInt,
    collateralType: Address,
    distributor: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getRewardRate',
      'getRewardRate(uint128,address,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromAddress(distributor),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateRewards(
    poolId: BigInt,
    collateralType: Address,
    accountId: BigInt
  ): CoreProxy__updateRewardsResult {
    let result = super.call(
      'updateRewards',
      'updateRewards(uint128,address,uint128):(uint256[],address[])',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(accountId),
      ]
    );

    return new CoreProxy__updateRewardsResult(
      result[0].toBigIntArray(),
      result[1].toAddressArray()
    );
  }

  try_updateRewards(
    poolId: BigInt,
    collateralType: Address,
    accountId: BigInt
  ): ethereum.CallResult<CoreProxy__updateRewardsResult> {
    let result = super.tryCall(
      'updateRewards',
      'updateRewards(uint128,address,uint128):(uint256[],address[])',
      [
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
        ethereum.Value.fromUnsignedBigInt(accountId),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CoreProxy__updateRewardsResult(value[0].toBigIntArray(), value[1].toAddressArray())
    );
  }

  getConfig(k: Bytes): Bytes {
    let result = super.call('getConfig', 'getConfig(bytes32):(bytes32)', [
      ethereum.Value.fromFixedBytes(k),
    ]);

    return result[0].toBytes();
  }

  try_getConfig(k: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall('getConfig', 'getConfig(bytes32):(bytes32)', [
      ethereum.Value.fromFixedBytes(k),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getConfigAddress(k: Bytes): Address {
    let result = super.call('getConfigAddress', 'getConfigAddress(bytes32):(address)', [
      ethereum.Value.fromFixedBytes(k),
    ]);

    return result[0].toAddress();
  }

  try_getConfigAddress(k: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall('getConfigAddress', 'getConfigAddress(bytes32):(address)', [
      ethereum.Value.fromFixedBytes(k),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getConfigUint(k: Bytes): BigInt {
    let result = super.call('getConfigUint', 'getConfigUint(bytes32):(uint256)', [
      ethereum.Value.fromFixedBytes(k),
    ]);

    return result[0].toBigInt();
  }

  try_getConfigUint(k: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getConfigUint', 'getConfigUint(bytes32):(uint256)', [
      ethereum.Value.fromFixedBytes(k),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTrustedForwarder(): Address {
    let result = super.call('getTrustedForwarder', 'getTrustedForwarder():(address)', []);

    return result[0].toAddress();
  }

  try_getTrustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall('getTrustedForwarder', 'getTrustedForwarder():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call('isTrustedForwarder', 'isTrustedForwarder(address):(bool)', [
      ethereum.Value.fromAddress(forwarder),
    ]);

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall('isTrustedForwarder', 'isTrustedForwarder(address):(bool)', [
      ethereum.Value.fromAddress(forwarder),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setSupportedCrossChainNetworks(
    supportedNetworks: Array<BigInt>,
    ccipSelectors: Array<BigInt>
  ): BigInt {
    let result = super.call(
      'setSupportedCrossChainNetworks',
      'setSupportedCrossChainNetworks(uint64[],uint64[]):(uint256)',
      [
        ethereum.Value.fromUnsignedBigIntArray(supportedNetworks),
        ethereum.Value.fromUnsignedBigIntArray(ccipSelectors),
      ]
    );

    return result[0].toBigInt();
  }

  try_setSupportedCrossChainNetworks(
    supportedNetworks: Array<BigInt>,
    ccipSelectors: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'setSupportedCrossChainNetworks',
      'setSupportedCrossChainNetworks(uint64[],uint64[]):(uint256)',
      [
        ethereum.Value.fromUnsignedBigIntArray(supportedNetworks),
        ethereum.Value.fromUnsignedBigIntArray(ccipSelectors),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call('supportsInterface', 'supportsInterface(bytes4):(bool)', [
      ethereum.Value.fromFixedBytes(interfaceId),
    ]);

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall('supportsInterface', 'supportsInterface(bytes4):(bool)', [
      ethereum.Value.fromFixedBytes(interfaceId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getPosition(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): CoreProxy__getPositionResult {
    let result = super.call(
      'getPosition',
      'getPosition(uint128,uint128,address):(uint256,uint256,int256,uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );

    return new CoreProxy__getPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getPosition(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<CoreProxy__getPositionResult> {
    let result = super.tryCall(
      'getPosition',
      'getPosition(uint128,uint128,address):(uint256,uint256,int256,uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CoreProxy__getPositionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getPositionCollateral(accountId: BigInt, poolId: BigInt, collateralType: Address): BigInt {
    let result = super.call(
      'getPositionCollateral',
      'getPositionCollateral(uint128,uint128,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );

    return result[0].toBigInt();
  }

  try_getPositionCollateral(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getPositionCollateral',
      'getPositionCollateral(uint128,uint128,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositionCollateralRatio(accountId: BigInt, poolId: BigInt, collateralType: Address): BigInt {
    let result = super.call(
      'getPositionCollateralRatio',
      'getPositionCollateralRatio(uint128,uint128,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );

    return result[0].toBigInt();
  }

  try_getPositionCollateralRatio(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getPositionCollateralRatio',
      'getPositionCollateralRatio(uint128,uint128,address):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositionDebt(accountId: BigInt, poolId: BigInt, collateralType: Address): BigInt {
    let result = super.call(
      'getPositionDebt',
      'getPositionDebt(uint128,uint128,address):(int256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );

    return result[0].toBigInt();
  }

  try_getPositionDebt(
    accountId: BigInt,
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getPositionDebt',
      'getPositionDebt(uint128,uint128,address):(int256)',
      [
        ethereum.Value.fromUnsignedBigInt(accountId),
        ethereum.Value.fromUnsignedBigInt(poolId),
        ethereum.Value.fromAddress(collateralType),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultCollateral(poolId: BigInt, collateralType: Address): CoreProxy__getVaultCollateralResult {
    let result = super.call(
      'getVaultCollateral',
      'getVaultCollateral(uint128,address):(uint256,uint256)',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateralType)]
    );

    return new CoreProxy__getVaultCollateralResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_getVaultCollateral(
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<CoreProxy__getVaultCollateralResult> {
    let result = super.tryCall(
      'getVaultCollateral',
      'getVaultCollateral(uint128,address):(uint256,uint256)',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CoreProxy__getVaultCollateralResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getVaultCollateralRatio(poolId: BigInt, collateralType: Address): BigInt {
    let result = super.call(
      'getVaultCollateralRatio',
      'getVaultCollateralRatio(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateralType)]
    );

    return result[0].toBigInt();
  }

  try_getVaultCollateralRatio(
    poolId: BigInt,
    collateralType: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getVaultCollateralRatio',
      'getVaultCollateralRatio(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(poolId), ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultDebt(poolId: BigInt, collateralType: Address): BigInt {
    let result = super.call('getVaultDebt', 'getVaultDebt(uint128,address):(int256)', [
      ethereum.Value.fromUnsignedBigInt(poolId),
      ethereum.Value.fromAddress(collateralType),
    ]);

    return result[0].toBigInt();
  }

  try_getVaultDebt(poolId: BigInt, collateralType: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getVaultDebt', 'getVaultDebt(uint128,address):(int256)', [
      ethereum.Value.fromUnsignedBigInt(poolId),
      ethereum.Value.fromAddress(collateralType),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class NominateNewOwnerCall extends ethereum.Call {
  get inputs(): NominateNewOwnerCall__Inputs {
    return new NominateNewOwnerCall__Inputs(this);
  }

  get outputs(): NominateNewOwnerCall__Outputs {
    return new NominateNewOwnerCall__Outputs(this);
  }
}

export class NominateNewOwnerCall__Inputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }

  get newNominatedOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class NominateNewOwnerCall__Outputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }
}

export class RenounceNominationCall extends ethereum.Call {
  get inputs(): RenounceNominationCall__Inputs {
    return new RenounceNominationCall__Inputs(this);
  }

  get outputs(): RenounceNominationCall__Outputs {
    return new RenounceNominationCall__Outputs(this);
  }
}

export class RenounceNominationCall__Inputs {
  _call: RenounceNominationCall;

  constructor(call: RenounceNominationCall) {
    this._call = call;
  }
}

export class RenounceNominationCall__Outputs {
  _call: RenounceNominationCall;

  constructor(call: RenounceNominationCall) {
    this._call = call;
  }
}

export class SimulateUpgradeToCall extends ethereum.Call {
  get inputs(): SimulateUpgradeToCall__Inputs {
    return new SimulateUpgradeToCall__Inputs(this);
  }

  get outputs(): SimulateUpgradeToCall__Outputs {
    return new SimulateUpgradeToCall__Outputs(this);
  }
}

export class SimulateUpgradeToCall__Inputs {
  _call: SimulateUpgradeToCall;

  constructor(call: SimulateUpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SimulateUpgradeToCall__Outputs {
  _call: SimulateUpgradeToCall;

  constructor(call: SimulateUpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class AddToFeatureFlagAllowlistCall extends ethereum.Call {
  get inputs(): AddToFeatureFlagAllowlistCall__Inputs {
    return new AddToFeatureFlagAllowlistCall__Inputs(this);
  }

  get outputs(): AddToFeatureFlagAllowlistCall__Outputs {
    return new AddToFeatureFlagAllowlistCall__Outputs(this);
  }
}

export class AddToFeatureFlagAllowlistCall__Inputs {
  _call: AddToFeatureFlagAllowlistCall;

  constructor(call: AddToFeatureFlagAllowlistCall) {
    this._call = call;
  }

  get feature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddToFeatureFlagAllowlistCall__Outputs {
  _call: AddToFeatureFlagAllowlistCall;

  constructor(call: AddToFeatureFlagAllowlistCall) {
    this._call = call;
  }
}

export class RemoveFromFeatureFlagAllowlistCall extends ethereum.Call {
  get inputs(): RemoveFromFeatureFlagAllowlistCall__Inputs {
    return new RemoveFromFeatureFlagAllowlistCall__Inputs(this);
  }

  get outputs(): RemoveFromFeatureFlagAllowlistCall__Outputs {
    return new RemoveFromFeatureFlagAllowlistCall__Outputs(this);
  }
}

export class RemoveFromFeatureFlagAllowlistCall__Inputs {
  _call: RemoveFromFeatureFlagAllowlistCall;

  constructor(call: RemoveFromFeatureFlagAllowlistCall) {
    this._call = call;
  }

  get feature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveFromFeatureFlagAllowlistCall__Outputs {
  _call: RemoveFromFeatureFlagAllowlistCall;

  constructor(call: RemoveFromFeatureFlagAllowlistCall) {
    this._call = call;
  }
}

export class SetDeniersCall extends ethereum.Call {
  get inputs(): SetDeniersCall__Inputs {
    return new SetDeniersCall__Inputs(this);
  }

  get outputs(): SetDeniersCall__Outputs {
    return new SetDeniersCall__Outputs(this);
  }
}

export class SetDeniersCall__Inputs {
  _call: SetDeniersCall;

  constructor(call: SetDeniersCall) {
    this._call = call;
  }

  get feature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get deniers(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetDeniersCall__Outputs {
  _call: SetDeniersCall;

  constructor(call: SetDeniersCall) {
    this._call = call;
  }
}

export class SetFeatureFlagAllowAllCall extends ethereum.Call {
  get inputs(): SetFeatureFlagAllowAllCall__Inputs {
    return new SetFeatureFlagAllowAllCall__Inputs(this);
  }

  get outputs(): SetFeatureFlagAllowAllCall__Outputs {
    return new SetFeatureFlagAllowAllCall__Outputs(this);
  }
}

export class SetFeatureFlagAllowAllCall__Inputs {
  _call: SetFeatureFlagAllowAllCall;

  constructor(call: SetFeatureFlagAllowAllCall) {
    this._call = call;
  }

  get feature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get allowAll(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetFeatureFlagAllowAllCall__Outputs {
  _call: SetFeatureFlagAllowAllCall;

  constructor(call: SetFeatureFlagAllowAllCall) {
    this._call = call;
  }
}

export class SetFeatureFlagDenyAllCall extends ethereum.Call {
  get inputs(): SetFeatureFlagDenyAllCall__Inputs {
    return new SetFeatureFlagDenyAllCall__Inputs(this);
  }

  get outputs(): SetFeatureFlagDenyAllCall__Outputs {
    return new SetFeatureFlagDenyAllCall__Outputs(this);
  }
}

export class SetFeatureFlagDenyAllCall__Inputs {
  _call: SetFeatureFlagDenyAllCall;

  constructor(call: SetFeatureFlagDenyAllCall) {
    this._call = call;
  }

  get feature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get denyAll(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetFeatureFlagDenyAllCall__Outputs {
  _call: SetFeatureFlagDenyAllCall;

  constructor(call: SetFeatureFlagDenyAllCall) {
    this._call = call;
  }
}

export class CreateAccountCall extends ethereum.Call {
  get inputs(): CreateAccountCall__Inputs {
    return new CreateAccountCall__Inputs(this);
  }

  get outputs(): CreateAccountCall__Outputs {
    return new CreateAccountCall__Outputs(this);
  }
}

export class CreateAccountCall__Inputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }
}

export class CreateAccountCall__Outputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateAccount1Call extends ethereum.Call {
  get inputs(): CreateAccount1Call__Inputs {
    return new CreateAccount1Call__Inputs(this);
  }

  get outputs(): CreateAccount1Call__Outputs {
    return new CreateAccount1Call__Outputs(this);
  }
}

export class CreateAccount1Call__Inputs {
  _call: CreateAccount1Call;

  constructor(call: CreateAccount1Call) {
    this._call = call;
  }

  get requestedAccountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateAccount1Call__Outputs {
  _call: CreateAccount1Call;

  constructor(call: CreateAccount1Call) {
    this._call = call;
  }
}

export class GrantPermissionCall extends ethereum.Call {
  get inputs(): GrantPermissionCall__Inputs {
    return new GrantPermissionCall__Inputs(this);
  }

  get outputs(): GrantPermissionCall__Outputs {
    return new GrantPermissionCall__Outputs(this);
  }
}

export class GrantPermissionCall__Inputs {
  _call: GrantPermissionCall;

  constructor(call: GrantPermissionCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get permission(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class GrantPermissionCall__Outputs {
  _call: GrantPermissionCall;

  constructor(call: GrantPermissionCall) {
    this._call = call;
  }
}

export class NotifyAccountTransferCall extends ethereum.Call {
  get inputs(): NotifyAccountTransferCall__Inputs {
    return new NotifyAccountTransferCall__Inputs(this);
  }

  get outputs(): NotifyAccountTransferCall__Outputs {
    return new NotifyAccountTransferCall__Outputs(this);
  }
}

export class NotifyAccountTransferCall__Inputs {
  _call: NotifyAccountTransferCall;

  constructor(call: NotifyAccountTransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get accountId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NotifyAccountTransferCall__Outputs {
  _call: NotifyAccountTransferCall;

  constructor(call: NotifyAccountTransferCall) {
    this._call = call;
  }
}

export class RenouncePermissionCall extends ethereum.Call {
  get inputs(): RenouncePermissionCall__Inputs {
    return new RenouncePermissionCall__Inputs(this);
  }

  get outputs(): RenouncePermissionCall__Outputs {
    return new RenouncePermissionCall__Outputs(this);
  }
}

export class RenouncePermissionCall__Inputs {
  _call: RenouncePermissionCall;

  constructor(call: RenouncePermissionCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get permission(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class RenouncePermissionCall__Outputs {
  _call: RenouncePermissionCall;

  constructor(call: RenouncePermissionCall) {
    this._call = call;
  }
}

export class RevokePermissionCall extends ethereum.Call {
  get inputs(): RevokePermissionCall__Inputs {
    return new RevokePermissionCall__Inputs(this);
  }

  get outputs(): RevokePermissionCall__Outputs {
    return new RevokePermissionCall__Outputs(this);
  }
}

export class RevokePermissionCall__Inputs {
  _call: RevokePermissionCall;

  constructor(call: RevokePermissionCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get permission(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RevokePermissionCall__Outputs {
  _call: RevokePermissionCall;

  constructor(call: RevokePermissionCall) {
    this._call = call;
  }
}

export class AssociateDebtCall extends ethereum.Call {
  get inputs(): AssociateDebtCall__Inputs {
    return new AssociateDebtCall__Inputs(this);
  }

  get outputs(): AssociateDebtCall__Outputs {
    return new AssociateDebtCall__Outputs(this);
  }
}

export class AssociateDebtCall__Inputs {
  _call: AssociateDebtCall;

  constructor(call: AssociateDebtCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get accountId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AssociateDebtCall__Outputs {
  _call: AssociateDebtCall;

  constructor(call: AssociateDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitOrUpgradeNftCall extends ethereum.Call {
  get inputs(): InitOrUpgradeNftCall__Inputs {
    return new InitOrUpgradeNftCall__Inputs(this);
  }

  get outputs(): InitOrUpgradeNftCall__Outputs {
    return new InitOrUpgradeNftCall__Outputs(this);
  }
}

export class InitOrUpgradeNftCall__Inputs {
  _call: InitOrUpgradeNftCall;

  constructor(call: InitOrUpgradeNftCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get uri(): string {
    return this._call.inputValues[3].value.toString();
  }

  get impl(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitOrUpgradeNftCall__Outputs {
  _call: InitOrUpgradeNftCall;

  constructor(call: InitOrUpgradeNftCall) {
    this._call = call;
  }
}

export class InitOrUpgradeTokenCall extends ethereum.Call {
  get inputs(): InitOrUpgradeTokenCall__Inputs {
    return new InitOrUpgradeTokenCall__Inputs(this);
  }

  get outputs(): InitOrUpgradeTokenCall__Outputs {
    return new InitOrUpgradeTokenCall__Outputs(this);
  }
}

export class InitOrUpgradeTokenCall__Inputs {
  _call: InitOrUpgradeTokenCall;

  constructor(call: InitOrUpgradeTokenCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get decimals(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get impl(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitOrUpgradeTokenCall__Outputs {
  _call: InitOrUpgradeTokenCall;

  constructor(call: InitOrUpgradeTokenCall) {
    this._call = call;
  }
}

export class RegisterUnmanagedSystemCall extends ethereum.Call {
  get inputs(): RegisterUnmanagedSystemCall__Inputs {
    return new RegisterUnmanagedSystemCall__Inputs(this);
  }

  get outputs(): RegisterUnmanagedSystemCall__Outputs {
    return new RegisterUnmanagedSystemCall__Outputs(this);
  }
}

export class RegisterUnmanagedSystemCall__Inputs {
  _call: RegisterUnmanagedSystemCall;

  constructor(call: RegisterUnmanagedSystemCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get endpoint(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterUnmanagedSystemCall__Outputs {
  _call: RegisterUnmanagedSystemCall;

  constructor(call: RegisterUnmanagedSystemCall) {
    this._call = call;
  }
}

export class CcipReceiveCall extends ethereum.Call {
  get inputs(): CcipReceiveCall__Inputs {
    return new CcipReceiveCall__Inputs(this);
  }

  get outputs(): CcipReceiveCall__Outputs {
    return new CcipReceiveCall__Outputs(this);
  }
}

export class CcipReceiveCall__Inputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }

  get message(): CcipReceiveCallMessageStruct {
    return changetype<CcipReceiveCallMessageStruct>(this._call.inputValues[0].value.toTuple());
  }
}

export class CcipReceiveCall__Outputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }
}

export class CcipReceiveCallMessageStruct extends ethereum.Tuple {
  get messageId(): Bytes {
    return this[0].toBytes();
  }

  get sourceChainSelector(): BigInt {
    return this[1].toBigInt();
  }

  get sender(): Bytes {
    return this[2].toBytes();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }

  get tokenAmounts(): Array<CcipReceiveCallMessageTokenAmountsStruct> {
    return this[4].toTupleArray<CcipReceiveCallMessageTokenAmountsStruct>();
  }
}

export class CcipReceiveCallMessageTokenAmountsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class CleanExpiredLocksCall extends ethereum.Call {
  get inputs(): CleanExpiredLocksCall__Inputs {
    return new CleanExpiredLocksCall__Inputs(this);
  }

  get outputs(): CleanExpiredLocksCall__Outputs {
    return new CleanExpiredLocksCall__Outputs(this);
  }
}

export class CleanExpiredLocksCall__Inputs {
  _call: CleanExpiredLocksCall;

  constructor(call: CleanExpiredLocksCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get offset(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get count(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CleanExpiredLocksCall__Outputs {
  _call: CleanExpiredLocksCall;

  constructor(call: CleanExpiredLocksCall) {
    this._call = call;
  }

  get cleared(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateLockCall extends ethereum.Call {
  get inputs(): CreateLockCall__Inputs {
    return new CreateLockCall__Inputs(this);
  }

  get outputs(): CreateLockCall__Outputs {
    return new CreateLockCall__Outputs(this);
  }
}

export class CreateLockCall__Inputs {
  _call: CreateLockCall;

  constructor(call: CreateLockCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expireTimestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateLockCall__Outputs {
  _call: CreateLockCall;

  constructor(call: CreateLockCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class ConfigureCollateralCall extends ethereum.Call {
  get inputs(): ConfigureCollateralCall__Inputs {
    return new ConfigureCollateralCall__Inputs(this);
  }

  get outputs(): ConfigureCollateralCall__Outputs {
    return new ConfigureCollateralCall__Outputs(this);
  }
}

export class ConfigureCollateralCall__Inputs {
  _call: ConfigureCollateralCall;

  constructor(call: ConfigureCollateralCall) {
    this._call = call;
  }

  get config(): ConfigureCollateralCallConfigStruct {
    return changetype<ConfigureCollateralCallConfigStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ConfigureCollateralCall__Outputs {
  _call: ConfigureCollateralCall;

  constructor(call: ConfigureCollateralCall) {
    this._call = call;
  }
}

export class ConfigureCollateralCallConfigStruct extends ethereum.Tuple {
  get depositingEnabled(): boolean {
    return this[0].toBoolean();
  }

  get issuanceRatioD18(): BigInt {
    return this[1].toBigInt();
  }

  get liquidationRatioD18(): BigInt {
    return this[2].toBigInt();
  }

  get liquidationRewardD18(): BigInt {
    return this[3].toBigInt();
  }

  get oracleNodeId(): Bytes {
    return this[4].toBytes();
  }

  get tokenAddress(): Address {
    return this[5].toAddress();
  }

  get minDelegationD18(): BigInt {
    return this[6].toBigInt();
  }
}

export class TransferCrossChainCall extends ethereum.Call {
  get inputs(): TransferCrossChainCall__Inputs {
    return new TransferCrossChainCall__Inputs(this);
  }

  get outputs(): TransferCrossChainCall__Outputs {
    return new TransferCrossChainCall__Outputs(this);
  }
}

export class TransferCrossChainCall__Inputs {
  _call: TransferCrossChainCall;

  constructor(call: TransferCrossChainCall) {
    this._call = call;
  }

  get destChainId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCrossChainCall__Outputs {
  _call: TransferCrossChainCall;

  constructor(call: TransferCrossChainCall) {
    this._call = call;
  }

  get gasTokenUsed(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BurnUsdCall extends ethereum.Call {
  get inputs(): BurnUsdCall__Inputs {
    return new BurnUsdCall__Inputs(this);
  }

  get outputs(): BurnUsdCall__Outputs {
    return new BurnUsdCall__Outputs(this);
  }
}

export class BurnUsdCall__Inputs {
  _call: BurnUsdCall;

  constructor(call: BurnUsdCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class BurnUsdCall__Outputs {
  _call: BurnUsdCall;

  constructor(call: BurnUsdCall) {
    this._call = call;
  }
}

export class MintUsdCall extends ethereum.Call {
  get inputs(): MintUsdCall__Inputs {
    return new MintUsdCall__Inputs(this);
  }

  get outputs(): MintUsdCall__Outputs {
    return new MintUsdCall__Outputs(this);
  }
}

export class MintUsdCall__Inputs {
  _call: MintUsdCall;

  constructor(call: MintUsdCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintUsdCall__Outputs {
  _call: MintUsdCall;

  constructor(call: MintUsdCall) {
    this._call = call;
  }
}

export class IsPositionLiquidatableCall extends ethereum.Call {
  get inputs(): IsPositionLiquidatableCall__Inputs {
    return new IsPositionLiquidatableCall__Inputs(this);
  }

  get outputs(): IsPositionLiquidatableCall__Outputs {
    return new IsPositionLiquidatableCall__Outputs(this);
  }
}

export class IsPositionLiquidatableCall__Inputs {
  _call: IsPositionLiquidatableCall;

  constructor(call: IsPositionLiquidatableCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class IsPositionLiquidatableCall__Outputs {
  _call: IsPositionLiquidatableCall;

  constructor(call: IsPositionLiquidatableCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IsVaultLiquidatableCall extends ethereum.Call {
  get inputs(): IsVaultLiquidatableCall__Inputs {
    return new IsVaultLiquidatableCall__Inputs(this);
  }

  get outputs(): IsVaultLiquidatableCall__Outputs {
    return new IsVaultLiquidatableCall__Outputs(this);
  }
}

export class IsVaultLiquidatableCall__Inputs {
  _call: IsVaultLiquidatableCall;

  constructor(call: IsVaultLiquidatableCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class IsVaultLiquidatableCall__Outputs {
  _call: IsVaultLiquidatableCall;

  constructor(call: IsVaultLiquidatableCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get liquidateAsAccountId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get liquidationData(): LiquidateCallLiquidationDataStruct {
    return changetype<LiquidateCallLiquidationDataStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class LiquidateCallLiquidationDataStruct extends ethereum.Tuple {
  get debtLiquidated(): BigInt {
    return this[0].toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this[1].toBigInt();
  }

  get amountRewarded(): BigInt {
    return this[2].toBigInt();
  }
}

export class LiquidateVaultCall extends ethereum.Call {
  get inputs(): LiquidateVaultCall__Inputs {
    return new LiquidateVaultCall__Inputs(this);
  }

  get outputs(): LiquidateVaultCall__Outputs {
    return new LiquidateVaultCall__Outputs(this);
  }
}

export class LiquidateVaultCall__Inputs {
  _call: LiquidateVaultCall;

  constructor(call: LiquidateVaultCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidateAsAccountId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get maxUsd(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class LiquidateVaultCall__Outputs {
  _call: LiquidateVaultCall;

  constructor(call: LiquidateVaultCall) {
    this._call = call;
  }

  get liquidationData(): LiquidateVaultCallLiquidationDataStruct {
    return changetype<LiquidateVaultCallLiquidationDataStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class LiquidateVaultCallLiquidationDataStruct extends ethereum.Tuple {
  get debtLiquidated(): BigInt {
    return this[0].toBigInt();
  }

  get collateralLiquidated(): BigInt {
    return this[1].toBigInt();
  }

  get amountRewarded(): BigInt {
    return this[2].toBigInt();
  }
}

export class ConfigureMaximumMarketCollateralCall extends ethereum.Call {
  get inputs(): ConfigureMaximumMarketCollateralCall__Inputs {
    return new ConfigureMaximumMarketCollateralCall__Inputs(this);
  }

  get outputs(): ConfigureMaximumMarketCollateralCall__Outputs {
    return new ConfigureMaximumMarketCollateralCall__Outputs(this);
  }
}

export class ConfigureMaximumMarketCollateralCall__Inputs {
  _call: ConfigureMaximumMarketCollateralCall;

  constructor(call: ConfigureMaximumMarketCollateralCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConfigureMaximumMarketCollateralCall__Outputs {
  _call: ConfigureMaximumMarketCollateralCall;

  constructor(call: ConfigureMaximumMarketCollateralCall) {
    this._call = call;
  }
}

export class DepositMarketCollateralCall extends ethereum.Call {
  get inputs(): DepositMarketCollateralCall__Inputs {
    return new DepositMarketCollateralCall__Inputs(this);
  }

  get outputs(): DepositMarketCollateralCall__Outputs {
    return new DepositMarketCollateralCall__Outputs(this);
  }
}

export class DepositMarketCollateralCall__Inputs {
  _call: DepositMarketCollateralCall;

  constructor(call: DepositMarketCollateralCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositMarketCollateralCall__Outputs {
  _call: DepositMarketCollateralCall;

  constructor(call: DepositMarketCollateralCall) {
    this._call = call;
  }
}

export class WithdrawMarketCollateralCall extends ethereum.Call {
  get inputs(): WithdrawMarketCollateralCall__Inputs {
    return new WithdrawMarketCollateralCall__Inputs(this);
  }

  get outputs(): WithdrawMarketCollateralCall__Outputs {
    return new WithdrawMarketCollateralCall__Outputs(this);
  }
}

export class WithdrawMarketCollateralCall__Inputs {
  _call: WithdrawMarketCollateralCall;

  constructor(call: WithdrawMarketCollateralCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawMarketCollateralCall__Outputs {
  _call: WithdrawMarketCollateralCall;

  constructor(call: WithdrawMarketCollateralCall) {
    this._call = call;
  }
}

export class DepositMarketUsdCall extends ethereum.Call {
  get inputs(): DepositMarketUsdCall__Inputs {
    return new DepositMarketUsdCall__Inputs(this);
  }

  get outputs(): DepositMarketUsdCall__Outputs {
    return new DepositMarketUsdCall__Outputs(this);
  }
}

export class DepositMarketUsdCall__Inputs {
  _call: DepositMarketUsdCall;

  constructor(call: DepositMarketUsdCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get target(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositMarketUsdCall__Outputs {
  _call: DepositMarketUsdCall;

  constructor(call: DepositMarketUsdCall) {
    this._call = call;
  }

  get feeAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DistributeDebtToPoolsCall extends ethereum.Call {
  get inputs(): DistributeDebtToPoolsCall__Inputs {
    return new DistributeDebtToPoolsCall__Inputs(this);
  }

  get outputs(): DistributeDebtToPoolsCall__Outputs {
    return new DistributeDebtToPoolsCall__Outputs(this);
  }
}

export class DistributeDebtToPoolsCall__Inputs {
  _call: DistributeDebtToPoolsCall;

  constructor(call: DistributeDebtToPoolsCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxIter(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DistributeDebtToPoolsCall__Outputs {
  _call: DistributeDebtToPoolsCall;

  constructor(call: DistributeDebtToPoolsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class GetMarketDebtPerShareCall extends ethereum.Call {
  get inputs(): GetMarketDebtPerShareCall__Inputs {
    return new GetMarketDebtPerShareCall__Inputs(this);
  }

  get outputs(): GetMarketDebtPerShareCall__Outputs {
    return new GetMarketDebtPerShareCall__Outputs(this);
  }
}

export class GetMarketDebtPerShareCall__Inputs {
  _call: GetMarketDebtPerShareCall;

  constructor(call: GetMarketDebtPerShareCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetMarketDebtPerShareCall__Outputs {
  _call: GetMarketDebtPerShareCall;

  constructor(call: GetMarketDebtPerShareCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetMarketPoolDebtDistributionCall extends ethereum.Call {
  get inputs(): GetMarketPoolDebtDistributionCall__Inputs {
    return new GetMarketPoolDebtDistributionCall__Inputs(this);
  }

  get outputs(): GetMarketPoolDebtDistributionCall__Outputs {
    return new GetMarketPoolDebtDistributionCall__Outputs(this);
  }
}

export class GetMarketPoolDebtDistributionCall__Inputs {
  _call: GetMarketPoolDebtDistributionCall;

  constructor(call: GetMarketPoolDebtDistributionCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GetMarketPoolDebtDistributionCall__Outputs {
  _call: GetMarketPoolDebtDistributionCall;

  constructor(call: GetMarketPoolDebtDistributionCall) {
    this._call = call;
  }

  get sharesD18(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get totalSharesD18(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get valuePerShareD27(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class GetMarketPoolsCall extends ethereum.Call {
  get inputs(): GetMarketPoolsCall__Inputs {
    return new GetMarketPoolsCall__Inputs(this);
  }

  get outputs(): GetMarketPoolsCall__Outputs {
    return new GetMarketPoolsCall__Outputs(this);
  }
}

export class GetMarketPoolsCall__Inputs {
  _call: GetMarketPoolsCall;

  constructor(call: GetMarketPoolsCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetMarketPoolsCall__Outputs {
  _call: GetMarketPoolsCall;

  constructor(call: GetMarketPoolsCall) {
    this._call = call;
  }

  get inRangePoolIds(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get outRangePoolIds(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class RegisterMarketCall extends ethereum.Call {
  get inputs(): RegisterMarketCall__Inputs {
    return new RegisterMarketCall__Inputs(this);
  }

  get outputs(): RegisterMarketCall__Outputs {
    return new RegisterMarketCall__Outputs(this);
  }
}

export class RegisterMarketCall__Inputs {
  _call: RegisterMarketCall;

  constructor(call: RegisterMarketCall) {
    this._call = call;
  }

  get market(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterMarketCall__Outputs {
  _call: RegisterMarketCall;

  constructor(call: RegisterMarketCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetMarketMinDelegateTimeCall extends ethereum.Call {
  get inputs(): SetMarketMinDelegateTimeCall__Inputs {
    return new SetMarketMinDelegateTimeCall__Inputs(this);
  }

  get outputs(): SetMarketMinDelegateTimeCall__Outputs {
    return new SetMarketMinDelegateTimeCall__Outputs(this);
  }
}

export class SetMarketMinDelegateTimeCall__Inputs {
  _call: SetMarketMinDelegateTimeCall;

  constructor(call: SetMarketMinDelegateTimeCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minDelegateTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMarketMinDelegateTimeCall__Outputs {
  _call: SetMarketMinDelegateTimeCall;

  constructor(call: SetMarketMinDelegateTimeCall) {
    this._call = call;
  }
}

export class SetMinLiquidityRatioCall extends ethereum.Call {
  get inputs(): SetMinLiquidityRatioCall__Inputs {
    return new SetMinLiquidityRatioCall__Inputs(this);
  }

  get outputs(): SetMinLiquidityRatioCall__Outputs {
    return new SetMinLiquidityRatioCall__Outputs(this);
  }
}

export class SetMinLiquidityRatioCall__Inputs {
  _call: SetMinLiquidityRatioCall;

  constructor(call: SetMinLiquidityRatioCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minLiquidityRatio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMinLiquidityRatioCall__Outputs {
  _call: SetMinLiquidityRatioCall;

  constructor(call: SetMinLiquidityRatioCall) {
    this._call = call;
  }
}

export class WithdrawMarketUsdCall extends ethereum.Call {
  get inputs(): WithdrawMarketUsdCall__Inputs {
    return new WithdrawMarketUsdCall__Inputs(this);
  }

  get outputs(): WithdrawMarketUsdCall__Outputs {
    return new WithdrawMarketUsdCall__Outputs(this);
  }
}

export class WithdrawMarketUsdCall__Inputs {
  _call: WithdrawMarketUsdCall;

  constructor(call: WithdrawMarketUsdCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get target(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawMarketUsdCall__Outputs {
  _call: WithdrawMarketUsdCall;

  constructor(call: WithdrawMarketUsdCall) {
    this._call = call;
  }

  get feeAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddApprovedPoolCall extends ethereum.Call {
  get inputs(): AddApprovedPoolCall__Inputs {
    return new AddApprovedPoolCall__Inputs(this);
  }

  get outputs(): AddApprovedPoolCall__Outputs {
    return new AddApprovedPoolCall__Outputs(this);
  }
}

export class AddApprovedPoolCall__Inputs {
  _call: AddApprovedPoolCall;

  constructor(call: AddApprovedPoolCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddApprovedPoolCall__Outputs {
  _call: AddApprovedPoolCall;

  constructor(call: AddApprovedPoolCall) {
    this._call = call;
  }
}

export class RemoveApprovedPoolCall extends ethereum.Call {
  get inputs(): RemoveApprovedPoolCall__Inputs {
    return new RemoveApprovedPoolCall__Inputs(this);
  }

  get outputs(): RemoveApprovedPoolCall__Outputs {
    return new RemoveApprovedPoolCall__Outputs(this);
  }
}

export class RemoveApprovedPoolCall__Inputs {
  _call: RemoveApprovedPoolCall;

  constructor(call: RemoveApprovedPoolCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveApprovedPoolCall__Outputs {
  _call: RemoveApprovedPoolCall;

  constructor(call: RemoveApprovedPoolCall) {
    this._call = call;
  }
}

export class SetPreferredPoolCall extends ethereum.Call {
  get inputs(): SetPreferredPoolCall__Inputs {
    return new SetPreferredPoolCall__Inputs(this);
  }

  get outputs(): SetPreferredPoolCall__Outputs {
    return new SetPreferredPoolCall__Outputs(this);
  }
}

export class SetPreferredPoolCall__Inputs {
  _call: SetPreferredPoolCall;

  constructor(call: SetPreferredPoolCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPreferredPoolCall__Outputs {
  _call: SetPreferredPoolCall;

  constructor(call: SetPreferredPoolCall) {
    this._call = call;
  }
}

export class AcceptPoolOwnershipCall extends ethereum.Call {
  get inputs(): AcceptPoolOwnershipCall__Inputs {
    return new AcceptPoolOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptPoolOwnershipCall__Outputs {
    return new AcceptPoolOwnershipCall__Outputs(this);
  }
}

export class AcceptPoolOwnershipCall__Inputs {
  _call: AcceptPoolOwnershipCall;

  constructor(call: AcceptPoolOwnershipCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptPoolOwnershipCall__Outputs {
  _call: AcceptPoolOwnershipCall;

  constructor(call: AcceptPoolOwnershipCall) {
    this._call = call;
  }
}

export class CreatePoolCall extends ethereum.Call {
  get inputs(): CreatePoolCall__Inputs {
    return new CreatePoolCall__Inputs(this);
  }

  get outputs(): CreatePoolCall__Outputs {
    return new CreatePoolCall__Outputs(this);
  }
}

export class CreatePoolCall__Inputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }

  get requestedPoolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CreatePoolCall__Outputs {
  _call: CreatePoolCall;

  constructor(call: CreatePoolCall) {
    this._call = call;
  }
}

export class NominatePoolOwnerCall extends ethereum.Call {
  get inputs(): NominatePoolOwnerCall__Inputs {
    return new NominatePoolOwnerCall__Inputs(this);
  }

  get outputs(): NominatePoolOwnerCall__Outputs {
    return new NominatePoolOwnerCall__Outputs(this);
  }
}

export class NominatePoolOwnerCall__Inputs {
  _call: NominatePoolOwnerCall;

  constructor(call: NominatePoolOwnerCall) {
    this._call = call;
  }

  get nominatedOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NominatePoolOwnerCall__Outputs {
  _call: NominatePoolOwnerCall;

  constructor(call: NominatePoolOwnerCall) {
    this._call = call;
  }
}

export class RebalancePoolCall extends ethereum.Call {
  get inputs(): RebalancePoolCall__Inputs {
    return new RebalancePoolCall__Inputs(this);
  }

  get outputs(): RebalancePoolCall__Outputs {
    return new RebalancePoolCall__Outputs(this);
  }
}

export class RebalancePoolCall__Inputs {
  _call: RebalancePoolCall;

  constructor(call: RebalancePoolCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get optionalCollateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RebalancePoolCall__Outputs {
  _call: RebalancePoolCall;

  constructor(call: RebalancePoolCall) {
    this._call = call;
  }
}

export class RenouncePoolNominationCall extends ethereum.Call {
  get inputs(): RenouncePoolNominationCall__Inputs {
    return new RenouncePoolNominationCall__Inputs(this);
  }

  get outputs(): RenouncePoolNominationCall__Outputs {
    return new RenouncePoolNominationCall__Outputs(this);
  }
}

export class RenouncePoolNominationCall__Inputs {
  _call: RenouncePoolNominationCall;

  constructor(call: RenouncePoolNominationCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RenouncePoolNominationCall__Outputs {
  _call: RenouncePoolNominationCall;

  constructor(call: RenouncePoolNominationCall) {
    this._call = call;
  }
}

export class RenouncePoolOwnershipCall extends ethereum.Call {
  get inputs(): RenouncePoolOwnershipCall__Inputs {
    return new RenouncePoolOwnershipCall__Inputs(this);
  }

  get outputs(): RenouncePoolOwnershipCall__Outputs {
    return new RenouncePoolOwnershipCall__Outputs(this);
  }
}

export class RenouncePoolOwnershipCall__Inputs {
  _call: RenouncePoolOwnershipCall;

  constructor(call: RenouncePoolOwnershipCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RenouncePoolOwnershipCall__Outputs {
  _call: RenouncePoolOwnershipCall;

  constructor(call: RenouncePoolOwnershipCall) {
    this._call = call;
  }
}

export class RevokePoolNominationCall extends ethereum.Call {
  get inputs(): RevokePoolNominationCall__Inputs {
    return new RevokePoolNominationCall__Inputs(this);
  }

  get outputs(): RevokePoolNominationCall__Outputs {
    return new RevokePoolNominationCall__Outputs(this);
  }
}

export class RevokePoolNominationCall__Inputs {
  _call: RevokePoolNominationCall;

  constructor(call: RevokePoolNominationCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RevokePoolNominationCall__Outputs {
  _call: RevokePoolNominationCall;

  constructor(call: RevokePoolNominationCall) {
    this._call = call;
  }
}

export class SetMinLiquidityRatio1Call extends ethereum.Call {
  get inputs(): SetMinLiquidityRatio1Call__Inputs {
    return new SetMinLiquidityRatio1Call__Inputs(this);
  }

  get outputs(): SetMinLiquidityRatio1Call__Outputs {
    return new SetMinLiquidityRatio1Call__Outputs(this);
  }
}

export class SetMinLiquidityRatio1Call__Inputs {
  _call: SetMinLiquidityRatio1Call;

  constructor(call: SetMinLiquidityRatio1Call) {
    this._call = call;
  }

  get minLiquidityRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinLiquidityRatio1Call__Outputs {
  _call: SetMinLiquidityRatio1Call;

  constructor(call: SetMinLiquidityRatio1Call) {
    this._call = call;
  }
}

export class SetPoolCollateralConfigurationCall extends ethereum.Call {
  get inputs(): SetPoolCollateralConfigurationCall__Inputs {
    return new SetPoolCollateralConfigurationCall__Inputs(this);
  }

  get outputs(): SetPoolCollateralConfigurationCall__Outputs {
    return new SetPoolCollateralConfigurationCall__Outputs(this);
  }
}

export class SetPoolCollateralConfigurationCall__Inputs {
  _call: SetPoolCollateralConfigurationCall;

  constructor(call: SetPoolCollateralConfigurationCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get newConfig(): SetPoolCollateralConfigurationCallNewConfigStruct {
    return changetype<SetPoolCollateralConfigurationCallNewConfigStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }
}

export class SetPoolCollateralConfigurationCall__Outputs {
  _call: SetPoolCollateralConfigurationCall;

  constructor(call: SetPoolCollateralConfigurationCall) {
    this._call = call;
  }
}

export class SetPoolCollateralConfigurationCallNewConfigStruct extends ethereum.Tuple {
  get collateralLimitD18(): BigInt {
    return this[0].toBigInt();
  }

  get issuanceRatioD18(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetPoolCollateralDisabledByDefaultCall extends ethereum.Call {
  get inputs(): SetPoolCollateralDisabledByDefaultCall__Inputs {
    return new SetPoolCollateralDisabledByDefaultCall__Inputs(this);
  }

  get outputs(): SetPoolCollateralDisabledByDefaultCall__Outputs {
    return new SetPoolCollateralDisabledByDefaultCall__Outputs(this);
  }
}

export class SetPoolCollateralDisabledByDefaultCall__Inputs {
  _call: SetPoolCollateralDisabledByDefaultCall;

  constructor(call: SetPoolCollateralDisabledByDefaultCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get disabled(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetPoolCollateralDisabledByDefaultCall__Outputs {
  _call: SetPoolCollateralDisabledByDefaultCall;

  constructor(call: SetPoolCollateralDisabledByDefaultCall) {
    this._call = call;
  }
}

export class SetPoolConfigurationCall extends ethereum.Call {
  get inputs(): SetPoolConfigurationCall__Inputs {
    return new SetPoolConfigurationCall__Inputs(this);
  }

  get outputs(): SetPoolConfigurationCall__Outputs {
    return new SetPoolConfigurationCall__Outputs(this);
  }
}

export class SetPoolConfigurationCall__Inputs {
  _call: SetPoolConfigurationCall;

  constructor(call: SetPoolConfigurationCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMarketConfigurations(): Array<SetPoolConfigurationCallNewMarketConfigurationsStruct> {
    return this._call.inputValues[1].value.toTupleArray<SetPoolConfigurationCallNewMarketConfigurationsStruct>();
  }
}

export class SetPoolConfigurationCall__Outputs {
  _call: SetPoolConfigurationCall;

  constructor(call: SetPoolConfigurationCall) {
    this._call = call;
  }
}

export class SetPoolConfigurationCallNewMarketConfigurationsStruct extends ethereum.Tuple {
  get marketId(): BigInt {
    return this[0].toBigInt();
  }

  get weightD18(): BigInt {
    return this[1].toBigInt();
  }

  get maxDebtShareValueD18(): BigInt {
    return this[2].toBigInt();
  }
}

export class SetPoolNameCall extends ethereum.Call {
  get inputs(): SetPoolNameCall__Inputs {
    return new SetPoolNameCall__Inputs(this);
  }

  get outputs(): SetPoolNameCall__Outputs {
    return new SetPoolNameCall__Outputs(this);
  }
}

export class SetPoolNameCall__Inputs {
  _call: SetPoolNameCall;

  constructor(call: SetPoolNameCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetPoolNameCall__Outputs {
  _call: SetPoolNameCall;

  constructor(call: SetPoolNameCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get distributor(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DistributeRewardsCall extends ethereum.Call {
  get inputs(): DistributeRewardsCall__Inputs {
    return new DistributeRewardsCall__Inputs(this);
  }

  get outputs(): DistributeRewardsCall__Outputs {
    return new DistributeRewardsCall__Outputs(this);
  }
}

export class DistributeRewardsCall__Inputs {
  _call: DistributeRewardsCall;

  constructor(call: DistributeRewardsCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get start(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class DistributeRewardsCall__Outputs {
  _call: DistributeRewardsCall;

  constructor(call: DistributeRewardsCall) {
    this._call = call;
  }
}

export class RegisterRewardsDistributorCall extends ethereum.Call {
  get inputs(): RegisterRewardsDistributorCall__Inputs {
    return new RegisterRewardsDistributorCall__Inputs(this);
  }

  get outputs(): RegisterRewardsDistributorCall__Outputs {
    return new RegisterRewardsDistributorCall__Outputs(this);
  }
}

export class RegisterRewardsDistributorCall__Inputs {
  _call: RegisterRewardsDistributorCall;

  constructor(call: RegisterRewardsDistributorCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get distributor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RegisterRewardsDistributorCall__Outputs {
  _call: RegisterRewardsDistributorCall;

  constructor(call: RegisterRewardsDistributorCall) {
    this._call = call;
  }
}

export class RemoveRewardsDistributorCall extends ethereum.Call {
  get inputs(): RemoveRewardsDistributorCall__Inputs {
    return new RemoveRewardsDistributorCall__Inputs(this);
  }

  get outputs(): RemoveRewardsDistributorCall__Outputs {
    return new RemoveRewardsDistributorCall__Outputs(this);
  }
}

export class RemoveRewardsDistributorCall__Inputs {
  _call: RemoveRewardsDistributorCall;

  constructor(call: RemoveRewardsDistributorCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get distributor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RemoveRewardsDistributorCall__Outputs {
  _call: RemoveRewardsDistributorCall;

  constructor(call: RemoveRewardsDistributorCall) {
    this._call = call;
  }
}

export class UpdateRewardsCall extends ethereum.Call {
  get inputs(): UpdateRewardsCall__Inputs {
    return new UpdateRewardsCall__Inputs(this);
  }

  get outputs(): UpdateRewardsCall__Outputs {
    return new UpdateRewardsCall__Outputs(this);
  }
}

export class UpdateRewardsCall__Inputs {
  _call: UpdateRewardsCall;

  constructor(call: UpdateRewardsCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get accountId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateRewardsCall__Outputs {
  _call: UpdateRewardsCall;

  constructor(call: UpdateRewardsCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get value1(): Array<Address> {
    return this._call.outputValues[1].value.toAddressArray();
  }
}

export class ConfigureChainlinkCrossChainCall extends ethereum.Call {
  get inputs(): ConfigureChainlinkCrossChainCall__Inputs {
    return new ConfigureChainlinkCrossChainCall__Inputs(this);
  }

  get outputs(): ConfigureChainlinkCrossChainCall__Outputs {
    return new ConfigureChainlinkCrossChainCall__Outputs(this);
  }
}

export class ConfigureChainlinkCrossChainCall__Inputs {
  _call: ConfigureChainlinkCrossChainCall;

  constructor(call: ConfigureChainlinkCrossChainCall) {
    this._call = call;
  }

  get ccipRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ccipTokenPool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConfigureChainlinkCrossChainCall__Outputs {
  _call: ConfigureChainlinkCrossChainCall;

  constructor(call: ConfigureChainlinkCrossChainCall) {
    this._call = call;
  }
}

export class ConfigureOracleManagerCall extends ethereum.Call {
  get inputs(): ConfigureOracleManagerCall__Inputs {
    return new ConfigureOracleManagerCall__Inputs(this);
  }

  get outputs(): ConfigureOracleManagerCall__Outputs {
    return new ConfigureOracleManagerCall__Outputs(this);
  }
}

export class ConfigureOracleManagerCall__Inputs {
  _call: ConfigureOracleManagerCall;

  constructor(call: ConfigureOracleManagerCall) {
    this._call = call;
  }

  get oracleManagerAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConfigureOracleManagerCall__Outputs {
  _call: ConfigureOracleManagerCall;

  constructor(call: ConfigureOracleManagerCall) {
    this._call = call;
  }
}

export class SetConfigCall extends ethereum.Call {
  get inputs(): SetConfigCall__Inputs {
    return new SetConfigCall__Inputs(this);
  }

  get outputs(): SetConfigCall__Outputs {
    return new SetConfigCall__Outputs(this);
  }
}

export class SetConfigCall__Inputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }

  get k(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get v(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetConfigCall__Outputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }
}

export class SetSupportedCrossChainNetworksCall extends ethereum.Call {
  get inputs(): SetSupportedCrossChainNetworksCall__Inputs {
    return new SetSupportedCrossChainNetworksCall__Inputs(this);
  }

  get outputs(): SetSupportedCrossChainNetworksCall__Outputs {
    return new SetSupportedCrossChainNetworksCall__Outputs(this);
  }
}

export class SetSupportedCrossChainNetworksCall__Inputs {
  _call: SetSupportedCrossChainNetworksCall;

  constructor(call: SetSupportedCrossChainNetworksCall) {
    this._call = call;
  }

  get supportedNetworks(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get ccipSelectors(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetSupportedCrossChainNetworksCall__Outputs {
  _call: SetSupportedCrossChainNetworksCall;

  constructor(call: SetSupportedCrossChainNetworksCall) {
    this._call = call;
  }

  get numRegistered(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DelegateCollateralCall extends ethereum.Call {
  get inputs(): DelegateCollateralCall__Inputs {
    return new DelegateCollateralCall__Inputs(this);
  }

  get outputs(): DelegateCollateralCall__Outputs {
    return new DelegateCollateralCall__Outputs(this);
  }
}

export class DelegateCollateralCall__Inputs {
  _call: DelegateCollateralCall;

  constructor(call: DelegateCollateralCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get newCollateralAmountD18(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get leverage(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class DelegateCollateralCall__Outputs {
  _call: DelegateCollateralCall;

  constructor(call: DelegateCollateralCall) {
    this._call = call;
  }
}

export class GetPositionCall extends ethereum.Call {
  get inputs(): GetPositionCall__Inputs {
    return new GetPositionCall__Inputs(this);
  }

  get outputs(): GetPositionCall__Outputs {
    return new GetPositionCall__Outputs(this);
  }
}

export class GetPositionCall__Inputs {
  _call: GetPositionCall;

  constructor(call: GetPositionCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class GetPositionCall__Outputs {
  _call: GetPositionCall;

  constructor(call: GetPositionCall) {
    this._call = call;
  }

  get collateralAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get collateralValue(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get debt(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get collateralizationRatio(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class GetPositionCollateralRatioCall extends ethereum.Call {
  get inputs(): GetPositionCollateralRatioCall__Inputs {
    return new GetPositionCollateralRatioCall__Inputs(this);
  }

  get outputs(): GetPositionCollateralRatioCall__Outputs {
    return new GetPositionCollateralRatioCall__Outputs(this);
  }
}

export class GetPositionCollateralRatioCall__Inputs {
  _call: GetPositionCollateralRatioCall;

  constructor(call: GetPositionCollateralRatioCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class GetPositionCollateralRatioCall__Outputs {
  _call: GetPositionCollateralRatioCall;

  constructor(call: GetPositionCollateralRatioCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetPositionDebtCall extends ethereum.Call {
  get inputs(): GetPositionDebtCall__Inputs {
    return new GetPositionDebtCall__Inputs(this);
  }

  get outputs(): GetPositionDebtCall__Outputs {
    return new GetPositionDebtCall__Outputs(this);
  }
}

export class GetPositionDebtCall__Inputs {
  _call: GetPositionDebtCall;

  constructor(call: GetPositionDebtCall) {
    this._call = call;
  }

  get accountId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class GetPositionDebtCall__Outputs {
  _call: GetPositionDebtCall;

  constructor(call: GetPositionDebtCall) {
    this._call = call;
  }

  get debt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetVaultCollateralRatioCall extends ethereum.Call {
  get inputs(): GetVaultCollateralRatioCall__Inputs {
    return new GetVaultCollateralRatioCall__Inputs(this);
  }

  get outputs(): GetVaultCollateralRatioCall__Outputs {
    return new GetVaultCollateralRatioCall__Outputs(this);
  }
}

export class GetVaultCollateralRatioCall__Inputs {
  _call: GetVaultCollateralRatioCall;

  constructor(call: GetVaultCollateralRatioCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GetVaultCollateralRatioCall__Outputs {
  _call: GetVaultCollateralRatioCall;

  constructor(call: GetVaultCollateralRatioCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetVaultDebtCall extends ethereum.Call {
  get inputs(): GetVaultDebtCall__Inputs {
    return new GetVaultDebtCall__Inputs(this);
  }

  get outputs(): GetVaultDebtCall__Outputs {
    return new GetVaultDebtCall__Outputs(this);
  }
}

export class GetVaultDebtCall__Inputs {
  _call: GetVaultDebtCall;

  constructor(call: GetVaultDebtCall) {
    this._call = call;
  }

  get poolId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GetVaultDebtCall__Outputs {
  _call: GetVaultDebtCall;

  constructor(call: GetVaultDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
