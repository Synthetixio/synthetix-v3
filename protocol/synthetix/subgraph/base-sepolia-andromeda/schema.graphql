type Pool @entity {
  id: ID!
  owner: Bytes!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt
  updated_at_block: BigInt
  "Defined when a owner is nominated and empty if he revoked, or got revoked"
  nominated_owner: Bytes
  "Only set when name of the pool got updated"
  name: String
  total_weight: BigInt
  "Registered rewards distributors"
  registered_distributors: [RewardsDistributor!] @derivedFrom(field: "pool")
  "This is an internal field, needed to keep configurations in sync. The reason for this is due to derived fields are no readable from event handlers. Consumers should look up markets by the configurations field"
  market_ids: [String!]
  configurations: [MarketConfiguration!] @derivedFrom(field: "pool")
}

type Market @entity {
  id: ID!
  address: Bytes!
  created_at: BigInt!
  created_at_block: BigInt!
  configurations: [MarketConfiguration!] @derivedFrom(field: "market")
  market_snapshots_by_day: [MarketSnapshotByDay!] @derivedFrom(field: "market")
  market_snapshots_by_week: [MarketSnapshotByWeek!]
    @derivedFrom(field: "market")
  updated_at: BigInt!
  updated_at_block: BigInt!
  usd_deposited: BigDecimal!
  usd_withdrawn: BigDecimal!
  "withdrawn - deposited"
  net_issuance: BigDecimal!
  reported_debt: BigDecimal!
}

type MarketSnapshotByDay @entity {
  "marketId-YYYY-MM-DD"
  id: ID!
  updated_at: BigInt!
  updated_at_block: BigInt!
  created_at: BigInt!
  created_at_block: BigInt!
  updates_in_period: BigInt!
  market: Market!
  usd_deposited: BigDecimal!
  usd_withdrawn: BigDecimal!
  "withdrawn - deposited"
  net_issuance: BigDecimal!
  reported_debt: BigDecimal!
}

type MarketSnapshotByWeek @entity {
  "marketId-YYYY-WeekNumber"
  id: ID!
  updated_at: BigInt!
  updated_at_block: BigInt!
  created_at: BigInt!
  created_at_block: BigInt!
  updates_in_period: BigInt!
  market: Market!
  usd_deposited: BigDecimal!
  usd_withdrawn: BigDecimal!
  "withdrawn - deposited"
  net_issuance: BigDecimal!
  reported_debt: BigDecimal!
}

type MarketConfiguration @entity {
  "PoolId-MarketId"
  id: ID!
  pool: Pool!
  market: Market!
  weight: BigInt!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at_block: BigInt!
  updated_at: BigInt!
  max_debt_share_value: BigDecimal!
}

type CollateralType @entity {
  "Address of the ERC20 contract"
  id: ID!
  oracle_node_id: BigInt!
  depositing_enabled: Boolean!
  issuance_ratio: BigDecimal!
  liquidation_ratio: BigDecimal!
  liquidation_reward: BigDecimal!
  min_delegation: BigDecimal!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
  total_amount_deposited: BigDecimal
}

type Account @entity {
  "NFT token id"
  id: ID!
  owner: Bytes!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
  permissions: [AccountPermissionUsers!]
}

type AccountPermissionUsers @entity {
  "NFT token id + user address"
  id: ID!
  address: Bytes!
  account: Account!
  permissions: [Bytes!]!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
}

type Position @entity {
  "NFT token id + pool id + collateral type address"
  id: ID!
  collateral_amount: BigDecimal!
  leverage: BigDecimal!
  # TODO @dev find a way to calculate that without a contract call
  # c_ratio: BigDecimal!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
  account: Account!
  pool: Pool!
  collateral_type: CollateralType!
  "total-minted - total_burned"
  net_issuance: BigDecimal
  total_minted: BigDecimal
  total_burned: BigDecimal
}

type Vault @entity {
  "Pool id + collateral type address"
  id: ID!
  collateral_amount: BigDecimal!
  collateral_type: CollateralType!
  pool: Pool!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
}

type VaultSnapshotByDay @entity {
  "vaultId-YYYY-MM-DD"
  id: ID!
  collateral_amount: BigDecimal!
  collateral_type: CollateralType!
  pool: Pool!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
  updates_in_period: BigInt!
}

type VaultSnapshotByWeek @entity {
  "vaultId-YYYY-WeekNumber"
  id: ID!
  collateral_amount: BigDecimal!
  collateral_type: CollateralType!
  pool: Pool!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
  updates_in_period: BigInt!
}

type VaultSnapshotByMonth @entity {
  "vaultId-YYYY-Month"
  id: ID!
  collateral_amount: BigDecimal!
  collateral_type: CollateralType!
  pool: Pool!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
  updates_in_period: BigInt!
}

type VaultSnapshotByYear @entity {
  "vaultId-YYYY"
  id: ID!
  collateral_amount: BigDecimal!
  collateral_type: CollateralType!
  pool: Pool!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
  updates_in_period: BigInt!
}

type RewardsDistributor @entity {
  "Address of the distributor"
  id: ID!
  "Total amount of to be or already distributions"
  total_distributed: BigDecimal!
  "Total amount of claimed distributions"
  total_claimed: BigDecimal!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
  pool: Pool!
  isActive: Boolean!
  rewards_distributions: [RewardsDistribution!]!
    @derivedFrom(field: "distributor")
}

type RewardsDistribution @entity {
  "Rewards distributor address + timestamp + log index"
  id: ID!
  collateral_type: Bytes!
  pool: Pool!
  amount: BigDecimal!
  start: BigInt!
  duration: BigInt!
  distributor: RewardsDistributor!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
}

type AccountRewardsDistributor @entity {
  "Pool id + collateral type + distributor"
  id: ID!
  distributor: RewardsDistributor!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
  total_claimed: BigDecimal
}

type RewardsClaimed @entity {
  "Rewards distributor id + timestamp + log index"
  id: ID!
  account: Account!
  pool: Pool!
  collateral_type: Bytes!
  distributor: RewardsDistributor!
  amount: BigDecimal!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
}

type Liquidation @entity {
  "NFT token id + pool id + collateral_type + log index (number of occurence)"
  id: ID!
  account: Account!
  pool: Pool!
  collateral_type: Bytes!
  debt_liquidated: BigDecimal!
  collateral_liquidated: BigDecimal!
  amount_rewarded: BigDecimal!
  liquidate_as_account_id: Account!
  sender: Bytes!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
}

type VaultLiquidation @entity {
  "Pool id + collateral type + log index (number of occurence)"
  id: ID!
  pool: Pool!
  collateral_type: Bytes!
  amount_rewarded: BigDecimal!
  amount_liquidated: BigDecimal!
  collateral_liquidated: BigDecimal!
  liquidate_as_account_id: Account!
  sender: Bytes!
  created_at: BigInt!
  created_at_block: BigInt!
  updated_at: BigInt!
  updated_at_block: BigInt!
}
