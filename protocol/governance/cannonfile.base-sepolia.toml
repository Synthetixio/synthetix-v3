name = "synthetix-governance"
description = "On-chain voting for synthetix councils"
version = "7"
preset = "test"

include = ["./cannonfile.satellite.toml", "./tomls/testable-contracts.toml"]

[setting.owner]
defaultValue = "0x73570075092502472E4b61A7058Df1A4a1DB12f2"

[setting.salt]
defaultValue = "governance-test-v7"

[setting.wormhole_core]
defaultValue = "0x79A1027a6A159502049F10906D333EC57E95F083" # https://docs.wormhole.com/wormhole/reference/constants

[setting.wormhole_relayer]
defaultValue = "0x93BAD53DDfB6132b0aC8E37f6029163E63372cEE" # https://docs.wormhole.com/wormhole/reference/constants

[setting.initial_council_member]
defaultValue = "<%= settings.owner %>"

[setting.initial_epoch_index]
defaultValue = "0"

[setting.initial_epoch_start_date]
defaultValue = "0"

[setting.initial_nomination_period_start_date]
defaultValue = "0"

[setting.initial_voting_period_start_date]
defaultValue = "0"

[setting.initial_epoch_end_date]
defaultValue = "0"

[contract.SnapshotRecordMock]
artifact = "contracts/mocks/SnapshotRecordMock.sol:SnapshotRecordMock"
salt = "<%= settings.salt %>"
create2 = true

[router.CoreRouter]
contracts = [
    # Satellite Core Contracts
    "AssociatedSystemsModule",
    "ElectionModuleSatellite",
    "SnapshotVotePowerModule",
    "InitialModuleBundle",

    # Testable storage contracts
    "TestableCouncilStorage",
    "TestableBallotStorage",
    "TestableSnapshotVotePowerStorage",
    "TestableElectionSettingsStorage",
    "TestableElectionStorage",
    "TestableEpochStorage",
]

[invoke.set_balance_of_on_period]
target = ["SnapshotRecordMock"]
from = "<%= settings.owner %>"
func = "setBalanceOfOnPeriod"
args = ["<%= settings.owner %>", "100", "1"]

# [invoke.set_snapshot_record]
# target = ["GovernanceProxy"]
# from = "<%= settings.owner %>"
# func = "setSnapshotContract"
# args = ["<%= contracts.SnapshotRecordMock.address %>", 0, true]

[invoke.set_registered_emitters]
target = ["GovernanceProxy"]
from = "<%= settings.owner %>"
func = "setRegisteredEmitters"
args = [["10005"], ["0x0AFb5ef6DBe62702142Fa018BE0D21196E666796"]]

[invoke.set_gas_limit]
target = ["GovernanceProxy"]
from = "<%= settings.owner %>"
func = "setGasLimit"
args = ["1000000"]
