version = "<%= package.version %>-testable"

include = [
  "cannonfile.toml"
]

[contract.BaseElectionModule]
artifact = "contracts/modules/core/BaseElectionModule.sol:BaseElectionModule"

[contract.SnapshotRecordMock]
artifact = "contracts/mocks/SnapshotRecordMock.sol:SnapshotRecordMock"

# Testable storage contracts
[contract.TestableCouncilStorage]
artifact = "contracts/generated/test/TestableCouncilStorage.sol:TestableCouncilStorage"

[contract.TestableBallotStorage]
artifact = "contracts/generated/test/TestableBallotStorage.sol:TestableBallotStorage"

[contract.TestableSnapshotVotePowerStorage]
artifact = "contracts/generated/test/TestableSnapshotVotePowerStorage.sol:TestableSnapshotVotePowerStorage"

[contract.TestableElectionSettingsStorage]
artifact = "contracts/generated/test/TestableElectionSettingsStorage.sol:TestableElectionSettingsStorage"

[contract.TestableElectionStorage]
artifact = "contracts/generated/test/TestableElectionStorage.sol:TestableElectionStorage"

# Core Router + Testable modules
[router.TestRouter]
contracts = [
  # Extend Original Core Router
  "CoreRouter",
  # Testable storage contracts
  "TestableCouncilStorage",
	"TestableBallotStorage",
  "TestableSnapshotVotePowerStorage",
  "TestableElectionSettingsStorage",
  "TestableElectionStorage",
]
depends = [
  "router.CoreRouter",
  "contract.TestableCouncilStorage",
	"contract.TestableBallotStorage",
  "contract.TestableSnapshotVotePowerStorage",
  "contract.TestableElectionSettingsStorage",
  "contract.TestableElectionStorage",
]

[invoke.upgrade_core_proxy]
target = ["InitialProxy"]
from = "<%= settings.owner %>"
func = "upgradeTo"
args = ["<%= contracts.TestRouter.address %>"]
factory.CoreProxy.abiOf = ["TestRouter"]
factory.CoreProxy.event = "Upgraded"
factory.CoreProxy.arg = 0
depends = ["contract.InitialProxy", "router.TestRouter"]

[router.BaseElectionRouter]
contracts = [
  "AssociatedSystemsModule",
  "BaseElectionModule",
  "InitialModuleBundle",
]
depends = [
  "contract.AssociatedSystemsModule",
  "contract.BaseElectionModule",
  "contract.InitialModuleBundle",
]

[contract.BaseElectionProxy]
artifact = "contracts/Proxy.sol:Proxy"
args = ["<%= contracts.BaseElectionRouter.address %>", "<%= settings.owner %>"]
salt = "<%= settings.salt %>"
abiOf = ["BaseElectionRouter"]
create2 = true
depends = ["router.BaseElectionRouter"]

[invoke.init_base_election_council_token]
target = ["BaseElectionProxy"]
from = "<%= settings.owner %>"
func = "initOrUpgradeNft"
args = [
  "<%= formatBytes32String('councilToken') %>",
  "Generic Governance Token",
  "GGOV",
  "https://synthetix.io",
  "<%= contracts.CouncilTokenRouter.address %>"
]
depends = [
  "contract.BaseElectionProxy",
  "router.CouncilTokenRouter"
]
factory.BaseElectionCouncilToken.abiOf = ["CouncilTokenRouter"]
factory.BaseElectionCouncilToken.event = "AssociatedSystemSet"
factory.BaseElectionCouncilToken.arg = 2
