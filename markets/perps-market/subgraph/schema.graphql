type Account @entity {
  id: ID!
  accountId: BigInt!
  owner: String!
}

type LiquidatedAccount @entity {
  id: ID!
  accountId: BigInt!
  keeperLiquidationReward: BigInt
  accountFullyLiquidated: Boolean
}

type LiquidatedPosition @entity {
  id: ID!
  accountId: BigInt!
  marketId: BigInt
  amountLiquidated: BigInt
  currentPositionSize: BigInt
}

type Market @entity {
  id: ID!
  perpsMarketId: BigInt!
  marketName: String
  marketSymbol: String
  price: BigInt
  skew: BigInt
  size: BigInt
  sizeDelta: BigInt
  currentFundingRate: BigInt
  currentFundingVelocity: BigInt
  feedId: Bytes
  maxFundingVelocity: BigInt
  skewScale: BigInt
  lockedOiPercent: BigInt
  marketOwner: String
  owner: String
  initialMarginRatioD18: BigInt
  maintenanceMarginRatioD18: BigInt
  liquidationRewardRatioD18: BigInt
  maxSecondsInLiquidationWindow: BigInt
  minimumPositionMargin: BigInt
  maxLiquidationLimitAccumulationMultiplier: BigInt
  makerFee: BigInt
  takerFee: BigInt

  factoryInitialized: Boolean
}

type Order @entity {
  id: ID!
  marketId: BigInt
  accountId: BigInt
  amountProvided: BigInt
  orderType: Int
  size: BigInt
  acceptablePrice: BigInt
  settlementTime: BigInt
  expirationTime: BigInt
  trackingCode: Bytes
  owner: String

  fillPrice: BigInt
  accountPnlRealized: BigInt
  newSize: BigInt
  collectedFees: BigInt
  settelementReward: BigInt
  settler: String

  block: BigInt!
  timestamp: BigInt!
}

type SettlementStrategy @entity {
  id: ID!
  strategyId: BigInt!
  marketId: BigInt!
  enabled: Boolean
  strategyType: Int
  settlementDelay: BigInt
  settlementWindowDuration: BigInt
  priceVerificationContract: String
  feedId: Bytes
  url: String
  settlementReward: BigInt
  priceDeviationTolerance: BigInt
  minimumUsdExchangeAmount: BigInt
  maxRoundingLoss: BigInt
}

type ReferrerShare @entity {
  id: ID!
  referrer: String
  shareRatioD18: BigInt
}

type GlobalConfiguration @entity {
  id: ID!
  feeCollector: String
}
