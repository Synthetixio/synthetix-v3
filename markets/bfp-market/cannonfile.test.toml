name = "synthetix-bfp-market"
version = "<%= package.version %>"
description = "bfp-market for Synthetix v3"

# NOTE: '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266' (Anvil signer[0])
[var.main]
description = "bfp-market owner"
owner = "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"
synthetixPreset = "main"
synthetixPackage = "synthetix:latest"
spotMarketPreset = "main"
spotMarketPackage = "synthetix-spot-market:latest"
salt = "snax"

# --- External Imports --- #

[pull.synthetix]
source = "<%= settings.synthetixPackage %>"
preset = "<%= settings.synthetixPreset %>"

[pull.spotMarket]
source = "<%= settings.spotMarketPackage %>"
preset = "<%= settings.spotMarketPreset %>"

[pull.pyth]
source = "pyth"
args = [120, 1] # 120s, 1wei

# --- Module Contracts --- #

[deploy.OrderModule]
artifact = "OrderModule"
args = []

[deploy.LiquidationModule]
artifact = "LiquidationModule"
args = []

[deploy.PerpMarketFactoryModule]
artifact = "PerpMarketFactoryModule"
args = []

[deploy.MarketConfigurationModule]
artifact = "MarketConfigurationModule"
args = []

[deploy.PerpAccountModule]
artifact = "PerpAccountModule"
args = []

[deploy.MarginModule]
artifact = "MarginModule"
args = []

[deploy.PerpRewardDistributorFactoryModule]
artifact = "contracts/modules/PerpRewardDistributorModule/PerpRewardDistributorFactoryModule.sol:PerpRewardDistributorFactoryModule"
args = []

[deploy.FeatureFlagModule]
artifact = "contracts/modules/FeatureFlagModule.sol:FeatureFlagModule"
args = []

[deploy.CoreModule]
artifact = "contracts/modules/CoreModule.sol:CoreModule"
args = []

[deploy.SettlementHookModule]
artifact = "contracts/modules/SettlementHookModule.sol:SettlementHookModule"
args = []

# --- Distributor contract --- #

[deploy.PerpRewardDistributor]
artifact = "contracts/modules/PerpRewardDistributorModule/PerpRewardDistributor.sol:PerpRewardDistributor"
args = []

# --- Market proxy contract --- #

[deploy.InitialBfpMarketProxy]
artifact = "contracts/Proxy.sol:Proxy"
args = ["<%= contracts.CoreModule.address %>", "<%= settings.owner %>"]
abiOf = ["CoreModule"]
salt = "<%= settings.salt %>"

# --- Core router --- #

[router.BfpMarketRouter]
contracts = [
    "synthetix.AccountModule",
    "synthetix.AssociatedSystemsModule",
    "CoreModule",
    "FeatureFlagModule",
    "PerpMarketFactoryModule",
    "MarketConfigurationModule",
    "PerpAccountModule",
    "MarginModule",
    "OrderModule",
    "LiquidationModule",
    "PerpRewardDistributorFactoryModule",
    "SettlementHookModule",
]

# --- Proxy post deployment --- #

[invoke.upgradeProxy]
target = ["InitialBfpMarketProxy"]
fromCall.func = "owner"
func = "upgradeTo"
args = ["<%= contracts.BfpMarketRouter.address %>"]
factory.BfpMarketProxy.abiOf = ["BfpMarketRouter"]
factory.BfpMarketProxy.event = "Upgraded"
factory.BfpMarketProxy.arg = 0

# @see: https://github.com/Synthetixio/synthetix-v3/blob/main/utils/core-modules/contracts/interfaces/IAssociatedSystemsModule.sol#L63
[invoke.init_or_upgrade_nft]
target = ["BfpMarketProxy"]
fromCall.func = "owner"
func = "initOrUpgradeNft"
args = [
    "<%= formatBytes32String('accountNft') %>",
    "Synthetix V3: BFP Account NFT",
    "SNX-V3-BFP-ACC",
    "",
    "<%= imports.synthetix.contracts.AccountRouter.address %>",
]
factory.PerpAccountProxy.abiOf = ["synthetix.AccountRouter"]
factory.PerpAccountProxy.event = "AssociatedSystemSet"
factory.PerpAccountProxy.arg = 2

# --- Mocks --- #

[deploy.SettlementHookMock]
artifact = "contracts/mocks/SettlementHookMock.sol:SettlementHookMock"
args = ["<%= contracts.InitialBfpMarketProxy.address %>"]
salt = "1"

[deploy.SettlementHook2Mock]
artifact = "contracts/mocks/SettlementHookMock.sol:SettlementHookMock"
args = ["<%= contracts.InitialBfpMarketProxy.address %>"]
salt = "2"

[deploy.CollateralMock]
artifact = "contracts/mocks/CollateralMock.sol:CollateralMock"
args = []
salt = "1"

[deploy.Collateral2Mock]
artifact = "contracts/mocks/CollateralMock.sol:CollateralMock"
args = []
salt = "2"

[deploy.CollateralMockD18]
artifact = "contracts/mocks/CollateralMock.sol:CollateralMock"
args = []
salt = "3"

[deploy.CollateralMockD8]
artifact = "contracts/mocks/CollateralMock.sol:CollateralMock"
args = []
salt = "4"

[invoke.initialize_collateral_mock]
target = ["CollateralMock"]
func = "initialize"
args = ["CollateralMock", "CMOCK", "18"]

[invoke.initialize_collateral2_mock]
target = ["Collateral2Mock"]
func = "initialize"
args = ["Collateral2Mock", "CMOCK2", "18"]

[invoke.initialize_collateral_mock_d18]
target = ["CollateralMockD18"]
func = "initialize"
args = ["CollateralMockD18", "CMD18", "18"]

[invoke.initialize_collateral_mock_d8]
target = ["CollateralMockD8"]
func = "initialize"
args = ["CollateralMockD18", "CMD8", "8"]

[deploy.MergeAccountSettlementHookMock]
artifact = "contracts/mocks/MergeAccountSettlementHookMock.sol:MergeAccountSettlementHookMock"
args = ["<%= contracts.InitialBfpMarketProxy.address %>"]
salt = "3"

# --- Market Post BFP Deployment Configuration --- #

[invoke.set_synthetix]
target = ["BfpMarketProxy"]
fromCall.func = "owner"
func = "setSynthetix"
args = ["<%= imports.synthetix.contracts.CoreProxy.address %>"]

[invoke.set_spot_market]
target = ["BfpMarketProxy"]
fromCall.func = "owner"
func = "setSpotMarket"
args = ["<%= imports.spotMarket.contracts.SpotMarketProxy.address %>"]

[invoke.set_pyth]
target = ["BfpMarketProxy"]
fromCall.func = "owner"
func = "setPyth"
args = ["<%= imports.pyth.contracts.Pyth.address %>"]

[invoke.set_reward_distributor_implementation]
target = ["BfpMarketProxy"]
fromCall.func = "owner"
func = "setRewardDistributorImplementation"
args = ["<%= contracts.PerpRewardDistributor.address %>"]

# --- Feature flags --- #

[invoke.add_to_feature_flag_allowlist_register_market]
target = ["synthetix.CoreProxy"]
func = "addToFeatureFlagAllowlist"
from = "<%= settings.owner %>"
args = [
    "<%= formatBytes32String('registerMarket') %>",
    "<%= contracts.BfpMarketProxy.address %>",
]

[invoke.enable_all_features]
target = ["BfpMarketProxy"]
func = "enableAllFeatures"
from = "<%= settings.owner %>"
