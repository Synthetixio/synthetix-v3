// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from '@graphprotocol/graph-ts';

export class Wrapper extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Wrapper entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Wrapper must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Wrapper', id.toString(), this);
    }
  }

  static load(id: string): Wrapper | null {
    return changetype<Wrapper | null>(store.get('Wrapper', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get marketId(): BigInt {
    let value = this.get('marketId');
    return value!.toBigInt();
  }

  set marketId(value: BigInt) {
    this.set('marketId', Value.fromBigInt(value));
  }

  get maxWrappableAmount(): BigInt {
    let value = this.get('maxWrappableAmount');
    return value!.toBigInt();
  }

  set maxWrappableAmount(value: BigInt) {
    this.set('maxWrappableAmount', Value.fromBigInt(value));
  }

  get wrapCollateralType(): string {
    let value = this.get('wrapCollateralType');
    return value!.toString();
  }

  set wrapCollateralType(value: string) {
    this.set('wrapCollateralType', Value.fromString(value));
  }
}

export class SettlementStrategy extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save SettlementStrategy entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SettlementStrategy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('SettlementStrategy', id.toString(), this);
    }
  }

  static load(id: string): SettlementStrategy | null {
    return changetype<SettlementStrategy | null>(store.get('SettlementStrategy', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get marketId(): BigInt {
    let value = this.get('marketId');
    return value!.toBigInt();
  }

  set marketId(value: BigInt) {
    this.set('marketId', Value.fromBigInt(value));
  }

  get settlementStrategyId(): BigInt {
    let value = this.get('settlementStrategyId');
    return value!.toBigInt();
  }

  set settlementStrategyId(value: BigInt) {
    this.set('settlementStrategyId', Value.fromBigInt(value));
  }

  get disabled(): boolean {
    let value = this.get('disabled');
    return value!.toBoolean();
  }

  set disabled(value: boolean) {
    this.set('disabled', Value.fromBoolean(value));
  }

  get strategyType(): i32 {
    let value = this.get('strategyType');
    return value!.toI32();
  }

  set strategyType(value: i32) {
    this.set('strategyType', Value.fromI32(value));
  }

  get settlementDelay(): BigInt | null {
    let value = this.get('settlementDelay');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set settlementDelay(value: BigInt | null) {
    if (!value) {
      this.unset('settlementDelay');
    } else {
      this.set('settlementDelay', Value.fromBigInt(<BigInt>value));
    }
  }

  get settlementWindowDuration(): BigInt | null {
    let value = this.get('settlementWindowDuration');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set settlementWindowDuration(value: BigInt | null) {
    if (!value) {
      this.unset('settlementWindowDuration');
    } else {
      this.set('settlementWindowDuration', Value.fromBigInt(<BigInt>value));
    }
  }

  get priceVerificationContract(): string | null {
    let value = this.get('priceVerificationContract');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set priceVerificationContract(value: string | null) {
    if (!value) {
      this.unset('priceVerificationContract');
    } else {
      this.set('priceVerificationContract', Value.fromString(<string>value));
    }
  }

  get feedId(): Bytes | null {
    let value = this.get('feedId');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set feedId(value: Bytes | null) {
    if (!value) {
      this.unset('feedId');
    } else {
      this.set('feedId', Value.fromBytes(<Bytes>value));
    }
  }

  get url(): string | null {
    let value = this.get('url');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set url(value: string | null) {
    if (!value) {
      this.unset('url');
    } else {
      this.set('url', Value.fromString(<string>value));
    }
  }

  get settlementReward(): BigInt | null {
    let value = this.get('settlementReward');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set settlementReward(value: BigInt | null) {
    if (!value) {
      this.unset('settlementReward');
    } else {
      this.set('settlementReward', Value.fromBigInt(<BigInt>value));
    }
  }

  get minimumUsdExchangeAmount(): BigInt | null {
    let value = this.get('minimumUsdExchangeAmount');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minimumUsdExchangeAmount(value: BigInt | null) {
    if (!value) {
      this.unset('minimumUsdExchangeAmount');
    } else {
      this.set('minimumUsdExchangeAmount', Value.fromBigInt(<BigInt>value));
    }
  }

  get maxRoundingLoss(): BigInt | null {
    let value = this.get('maxRoundingLoss');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxRoundingLoss(value: BigInt | null) {
    if (!value) {
      this.unset('maxRoundingLoss');
    } else {
      this.set('maxRoundingLoss', Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save Order entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Order must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('Order', id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get('Order', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get marketId(): BigInt | null {
    let value = this.get('marketId');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set marketId(value: BigInt | null) {
    if (!value) {
      this.unset('marketId');
    } else {
      this.set('marketId', Value.fromBigInt(<BigInt>value));
    }
  }

  get amountProvided(): BigInt | null {
    let value = this.get('amountProvided');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountProvided(value: BigInt | null) {
    if (!value) {
      this.unset('amountProvided');
    } else {
      this.set('amountProvided', Value.fromBigInt(<BigInt>value));
    }
  }

  get asyncOrderId(): BigInt | null {
    let value = this.get('asyncOrderId');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set asyncOrderId(value: BigInt | null) {
    if (!value) {
      this.unset('asyncOrderId');
    } else {
      this.set('asyncOrderId', Value.fromBigInt(<BigInt>value));
    }
  }

  get orderType(): i32 {
    let value = this.get('orderType');
    return value!.toI32();
  }

  set orderType(value: i32) {
    this.set('orderType', Value.fromI32(value));
  }

  get referrer(): string | null {
    let value = this.get('referrer');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set referrer(value: string | null) {
    if (!value) {
      this.unset('referrer');
    } else {
      this.set('referrer', Value.fromString(<string>value));
    }
  }

  get finalOrderAmount(): BigInt | null {
    let value = this.get('finalOrderAmount');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set finalOrderAmount(value: BigInt | null) {
    if (!value) {
      this.unset('finalOrderAmount');
    } else {
      this.set('finalOrderAmount', Value.fromBigInt(<BigInt>value));
    }
  }

  get collectedFees(): BigInt | null {
    let value = this.get('collectedFees');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collectedFees(value: BigInt | null) {
    if (!value) {
      this.unset('collectedFees');
    } else {
      this.set('collectedFees', Value.fromBigInt(<BigInt>value));
    }
  }

  get settler(): string | null {
    let value = this.get('settler');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set settler(value: string | null) {
    if (!value) {
      this.unset('settler');
    } else {
      this.set('settler', Value.fromString(<string>value));
    }
  }

  get fixedFees(): BigInt | null {
    let value = this.get('fixedFees');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fixedFees(value: BigInt | null) {
    if (!value) {
      this.unset('fixedFees');
    } else {
      this.set('fixedFees', Value.fromBigInt(<BigInt>value));
    }
  }

  get skewFees(): BigInt | null {
    let value = this.get('skewFees');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set skewFees(value: BigInt | null) {
    if (!value) {
      this.unset('skewFees');
    } else {
      this.set('skewFees', Value.fromBigInt(<BigInt>value));
    }
  }

  get utilizationFees(): BigInt | null {
    let value = this.get('utilizationFees');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set utilizationFees(value: BigInt | null) {
    if (!value) {
      this.unset('utilizationFees');
    } else {
      this.set('utilizationFees', Value.fromBigInt(<BigInt>value));
    }
  }

  get wrapperFees(): BigInt | null {
    let value = this.get('wrapperFees');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set wrapperFees(value: BigInt | null) {
    if (!value) {
      this.unset('wrapperFees');
    } else {
      this.set('wrapperFees', Value.fromBigInt(<BigInt>value));
    }
  }

  get status(): string | null {
    let value = this.get('status');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset('status');
    } else {
      this.set('status', Value.fromString(<string>value));
    }
  }

  get owner(): string | null {
    let value = this.get('owner');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (!value) {
      this.unset('owner');
    } else {
      this.set('owner', Value.fromString(<string>value));
    }
  }

  get amountEscrowed(): BigInt | null {
    let value = this.get('amountEscrowed');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountEscrowed(value: BigInt | null) {
    if (!value) {
      this.unset('amountEscrowed');
    } else {
      this.set('amountEscrowed', Value.fromBigInt(<BigInt>value));
    }
  }

  get settlementStrategyId(): BigInt | null {
    let value = this.get('settlementStrategyId');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set settlementStrategyId(value: BigInt | null) {
    if (!value) {
      this.unset('settlementStrategyId');
    } else {
      this.set('settlementStrategyId', Value.fromBigInt(<BigInt>value));
    }
  }

  get settlementTime(): BigInt | null {
    let value = this.get('settlementTime');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set settlementTime(value: BigInt | null) {
    if (!value) {
      this.unset('settlementTime');
    } else {
      this.set('settlementTime', Value.fromBigInt(<BigInt>value));
    }
  }

  get minimumSettlementAmount(): BigInt | null {
    let value = this.get('minimumSettlementAmount');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minimumSettlementAmount(value: BigInt | null) {
    if (!value) {
      this.unset('minimumSettlementAmount');
    } else {
      this.set('minimumSettlementAmount', Value.fromBigInt(<BigInt>value));
    }
  }

  get settledAt(): BigInt | null {
    let value = this.get('settledAt');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set settledAt(value: BigInt | null) {
    if (!value) {
      this.unset('settledAt');
    } else {
      this.set('settledAt', Value.fromBigInt(<BigInt>value));
    }
  }

  get price(): BigInt | null {
    let value = this.get('price');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset('price');
    } else {
      this.set('price', Value.fromBigInt(<BigInt>value));
    }
  }

  get block(): BigInt {
    let value = this.get('block');
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set('block', Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get('timestamp');
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set('timestamp', Value.fromBigInt(value));
  }
}

export class MarketInfo extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save MarketInfo entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('MarketInfo', id.toString(), this);
    }
  }

  static load(id: string): MarketInfo | null {
    return changetype<MarketInfo | null>(store.get('MarketInfo', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get marketId(): BigInt {
    let value = this.get('marketId');
    return value!.toBigInt();
  }

  set marketId(value: BigInt) {
    this.set('marketId', Value.fromBigInt(value));
  }

  get buyFeedId(): Bytes | null {
    let value = this.get('buyFeedId');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set buyFeedId(value: Bytes | null) {
    if (!value) {
      this.unset('buyFeedId');
    } else {
      this.set('buyFeedId', Value.fromBytes(<Bytes>value));
    }
  }

  get sellFeedId(): Bytes | null {
    let value = this.get('sellFeedId');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sellFeedId(value: Bytes | null) {
    if (!value) {
      this.unset('sellFeedId');
    } else {
      this.set('sellFeedId', Value.fromBytes(<Bytes>value));
    }
  }
}

export class WrapSynth extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    let id = this.get('id');
    assert(id != null, 'Cannot save WrapSynth entity without an ID');
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WrapSynth must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set('WrapSynth', id.toString(), this);
    }
  }

  static load(id: string): WrapSynth | null {
    return changetype<WrapSynth | null>(store.get('WrapSynth', id));
  }

  get id(): string {
    let value = this.get('id');
    return value!.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get marketId(): BigInt | null {
    let value = this.get('marketId');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set marketId(value: BigInt | null) {
    if (!value) {
      this.unset('marketId');
    } else {
      this.set('marketId', Value.fromBigInt(<BigInt>value));
    }
  }

  get amount(): BigInt | null {
    let value = this.get('amount');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset('amount');
    } else {
      this.set('amount', Value.fromBigInt(<BigInt>value));
    }
  }

  get collectedFees(): BigInt | null {
    let value = this.get('collectedFees');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collectedFees(value: BigInt | null) {
    if (!value) {
      this.unset('collectedFees');
    } else {
      this.set('collectedFees', Value.fromBigInt(<BigInt>value));
    }
  }

  get wrapperFees(): BigInt | null {
    let value = this.get('wrapperFees');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set wrapperFees(value: BigInt | null) {
    if (!value) {
      this.unset('wrapperFees');
    } else {
      this.set('wrapperFees', Value.fromBigInt(<BigInt>value));
    }
  }

  get type(): string | null {
    let value = this.get('type');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset('type');
    } else {
      this.set('type', Value.fromString(<string>value));
    }
  }

  get block(): BigInt | null {
    let value = this.get('block');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (!value) {
      this.unset('block');
    } else {
      this.set('block', Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get('timestamp');
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset('timestamp');
    } else {
      this.set('timestamp', Value.fromBigInt(<BigInt>value));
    }
  }
}
