// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerNominated extends ethereum.Event {
  get params(): OwnerNominated__Params {
    return new OwnerNominated__Params(this);
  }
}

export class OwnerNominated__Params {
  _event: OwnerNominated;

  constructor(event: OwnerNominated) {
    this._event = event;
  }

  get newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get self(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get implementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AssociatedSystemSet extends ethereum.Event {
  get params(): AssociatedSystemSet__Params {
    return new AssociatedSystemSet__Params(this);
  }
}

export class AssociatedSystemSet__Params {
  _event: AssociatedSystemSet;

  constructor(event: AssociatedSystemSet) {
    this._event = event;
  }

  get kind(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get id(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get proxy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get impl(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class DecayRateUpdated extends ethereum.Event {
  get params(): DecayRateUpdated__Params {
    return new DecayRateUpdated__Params(this);
  }
}

export class DecayRateUpdated__Params {
  _event: DecayRateUpdated;

  constructor(event: DecayRateUpdated) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MarketNominationRenounced extends ethereum.Event {
  get params(): MarketNominationRenounced__Params {
    return new MarketNominationRenounced__Params(this);
  }
}

export class MarketNominationRenounced__Params {
  _event: MarketNominationRenounced;

  constructor(event: MarketNominationRenounced) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nominee(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MarketOwnerChanged extends ethereum.Event {
  get params(): MarketOwnerChanged__Params {
    return new MarketOwnerChanged__Params(this);
  }
}

export class MarketOwnerChanged__Params {
  _event: MarketOwnerChanged;

  constructor(event: MarketOwnerChanged) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class MarketOwnerNominated extends ethereum.Event {
  get params(): MarketOwnerNominated__Params {
    return new MarketOwnerNominated__Params(this);
  }
}

export class MarketOwnerNominated__Params {
  _event: MarketOwnerNominated;

  constructor(event: MarketOwnerNominated) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SynthImplementationSet extends ethereum.Event {
  get params(): SynthImplementationSet__Params {
    return new SynthImplementationSet__Params(this);
  }
}

export class SynthImplementationSet__Params {
  _event: SynthImplementationSet;

  constructor(event: SynthImplementationSet) {
    this._event = event;
  }

  get synthImplementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SynthImplementationUpgraded extends ethereum.Event {
  get params(): SynthImplementationUpgraded__Params {
    return new SynthImplementationUpgraded__Params(this);
  }
}

export class SynthImplementationUpgraded__Params {
  _event: SynthImplementationUpgraded;

  constructor(event: SynthImplementationUpgraded) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proxy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get implementation(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SynthPriceDataUpdated extends ethereum.Event {
  get params(): SynthPriceDataUpdated__Params {
    return new SynthPriceDataUpdated__Params(this);
  }
}

export class SynthPriceDataUpdated__Params {
  _event: SynthPriceDataUpdated;

  constructor(event: SynthPriceDataUpdated) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyFeedId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get sellFeedId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class SynthRegistered extends ethereum.Event {
  get params(): SynthRegistered__Params {
    return new SynthRegistered__Params(this);
  }
}

export class SynthRegistered__Params {
  _event: SynthRegistered;

  constructor(event: SynthRegistered) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get synthTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SynthetixSystemSet extends ethereum.Event {
  get params(): SynthetixSystemSet__Params {
    return new SynthetixSystemSet__Params(this);
  }
}

export class SynthetixSystemSet__Params {
  _event: SynthetixSystemSet;

  constructor(event: SynthetixSystemSet) {
    this._event = event;
  }

  get synthetix(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get usdTokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oracleManager(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SynthBought extends ethereum.Event {
  get params(): SynthBought__Params {
    return new SynthBought__Params(this);
  }
}

export class SynthBought__Params {
  _event: SynthBought;

  constructor(event: SynthBought) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get synthReturned(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fees(): SynthBoughtFeesStruct {
    return changetype<SynthBoughtFeesStruct>(this._event.parameters[2].value.toTuple());
  }

  get collectedFees(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get referrer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class SynthBoughtFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SynthSold extends ethereum.Event {
  get params(): SynthSold__Params {
    return new SynthSold__Params(this);
  }
}

export class SynthSold__Params {
  _event: SynthSold;

  constructor(event: SynthSold) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amountReturned(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fees(): SynthSoldFeesStruct {
    return changetype<SynthSoldFeesStruct>(this._event.parameters[2].value.toTuple());
  }

  get collectedFees(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get referrer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class SynthSoldFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class OrderCancelled extends ethereum.Event {
  get params(): OrderCancelled__Params {
    return new OrderCancelled__Params(this);
  }
}

export class OrderCancelled__Params {
  _event: OrderCancelled;

  constructor(event: OrderCancelled) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get asyncOrderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get asyncOrderClaim(): OrderCancelledAsyncOrderClaimStruct {
    return changetype<OrderCancelledAsyncOrderClaimStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }

  get sender(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OrderCancelledAsyncOrderClaimStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get orderType(): i32 {
    return this[2].toI32();
  }

  get amountEscrowed(): BigInt {
    return this[3].toBigInt();
  }

  get settlementStrategyId(): BigInt {
    return this[4].toBigInt();
  }

  get settlementTime(): BigInt {
    return this[5].toBigInt();
  }

  get minimumSettlementAmount(): BigInt {
    return this[6].toBigInt();
  }

  get settledAt(): BigInt {
    return this[7].toBigInt();
  }

  get referrer(): Address {
    return this[8].toAddress();
  }
}

export class OrderCommitted extends ethereum.Event {
  get params(): OrderCommitted__Params {
    return new OrderCommitted__Params(this);
  }
}

export class OrderCommitted__Params {
  _event: OrderCommitted;

  constructor(event: OrderCommitted) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get orderType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get amountProvided(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get asyncOrderId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get referrer(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class OrderSettled extends ethereum.Event {
  get params(): OrderSettled__Params {
    return new OrderSettled__Params(this);
  }
}

export class OrderSettled__Params {
  _event: OrderSettled;

  constructor(event: OrderSettled) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get asyncOrderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get finalOrderAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fees(): OrderSettledFeesStruct {
    return changetype<OrderSettledFeesStruct>(this._event.parameters[3].value.toTuple());
  }

  get collectedFees(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get settler(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get orderType(): i32 {
    return this._event.parameters[7].value.toI32();
  }
}

export class OrderSettledFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SettlementStrategyAdded extends ethereum.Event {
  get params(): SettlementStrategyAdded__Params {
    return new SettlementStrategyAdded__Params(this);
  }
}

export class SettlementStrategyAdded__Params {
  _event: SettlementStrategyAdded;

  constructor(event: SettlementStrategyAdded) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get strategyId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SettlementStrategyUpdated extends ethereum.Event {
  get params(): SettlementStrategyUpdated__Params {
    return new SettlementStrategyUpdated__Params(this);
  }
}

export class SettlementStrategyUpdated__Params {
  _event: SettlementStrategyUpdated;

  constructor(event: SettlementStrategyUpdated) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get strategyId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get enabled(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class SynthUnwrapped extends ethereum.Event {
  get params(): SynthUnwrapped__Params {
    return new SynthUnwrapped__Params(this);
  }
}

export class SynthUnwrapped__Params {
  _event: SynthUnwrapped;

  constructor(event: SynthUnwrapped) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amountUnwrapped(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fees(): SynthUnwrappedFeesStruct {
    return changetype<SynthUnwrappedFeesStruct>(this._event.parameters[2].value.toTuple());
  }

  get feesCollected(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SynthUnwrappedFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SynthWrapped extends ethereum.Event {
  get params(): SynthWrapped__Params {
    return new SynthWrapped__Params(this);
  }
}

export class SynthWrapped__Params {
  _event: SynthWrapped;

  constructor(event: SynthWrapped) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amountWrapped(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fees(): SynthWrappedFeesStruct {
    return changetype<SynthWrappedFeesStruct>(this._event.parameters[2].value.toTuple());
  }

  get feesCollected(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SynthWrappedFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class WrapperSet extends ethereum.Event {
  get params(): WrapperSet__Params {
    return new WrapperSet__Params(this);
  }
}

export class WrapperSet__Params {
  _event: WrapperSet;

  constructor(event: WrapperSet) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get wrapCollateralType(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get maxWrappableAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AsyncFixedFeeSet extends ethereum.Event {
  get params(): AsyncFixedFeeSet__Params {
    return new AsyncFixedFeeSet__Params(this);
  }
}

export class AsyncFixedFeeSet__Params {
  _event: AsyncFixedFeeSet;

  constructor(event: AsyncFixedFeeSet) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get asyncFixedFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AtomicFixedFeeSet extends ethereum.Event {
  get params(): AtomicFixedFeeSet__Params {
    return new AtomicFixedFeeSet__Params(this);
  }
}

export class AtomicFixedFeeSet__Params {
  _event: AtomicFixedFeeSet;

  constructor(event: AtomicFixedFeeSet) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get atomicFixedFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class CollateralLeverageSet extends ethereum.Event {
  get params(): CollateralLeverageSet__Params {
    return new CollateralLeverageSet__Params(this);
  }
}

export class CollateralLeverageSet__Params {
  _event: CollateralLeverageSet;

  constructor(event: CollateralLeverageSet) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collateralLeverage(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FeeCollectorSet extends ethereum.Event {
  get params(): FeeCollectorSet__Params {
    return new FeeCollectorSet__Params(this);
  }
}

export class FeeCollectorSet__Params {
  _event: FeeCollectorSet;

  constructor(event: FeeCollectorSet) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feeCollector(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MarketSkewScaleSet extends ethereum.Event {
  get params(): MarketSkewScaleSet__Params {
    return new MarketSkewScaleSet__Params(this);
  }
}

export class MarketSkewScaleSet__Params {
  _event: MarketSkewScaleSet;

  constructor(event: MarketSkewScaleSet) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get skewScale(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MarketUtilizationFeesSet extends ethereum.Event {
  get params(): MarketUtilizationFeesSet__Params {
    return new MarketUtilizationFeesSet__Params(this);
  }
}

export class MarketUtilizationFeesSet__Params {
  _event: MarketUtilizationFeesSet;

  constructor(event: MarketUtilizationFeesSet) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get utilizationFeeRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReferrerShareUpdated extends ethereum.Event {
  get params(): ReferrerShareUpdated__Params {
    return new ReferrerShareUpdated__Params(this);
  }
}

export class ReferrerShareUpdated__Params {
  _event: ReferrerShareUpdated;

  constructor(event: ReferrerShareUpdated) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get referrer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sharePercentage(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransactorFixedFeeSet extends ethereum.Event {
  get params(): TransactorFixedFeeSet__Params {
    return new TransactorFixedFeeSet__Params(this);
  }
}

export class TransactorFixedFeeSet__Params {
  _event: TransactorFixedFeeSet;

  constructor(event: TransactorFixedFeeSet) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get transactor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fixedFeeAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WrapperFeesSet extends ethereum.Event {
  get params(): WrapperFeesSet__Params {
    return new WrapperFeesSet__Params(this);
  }
}

export class WrapperFeesSet__Params {
  _event: WrapperFeesSet;

  constructor(event: WrapperFeesSet) {
    this._event = event;
  }

  get synthMarketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get wrapFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get unwrapFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeatureFlagAllowAllSet extends ethereum.Event {
  get params(): FeatureFlagAllowAllSet__Params {
    return new FeatureFlagAllowAllSet__Params(this);
  }
}

export class FeatureFlagAllowAllSet__Params {
  _event: FeatureFlagAllowAllSet;

  constructor(event: FeatureFlagAllowAllSet) {
    this._event = event;
  }

  get feature(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get allowAll(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class FeatureFlagAllowlistAdded extends ethereum.Event {
  get params(): FeatureFlagAllowlistAdded__Params {
    return new FeatureFlagAllowlistAdded__Params(this);
  }
}

export class FeatureFlagAllowlistAdded__Params {
  _event: FeatureFlagAllowlistAdded;

  constructor(event: FeatureFlagAllowlistAdded) {
    this._event = event;
  }

  get feature(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FeatureFlagAllowlistRemoved extends ethereum.Event {
  get params(): FeatureFlagAllowlistRemoved__Params {
    return new FeatureFlagAllowlistRemoved__Params(this);
  }
}

export class FeatureFlagAllowlistRemoved__Params {
  _event: FeatureFlagAllowlistRemoved;

  constructor(event: FeatureFlagAllowlistRemoved) {
    this._event = event;
  }

  get feature(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FeatureFlagDeniersReset extends ethereum.Event {
  get params(): FeatureFlagDeniersReset__Params {
    return new FeatureFlagDeniersReset__Params(this);
  }
}

export class FeatureFlagDeniersReset__Params {
  _event: FeatureFlagDeniersReset;

  constructor(event: FeatureFlagDeniersReset) {
    this._event = event;
  }

  get feature(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get deniers(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class FeatureFlagDenyAllSet extends ethereum.Event {
  get params(): FeatureFlagDenyAllSet__Params {
    return new FeatureFlagDenyAllSet__Params(this);
  }
}

export class FeatureFlagDenyAllSet__Params {
  _event: FeatureFlagDenyAllSet;

  constructor(event: FeatureFlagDenyAllSet) {
    this._event = event;
  }

  get feature(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get denyAll(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SpotMarketProxy__getAssociatedSystemResult {
  value0: Address;
  value1: Bytes;

  constructor(value0: Address, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromAddress(this.value0));
    map.set('value1', ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }

  getAddr(): Address {
    return this.value0;
  }

  getKind(): Bytes {
    return this.value1;
  }
}

export class SpotMarketProxy__buyResultFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SpotMarketProxy__buyResult {
  value0: BigInt;
  value1: SpotMarketProxy__buyResultFeesStruct;

  constructor(value0: BigInt, value1: SpotMarketProxy__buyResultFeesStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getSynthAmount(): BigInt {
    return this.value0;
  }

  getFees(): SpotMarketProxy__buyResultFeesStruct {
    return this.value1;
  }
}

export class SpotMarketProxy__buyExactInResultFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SpotMarketProxy__buyExactInResult {
  value0: BigInt;
  value1: SpotMarketProxy__buyExactInResultFeesStruct;

  constructor(value0: BigInt, value1: SpotMarketProxy__buyExactInResultFeesStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getSynthAmount(): BigInt {
    return this.value0;
  }

  getFees(): SpotMarketProxy__buyExactInResultFeesStruct {
    return this.value1;
  }
}

export class SpotMarketProxy__buyExactOutResultFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SpotMarketProxy__buyExactOutResult {
  value0: BigInt;
  value1: SpotMarketProxy__buyExactOutResultFeesStruct;

  constructor(value0: BigInt, value1: SpotMarketProxy__buyExactOutResultFeesStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getUsdAmountCharged(): BigInt {
    return this.value0;
  }

  getFees(): SpotMarketProxy__buyExactOutResultFeesStruct {
    return this.value1;
  }
}

export class SpotMarketProxy__quoteBuyExactInResultFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SpotMarketProxy__quoteBuyExactInResult {
  value0: BigInt;
  value1: SpotMarketProxy__quoteBuyExactInResultFeesStruct;

  constructor(value0: BigInt, value1: SpotMarketProxy__quoteBuyExactInResultFeesStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getSynthAmount(): BigInt {
    return this.value0;
  }

  getFees(): SpotMarketProxy__quoteBuyExactInResultFeesStruct {
    return this.value1;
  }
}

export class SpotMarketProxy__quoteBuyExactOutResultFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SpotMarketProxy__quoteBuyExactOutResult {
  value0: BigInt;
  value1: SpotMarketProxy__quoteBuyExactOutResultFeesStruct;

  constructor(value0: BigInt, value1: SpotMarketProxy__quoteBuyExactOutResultFeesStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getUsdAmountCharged(): BigInt {
    return this.value0;
  }

  getFees(): SpotMarketProxy__quoteBuyExactOutResultFeesStruct {
    return this.value1;
  }
}

export class SpotMarketProxy__quoteSellExactInResultFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SpotMarketProxy__quoteSellExactInResult {
  value0: BigInt;
  value1: SpotMarketProxy__quoteSellExactInResultFeesStruct;

  constructor(value0: BigInt, value1: SpotMarketProxy__quoteSellExactInResultFeesStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getReturnAmount(): BigInt {
    return this.value0;
  }

  getFees(): SpotMarketProxy__quoteSellExactInResultFeesStruct {
    return this.value1;
  }
}

export class SpotMarketProxy__quoteSellExactOutResultFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SpotMarketProxy__quoteSellExactOutResult {
  value0: BigInt;
  value1: SpotMarketProxy__quoteSellExactOutResultFeesStruct;

  constructor(value0: BigInt, value1: SpotMarketProxy__quoteSellExactOutResultFeesStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getSynthToBurn(): BigInt {
    return this.value0;
  }

  getFees(): SpotMarketProxy__quoteSellExactOutResultFeesStruct {
    return this.value1;
  }
}

export class SpotMarketProxy__sellResultFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SpotMarketProxy__sellResult {
  value0: BigInt;
  value1: SpotMarketProxy__sellResultFeesStruct;

  constructor(value0: BigInt, value1: SpotMarketProxy__sellResultFeesStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getUsdAmountReceived(): BigInt {
    return this.value0;
  }

  getFees(): SpotMarketProxy__sellResultFeesStruct {
    return this.value1;
  }
}

export class SpotMarketProxy__sellExactInResultFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SpotMarketProxy__sellExactInResult {
  value0: BigInt;
  value1: SpotMarketProxy__sellExactInResultFeesStruct;

  constructor(value0: BigInt, value1: SpotMarketProxy__sellExactInResultFeesStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getReturnAmount(): BigInt {
    return this.value0;
  }

  getFees(): SpotMarketProxy__sellExactInResultFeesStruct {
    return this.value1;
  }
}

export class SpotMarketProxy__sellExactOutResultFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SpotMarketProxy__sellExactOutResult {
  value0: BigInt;
  value1: SpotMarketProxy__sellExactOutResultFeesStruct;

  constructor(value0: BigInt, value1: SpotMarketProxy__sellExactOutResultFeesStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getSynthToBurn(): BigInt {
    return this.value0;
  }

  getFees(): SpotMarketProxy__sellExactOutResultFeesStruct {
    return this.value1;
  }
}

export class SpotMarketProxy__commitOrderResultAsyncOrderClaimStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get orderType(): i32 {
    return this[2].toI32();
  }

  get amountEscrowed(): BigInt {
    return this[3].toBigInt();
  }

  get settlementStrategyId(): BigInt {
    return this[4].toBigInt();
  }

  get settlementTime(): BigInt {
    return this[5].toBigInt();
  }

  get minimumSettlementAmount(): BigInt {
    return this[6].toBigInt();
  }

  get settledAt(): BigInt {
    return this[7].toBigInt();
  }

  get referrer(): Address {
    return this[8].toAddress();
  }
}

export class SpotMarketProxy__getAsyncOrderClaimResultAsyncOrderClaimStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get orderType(): i32 {
    return this[2].toI32();
  }

  get amountEscrowed(): BigInt {
    return this[3].toBigInt();
  }

  get settlementStrategyId(): BigInt {
    return this[4].toBigInt();
  }

  get settlementTime(): BigInt {
    return this[5].toBigInt();
  }

  get minimumSettlementAmount(): BigInt {
    return this[6].toBigInt();
  }

  get settledAt(): BigInt {
    return this[7].toBigInt();
  }

  get referrer(): Address {
    return this[8].toAddress();
  }
}

export class SpotMarketProxy__settleOrderResultFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SpotMarketProxy__settleOrderResult {
  value0: BigInt;
  value1: SpotMarketProxy__settleOrderResultFeesStruct;

  constructor(value0: BigInt, value1: SpotMarketProxy__settleOrderResultFeesStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getFinalOrderAmount(): BigInt {
    return this.value0;
  }

  getFees(): SpotMarketProxy__settleOrderResultFeesStruct {
    return this.value1;
  }
}

export class SpotMarketProxy__addSettlementStrategyInputStrategyStruct extends ethereum.Tuple {
  get strategyType(): i32 {
    return this[0].toI32();
  }

  get settlementDelay(): BigInt {
    return this[1].toBigInt();
  }

  get settlementWindowDuration(): BigInt {
    return this[2].toBigInt();
  }

  get priceVerificationContract(): Address {
    return this[3].toAddress();
  }

  get feedId(): Bytes {
    return this[4].toBytes();
  }

  get url(): string {
    return this[5].toString();
  }

  get settlementReward(): BigInt {
    return this[6].toBigInt();
  }

  get priceDeviationTolerance(): BigInt {
    return this[7].toBigInt();
  }

  get minimumUsdExchangeAmount(): BigInt {
    return this[8].toBigInt();
  }

  get maxRoundingLoss(): BigInt {
    return this[9].toBigInt();
  }

  get disabled(): boolean {
    return this[10].toBoolean();
  }
}

export class SpotMarketProxy__getSettlementStrategyResultSettlementStrategyStruct extends ethereum.Tuple {
  get strategyType(): i32 {
    return this[0].toI32();
  }

  get settlementDelay(): BigInt {
    return this[1].toBigInt();
  }

  get settlementWindowDuration(): BigInt {
    return this[2].toBigInt();
  }

  get priceVerificationContract(): Address {
    return this[3].toAddress();
  }

  get feedId(): Bytes {
    return this[4].toBytes();
  }

  get url(): string {
    return this[5].toString();
  }

  get settlementReward(): BigInt {
    return this[6].toBigInt();
  }

  get priceDeviationTolerance(): BigInt {
    return this[7].toBigInt();
  }

  get minimumUsdExchangeAmount(): BigInt {
    return this[8].toBigInt();
  }

  get maxRoundingLoss(): BigInt {
    return this[9].toBigInt();
  }

  get disabled(): boolean {
    return this[10].toBoolean();
  }
}

export class SpotMarketProxy__unwrapResultFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SpotMarketProxy__unwrapResult {
  value0: BigInt;
  value1: SpotMarketProxy__unwrapResultFeesStruct;

  constructor(value0: BigInt, value1: SpotMarketProxy__unwrapResultFeesStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getReturnCollateralAmount(): BigInt {
    return this.value0;
  }

  getFees(): SpotMarketProxy__unwrapResultFeesStruct {
    return this.value1;
  }
}

export class SpotMarketProxy__wrapResultFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SpotMarketProxy__wrapResult {
  value0: BigInt;
  value1: SpotMarketProxy__wrapResultFeesStruct;

  constructor(value0: BigInt, value1: SpotMarketProxy__wrapResultFeesStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getAmountToMint(): BigInt {
    return this.value0;
  }

  getFees(): SpotMarketProxy__wrapResultFeesStruct {
    return this.value1;
  }
}

export class SpotMarketProxy__getMarketFeesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set('value2', ethereum.Value.fromSignedBigInt(this.value2));
    map.set('value3', ethereum.Value.fromSignedBigInt(this.value3));
    return map;
  }

  getAtomicFixedFee(): BigInt {
    return this.value0;
  }

  getAsyncFixedFee(): BigInt {
    return this.value1;
  }

  getWrapFee(): BigInt {
    return this.value2;
  }

  getUnwrapFee(): BigInt {
    return this.value3;
  }
}

export class SpotMarketProxy extends ethereum.SmartContract {
  static bind(address: Address): SpotMarketProxy {
    return new SpotMarketProxy('SpotMarketProxy', address);
  }

  getImplementation(): Address {
    let result = super.call('getImplementation', 'getImplementation():(address)', []);

    return result[0].toAddress();
  }

  try_getImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall('getImplementation', 'getImplementation():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nominatedOwner(): Address {
    let result = super.call('nominatedOwner', 'nominatedOwner():(address)', []);

    return result[0].toAddress();
  }

  try_nominatedOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall('nominatedOwner', 'nominatedOwner():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call('owner', 'owner():(address)', []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall('owner', 'owner():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createSynth(tokenName: string, tokenSymbol: string, synthOwner: Address): BigInt {
    let result = super.call('createSynth', 'createSynth(string,string,address):(uint128)', [
      ethereum.Value.fromString(tokenName),
      ethereum.Value.fromString(tokenSymbol),
      ethereum.Value.fromAddress(synthOwner),
    ]);

    return result[0].toBigInt();
  }

  try_createSynth(
    tokenName: string,
    tokenSymbol: string,
    synthOwner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall('createSynth', 'createSynth(string,string,address):(uint128)', [
      ethereum.Value.fromString(tokenName),
      ethereum.Value.fromString(tokenSymbol),
      ethereum.Value.fromAddress(synthOwner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAssociatedSystem(id: Bytes): SpotMarketProxy__getAssociatedSystemResult {
    let result = super.call(
      'getAssociatedSystem',
      'getAssociatedSystem(bytes32):(address,bytes32)',
      [ethereum.Value.fromFixedBytes(id)]
    );

    return new SpotMarketProxy__getAssociatedSystemResult(
      result[0].toAddress(),
      result[1].toBytes()
    );
  }

  try_getAssociatedSystem(
    id: Bytes
  ): ethereum.CallResult<SpotMarketProxy__getAssociatedSystemResult> {
    let result = super.tryCall(
      'getAssociatedSystem',
      'getAssociatedSystem(bytes32):(address,bytes32)',
      [ethereum.Value.fromFixedBytes(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__getAssociatedSystemResult(value[0].toAddress(), value[1].toBytes())
    );
  }

  getMarketOwner(synthMarketId: BigInt): Address {
    let result = super.call('getMarketOwner', 'getMarketOwner(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(synthMarketId),
    ]);

    return result[0].toAddress();
  }

  try_getMarketOwner(synthMarketId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall('getMarketOwner', 'getMarketOwner(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(synthMarketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSynth(marketId: BigInt): Address {
    let result = super.call('getSynth', 'getSynth(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toAddress();
  }

  try_getSynth(marketId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall('getSynth', 'getSynth(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSynthImpl(marketId: BigInt): Address {
    let result = super.call('getSynthImpl', 'getSynthImpl(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toAddress();
  }

  try_getSynthImpl(marketId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall('getSynthImpl', 'getSynthImpl(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minimumCredit(marketId: BigInt): BigInt {
    let result = super.call('minimumCredit', 'minimumCredit(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_minimumCredit(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('minimumCredit', 'minimumCredit(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(marketId: BigInt): string {
    let result = super.call('name', 'name(uint128):(string)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toString();
  }

  try_name(marketId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall('name', 'name(uint128):(string)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  reportedDebt(marketId: BigInt): BigInt {
    let result = super.call('reportedDebt', 'reportedDebt(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);

    return result[0].toBigInt();
  }

  try_reportedDebt(marketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('reportedDebt', 'reportedDebt(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(marketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call('supportsInterface', 'supportsInterface(bytes4):(bool)', [
      ethereum.Value.fromFixedBytes(interfaceId),
    ]);

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall('supportsInterface', 'supportsInterface(bytes4):(bool)', [
      ethereum.Value.fromFixedBytes(interfaceId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  buy(
    marketId: BigInt,
    usdAmount: BigInt,
    minAmountReceived: BigInt,
    referrer: Address
  ): SpotMarketProxy__buyResult {
    let result = super.call(
      'buy',
      'buy(uint128,uint256,uint256,address):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(usdAmount),
        ethereum.Value.fromUnsignedBigInt(minAmountReceived),
        ethereum.Value.fromAddress(referrer),
      ]
    );

    return new SpotMarketProxy__buyResult(
      result[0].toBigInt(),
      changetype<SpotMarketProxy__buyResultFeesStruct>(result[1].toTuple())
    );
  }

  try_buy(
    marketId: BigInt,
    usdAmount: BigInt,
    minAmountReceived: BigInt,
    referrer: Address
  ): ethereum.CallResult<SpotMarketProxy__buyResult> {
    let result = super.tryCall(
      'buy',
      'buy(uint128,uint256,uint256,address):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(usdAmount),
        ethereum.Value.fromUnsignedBigInt(minAmountReceived),
        ethereum.Value.fromAddress(referrer),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__buyResult(
        value[0].toBigInt(),
        changetype<SpotMarketProxy__buyResultFeesStruct>(value[1].toTuple())
      )
    );
  }

  buyExactIn(
    marketId: BigInt,
    usdAmount: BigInt,
    minAmountReceived: BigInt,
    referrer: Address
  ): SpotMarketProxy__buyExactInResult {
    let result = super.call(
      'buyExactIn',
      'buyExactIn(uint128,uint256,uint256,address):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(usdAmount),
        ethereum.Value.fromUnsignedBigInt(minAmountReceived),
        ethereum.Value.fromAddress(referrer),
      ]
    );

    return new SpotMarketProxy__buyExactInResult(
      result[0].toBigInt(),
      changetype<SpotMarketProxy__buyExactInResultFeesStruct>(result[1].toTuple())
    );
  }

  try_buyExactIn(
    marketId: BigInt,
    usdAmount: BigInt,
    minAmountReceived: BigInt,
    referrer: Address
  ): ethereum.CallResult<SpotMarketProxy__buyExactInResult> {
    let result = super.tryCall(
      'buyExactIn',
      'buyExactIn(uint128,uint256,uint256,address):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(usdAmount),
        ethereum.Value.fromUnsignedBigInt(minAmountReceived),
        ethereum.Value.fromAddress(referrer),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__buyExactInResult(
        value[0].toBigInt(),
        changetype<SpotMarketProxy__buyExactInResultFeesStruct>(value[1].toTuple())
      )
    );
  }

  buyExactOut(
    marketId: BigInt,
    synthAmount: BigInt,
    maxUsdAmount: BigInt,
    referrer: Address
  ): SpotMarketProxy__buyExactOutResult {
    let result = super.call(
      'buyExactOut',
      'buyExactOut(uint128,uint256,uint256,address):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(synthAmount),
        ethereum.Value.fromUnsignedBigInt(maxUsdAmount),
        ethereum.Value.fromAddress(referrer),
      ]
    );

    return new SpotMarketProxy__buyExactOutResult(
      result[0].toBigInt(),
      changetype<SpotMarketProxy__buyExactOutResultFeesStruct>(result[1].toTuple())
    );
  }

  try_buyExactOut(
    marketId: BigInt,
    synthAmount: BigInt,
    maxUsdAmount: BigInt,
    referrer: Address
  ): ethereum.CallResult<SpotMarketProxy__buyExactOutResult> {
    let result = super.tryCall(
      'buyExactOut',
      'buyExactOut(uint128,uint256,uint256,address):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(synthAmount),
        ethereum.Value.fromUnsignedBigInt(maxUsdAmount),
        ethereum.Value.fromAddress(referrer),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__buyExactOutResult(
        value[0].toBigInt(),
        changetype<SpotMarketProxy__buyExactOutResultFeesStruct>(value[1].toTuple())
      )
    );
  }

  quoteBuyExactIn(marketId: BigInt, usdAmount: BigInt): SpotMarketProxy__quoteBuyExactInResult {
    let result = super.call(
      'quoteBuyExactIn',
      'quoteBuyExactIn(uint128,uint256):(uint256,(uint256,uint256,int256,int256))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(usdAmount)]
    );

    return new SpotMarketProxy__quoteBuyExactInResult(
      result[0].toBigInt(),
      changetype<SpotMarketProxy__quoteBuyExactInResultFeesStruct>(result[1].toTuple())
    );
  }

  try_quoteBuyExactIn(
    marketId: BigInt,
    usdAmount: BigInt
  ): ethereum.CallResult<SpotMarketProxy__quoteBuyExactInResult> {
    let result = super.tryCall(
      'quoteBuyExactIn',
      'quoteBuyExactIn(uint128,uint256):(uint256,(uint256,uint256,int256,int256))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(usdAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__quoteBuyExactInResult(
        value[0].toBigInt(),
        changetype<SpotMarketProxy__quoteBuyExactInResultFeesStruct>(value[1].toTuple())
      )
    );
  }

  quoteBuyExactOut(marketId: BigInt, synthAmount: BigInt): SpotMarketProxy__quoteBuyExactOutResult {
    let result = super.call(
      'quoteBuyExactOut',
      'quoteBuyExactOut(uint128,uint256):(uint256,(uint256,uint256,int256,int256))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(synthAmount)]
    );

    return new SpotMarketProxy__quoteBuyExactOutResult(
      result[0].toBigInt(),
      changetype<SpotMarketProxy__quoteBuyExactOutResultFeesStruct>(result[1].toTuple())
    );
  }

  try_quoteBuyExactOut(
    marketId: BigInt,
    synthAmount: BigInt
  ): ethereum.CallResult<SpotMarketProxy__quoteBuyExactOutResult> {
    let result = super.tryCall(
      'quoteBuyExactOut',
      'quoteBuyExactOut(uint128,uint256):(uint256,(uint256,uint256,int256,int256))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(synthAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__quoteBuyExactOutResult(
        value[0].toBigInt(),
        changetype<SpotMarketProxy__quoteBuyExactOutResultFeesStruct>(value[1].toTuple())
      )
    );
  }

  quoteSellExactIn(marketId: BigInt, synthAmount: BigInt): SpotMarketProxy__quoteSellExactInResult {
    let result = super.call(
      'quoteSellExactIn',
      'quoteSellExactIn(uint128,uint256):(uint256,(uint256,uint256,int256,int256))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(synthAmount)]
    );

    return new SpotMarketProxy__quoteSellExactInResult(
      result[0].toBigInt(),
      changetype<SpotMarketProxy__quoteSellExactInResultFeesStruct>(result[1].toTuple())
    );
  }

  try_quoteSellExactIn(
    marketId: BigInt,
    synthAmount: BigInt
  ): ethereum.CallResult<SpotMarketProxy__quoteSellExactInResult> {
    let result = super.tryCall(
      'quoteSellExactIn',
      'quoteSellExactIn(uint128,uint256):(uint256,(uint256,uint256,int256,int256))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(synthAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__quoteSellExactInResult(
        value[0].toBigInt(),
        changetype<SpotMarketProxy__quoteSellExactInResultFeesStruct>(value[1].toTuple())
      )
    );
  }

  quoteSellExactOut(marketId: BigInt, usdAmount: BigInt): SpotMarketProxy__quoteSellExactOutResult {
    let result = super.call(
      'quoteSellExactOut',
      'quoteSellExactOut(uint128,uint256):(uint256,(uint256,uint256,int256,int256))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(usdAmount)]
    );

    return new SpotMarketProxy__quoteSellExactOutResult(
      result[0].toBigInt(),
      changetype<SpotMarketProxy__quoteSellExactOutResultFeesStruct>(result[1].toTuple())
    );
  }

  try_quoteSellExactOut(
    marketId: BigInt,
    usdAmount: BigInt
  ): ethereum.CallResult<SpotMarketProxy__quoteSellExactOutResult> {
    let result = super.tryCall(
      'quoteSellExactOut',
      'quoteSellExactOut(uint128,uint256):(uint256,(uint256,uint256,int256,int256))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(usdAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__quoteSellExactOutResult(
        value[0].toBigInt(),
        changetype<SpotMarketProxy__quoteSellExactOutResultFeesStruct>(value[1].toTuple())
      )
    );
  }

  sell(
    marketId: BigInt,
    synthAmount: BigInt,
    minUsdAmount: BigInt,
    referrer: Address
  ): SpotMarketProxy__sellResult {
    let result = super.call(
      'sell',
      'sell(uint128,uint256,uint256,address):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(synthAmount),
        ethereum.Value.fromUnsignedBigInt(minUsdAmount),
        ethereum.Value.fromAddress(referrer),
      ]
    );

    return new SpotMarketProxy__sellResult(
      result[0].toBigInt(),
      changetype<SpotMarketProxy__sellResultFeesStruct>(result[1].toTuple())
    );
  }

  try_sell(
    marketId: BigInt,
    synthAmount: BigInt,
    minUsdAmount: BigInt,
    referrer: Address
  ): ethereum.CallResult<SpotMarketProxy__sellResult> {
    let result = super.tryCall(
      'sell',
      'sell(uint128,uint256,uint256,address):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(synthAmount),
        ethereum.Value.fromUnsignedBigInt(minUsdAmount),
        ethereum.Value.fromAddress(referrer),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__sellResult(
        value[0].toBigInt(),
        changetype<SpotMarketProxy__sellResultFeesStruct>(value[1].toTuple())
      )
    );
  }

  sellExactIn(
    marketId: BigInt,
    synthAmount: BigInt,
    minAmountReceived: BigInt,
    referrer: Address
  ): SpotMarketProxy__sellExactInResult {
    let result = super.call(
      'sellExactIn',
      'sellExactIn(uint128,uint256,uint256,address):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(synthAmount),
        ethereum.Value.fromUnsignedBigInt(minAmountReceived),
        ethereum.Value.fromAddress(referrer),
      ]
    );

    return new SpotMarketProxy__sellExactInResult(
      result[0].toBigInt(),
      changetype<SpotMarketProxy__sellExactInResultFeesStruct>(result[1].toTuple())
    );
  }

  try_sellExactIn(
    marketId: BigInt,
    synthAmount: BigInt,
    minAmountReceived: BigInt,
    referrer: Address
  ): ethereum.CallResult<SpotMarketProxy__sellExactInResult> {
    let result = super.tryCall(
      'sellExactIn',
      'sellExactIn(uint128,uint256,uint256,address):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(synthAmount),
        ethereum.Value.fromUnsignedBigInt(minAmountReceived),
        ethereum.Value.fromAddress(referrer),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__sellExactInResult(
        value[0].toBigInt(),
        changetype<SpotMarketProxy__sellExactInResultFeesStruct>(value[1].toTuple())
      )
    );
  }

  sellExactOut(
    marketId: BigInt,
    usdAmount: BigInt,
    maxSynthAmount: BigInt,
    referrer: Address
  ): SpotMarketProxy__sellExactOutResult {
    let result = super.call(
      'sellExactOut',
      'sellExactOut(uint128,uint256,uint256,address):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(usdAmount),
        ethereum.Value.fromUnsignedBigInt(maxSynthAmount),
        ethereum.Value.fromAddress(referrer),
      ]
    );

    return new SpotMarketProxy__sellExactOutResult(
      result[0].toBigInt(),
      changetype<SpotMarketProxy__sellExactOutResultFeesStruct>(result[1].toTuple())
    );
  }

  try_sellExactOut(
    marketId: BigInt,
    usdAmount: BigInt,
    maxSynthAmount: BigInt,
    referrer: Address
  ): ethereum.CallResult<SpotMarketProxy__sellExactOutResult> {
    let result = super.tryCall(
      'sellExactOut',
      'sellExactOut(uint128,uint256,uint256,address):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(usdAmount),
        ethereum.Value.fromUnsignedBigInt(maxSynthAmount),
        ethereum.Value.fromAddress(referrer),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__sellExactOutResult(
        value[0].toBigInt(),
        changetype<SpotMarketProxy__sellExactOutResultFeesStruct>(value[1].toTuple())
      )
    );
  }

  commitOrder(
    marketId: BigInt,
    orderType: i32,
    amountProvided: BigInt,
    settlementStrategyId: BigInt,
    minimumSettlementAmount: BigInt,
    referrer: Address
  ): SpotMarketProxy__commitOrderResultAsyncOrderClaimStruct {
    let result = super.call(
      'commitOrder',
      'commitOrder(uint128,uint8,uint256,uint256,uint256,address):((uint128,address,uint8,uint256,uint256,uint256,uint256,uint256,address))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(orderType)),
        ethereum.Value.fromUnsignedBigInt(amountProvided),
        ethereum.Value.fromUnsignedBigInt(settlementStrategyId),
        ethereum.Value.fromUnsignedBigInt(minimumSettlementAmount),
        ethereum.Value.fromAddress(referrer),
      ]
    );

    return changetype<SpotMarketProxy__commitOrderResultAsyncOrderClaimStruct>(result[0].toTuple());
  }

  try_commitOrder(
    marketId: BigInt,
    orderType: i32,
    amountProvided: BigInt,
    settlementStrategyId: BigInt,
    minimumSettlementAmount: BigInt,
    referrer: Address
  ): ethereum.CallResult<SpotMarketProxy__commitOrderResultAsyncOrderClaimStruct> {
    let result = super.tryCall(
      'commitOrder',
      'commitOrder(uint128,uint8,uint256,uint256,uint256,address):((uint128,address,uint8,uint256,uint256,uint256,uint256,uint256,address))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(orderType)),
        ethereum.Value.fromUnsignedBigInt(amountProvided),
        ethereum.Value.fromUnsignedBigInt(settlementStrategyId),
        ethereum.Value.fromUnsignedBigInt(minimumSettlementAmount),
        ethereum.Value.fromAddress(referrer),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SpotMarketProxy__commitOrderResultAsyncOrderClaimStruct>(value[0].toTuple())
    );
  }

  getAsyncOrderClaim(
    marketId: BigInt,
    asyncOrderId: BigInt
  ): SpotMarketProxy__getAsyncOrderClaimResultAsyncOrderClaimStruct {
    let result = super.call(
      'getAsyncOrderClaim',
      'getAsyncOrderClaim(uint128,uint128):((uint128,address,uint8,uint256,uint256,uint256,uint256,uint256,address))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(asyncOrderId)]
    );

    return changetype<SpotMarketProxy__getAsyncOrderClaimResultAsyncOrderClaimStruct>(
      result[0].toTuple()
    );
  }

  try_getAsyncOrderClaim(
    marketId: BigInt,
    asyncOrderId: BigInt
  ): ethereum.CallResult<SpotMarketProxy__getAsyncOrderClaimResultAsyncOrderClaimStruct> {
    let result = super.tryCall(
      'getAsyncOrderClaim',
      'getAsyncOrderClaim(uint128,uint128):((uint128,address,uint8,uint256,uint256,uint256,uint256,uint256,address))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(asyncOrderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SpotMarketProxy__getAsyncOrderClaimResultAsyncOrderClaimStruct>(value[0].toTuple())
    );
  }

  PRECISION(): BigInt {
    let result = super.call('PRECISION', 'PRECISION():(int256)', []);

    return result[0].toBigInt();
  }

  try_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('PRECISION', 'PRECISION():(int256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settleOrder(marketId: BigInt, asyncOrderId: BigInt): SpotMarketProxy__settleOrderResult {
    let result = super.call(
      'settleOrder',
      'settleOrder(uint128,uint128):(uint256,(uint256,uint256,int256,int256))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(asyncOrderId)]
    );

    return new SpotMarketProxy__settleOrderResult(
      result[0].toBigInt(),
      changetype<SpotMarketProxy__settleOrderResultFeesStruct>(result[1].toTuple())
    );
  }

  try_settleOrder(
    marketId: BigInt,
    asyncOrderId: BigInt
  ): ethereum.CallResult<SpotMarketProxy__settleOrderResult> {
    let result = super.tryCall(
      'settleOrder',
      'settleOrder(uint128,uint128):(uint256,(uint256,uint256,int256,int256))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(asyncOrderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__settleOrderResult(
        value[0].toBigInt(),
        changetype<SpotMarketProxy__settleOrderResultFeesStruct>(value[1].toTuple())
      )
    );
  }

  addSettlementStrategy(
    marketId: BigInt,
    strategy: SpotMarketProxy__addSettlementStrategyInputStrategyStruct
  ): BigInt {
    let result = super.call(
      'addSettlementStrategy',
      'addSettlementStrategy(uint128,(uint8,uint256,uint256,address,bytes32,string,uint256,uint256,uint256,uint256,bool)):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromTuple(strategy)]
    );

    return result[0].toBigInt();
  }

  try_addSettlementStrategy(
    marketId: BigInt,
    strategy: SpotMarketProxy__addSettlementStrategyInputStrategyStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'addSettlementStrategy',
      'addSettlementStrategy(uint128,(uint8,uint256,uint256,address,bytes32,string,uint256,uint256,uint256,uint256,bool)):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromTuple(strategy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSettlementStrategy(
    marketId: BigInt,
    strategyId: BigInt
  ): SpotMarketProxy__getSettlementStrategyResultSettlementStrategyStruct {
    let result = super.call(
      'getSettlementStrategy',
      'getSettlementStrategy(uint128,uint256):((uint8,uint256,uint256,address,bytes32,string,uint256,uint256,uint256,uint256,bool))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(strategyId)]
    );

    return changetype<SpotMarketProxy__getSettlementStrategyResultSettlementStrategyStruct>(
      result[0].toTuple()
    );
  }

  try_getSettlementStrategy(
    marketId: BigInt,
    strategyId: BigInt
  ): ethereum.CallResult<SpotMarketProxy__getSettlementStrategyResultSettlementStrategyStruct> {
    let result = super.tryCall(
      'getSettlementStrategy',
      'getSettlementStrategy(uint128,uint256):((uint8,uint256,uint256,address,bytes32,string,uint256,uint256,uint256,uint256,bool))',
      [ethereum.Value.fromUnsignedBigInt(marketId), ethereum.Value.fromUnsignedBigInt(strategyId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SpotMarketProxy__getSettlementStrategyResultSettlementStrategyStruct>(
        value[0].toTuple()
      )
    );
  }

  unwrap(
    marketId: BigInt,
    unwrapAmount: BigInt,
    minAmountReceived: BigInt
  ): SpotMarketProxy__unwrapResult {
    let result = super.call(
      'unwrap',
      'unwrap(uint128,uint256,uint256):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(unwrapAmount),
        ethereum.Value.fromUnsignedBigInt(minAmountReceived),
      ]
    );

    return new SpotMarketProxy__unwrapResult(
      result[0].toBigInt(),
      changetype<SpotMarketProxy__unwrapResultFeesStruct>(result[1].toTuple())
    );
  }

  try_unwrap(
    marketId: BigInt,
    unwrapAmount: BigInt,
    minAmountReceived: BigInt
  ): ethereum.CallResult<SpotMarketProxy__unwrapResult> {
    let result = super.tryCall(
      'unwrap',
      'unwrap(uint128,uint256,uint256):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(unwrapAmount),
        ethereum.Value.fromUnsignedBigInt(minAmountReceived),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__unwrapResult(
        value[0].toBigInt(),
        changetype<SpotMarketProxy__unwrapResultFeesStruct>(value[1].toTuple())
      )
    );
  }

  wrap(
    marketId: BigInt,
    wrapAmount: BigInt,
    minAmountReceived: BigInt
  ): SpotMarketProxy__wrapResult {
    let result = super.call(
      'wrap',
      'wrap(uint128,uint256,uint256):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(wrapAmount),
        ethereum.Value.fromUnsignedBigInt(minAmountReceived),
      ]
    );

    return new SpotMarketProxy__wrapResult(
      result[0].toBigInt(),
      changetype<SpotMarketProxy__wrapResultFeesStruct>(result[1].toTuple())
    );
  }

  try_wrap(
    marketId: BigInt,
    wrapAmount: BigInt,
    minAmountReceived: BigInt
  ): ethereum.CallResult<SpotMarketProxy__wrapResult> {
    let result = super.tryCall(
      'wrap',
      'wrap(uint128,uint256,uint256):(uint256,(uint256,uint256,int256,int256))',
      [
        ethereum.Value.fromUnsignedBigInt(marketId),
        ethereum.Value.fromUnsignedBigInt(wrapAmount),
        ethereum.Value.fromUnsignedBigInt(minAmountReceived),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__wrapResult(
        value[0].toBigInt(),
        changetype<SpotMarketProxy__wrapResultFeesStruct>(value[1].toTuple())
      )
    );
  }

  getCollateralLeverage(synthMarketId: BigInt): BigInt {
    let result = super.call('getCollateralLeverage', 'getCollateralLeverage(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(synthMarketId),
    ]);

    return result[0].toBigInt();
  }

  try_getCollateralLeverage(synthMarketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getCollateralLeverage',
      'getCollateralLeverage(uint128):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(synthMarketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCustomTransactorFees(synthMarketId: BigInt, transactor: Address): BigInt {
    let result = super.call(
      'getCustomTransactorFees',
      'getCustomTransactorFees(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(synthMarketId), ethereum.Value.fromAddress(transactor)]
    );

    return result[0].toBigInt();
  }

  try_getCustomTransactorFees(
    synthMarketId: BigInt,
    transactor: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getCustomTransactorFees',
      'getCustomTransactorFees(uint128,address):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(synthMarketId), ethereum.Value.fromAddress(transactor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFeeCollector(synthMarketId: BigInt): Address {
    let result = super.call('getFeeCollector', 'getFeeCollector(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(synthMarketId),
    ]);

    return result[0].toAddress();
  }

  try_getFeeCollector(synthMarketId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall('getFeeCollector', 'getFeeCollector(uint128):(address)', [
      ethereum.Value.fromUnsignedBigInt(synthMarketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMarketFees(synthMarketId: BigInt): SpotMarketProxy__getMarketFeesResult {
    let result = super.call(
      'getMarketFees',
      'getMarketFees(uint128):(uint256,uint256,int256,int256)',
      [ethereum.Value.fromUnsignedBigInt(synthMarketId)]
    );

    return new SpotMarketProxy__getMarketFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getMarketFees(
    synthMarketId: BigInt
  ): ethereum.CallResult<SpotMarketProxy__getMarketFeesResult> {
    let result = super.tryCall(
      'getMarketFees',
      'getMarketFees(uint128):(uint256,uint256,int256,int256)',
      [ethereum.Value.fromUnsignedBigInt(synthMarketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpotMarketProxy__getMarketFeesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getMarketSkewScale(synthMarketId: BigInt): BigInt {
    let result = super.call('getMarketSkewScale', 'getMarketSkewScale(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(synthMarketId),
    ]);

    return result[0].toBigInt();
  }

  try_getMarketSkewScale(synthMarketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getMarketSkewScale', 'getMarketSkewScale(uint128):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(synthMarketId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketUtilizationFees(synthMarketId: BigInt): BigInt {
    let result = super.call(
      'getMarketUtilizationFees',
      'getMarketUtilizationFees(uint128):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(synthMarketId)]
    );

    return result[0].toBigInt();
  }

  try_getMarketUtilizationFees(synthMarketId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getMarketUtilizationFees',
      'getMarketUtilizationFees(uint128):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(synthMarketId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReferrerShare(synthMarketId: BigInt, referrer: Address): BigInt {
    let result = super.call('getReferrerShare', 'getReferrerShare(uint128,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(synthMarketId),
      ethereum.Value.fromAddress(referrer),
    ]);

    return result[0].toBigInt();
  }

  try_getReferrerShare(synthMarketId: BigInt, referrer: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('getReferrerShare', 'getReferrerShare(uint128,address):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(synthMarketId),
      ethereum.Value.fromAddress(referrer),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDeniers(feature: Bytes): Array<Address> {
    let result = super.call('getDeniers', 'getDeniers(bytes32):(address[])', [
      ethereum.Value.fromFixedBytes(feature),
    ]);

    return result[0].toAddressArray();
  }

  try_getDeniers(feature: Bytes): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall('getDeniers', 'getDeniers(bytes32):(address[])', [
      ethereum.Value.fromFixedBytes(feature),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getFeatureFlagAllowAll(feature: Bytes): boolean {
    let result = super.call('getFeatureFlagAllowAll', 'getFeatureFlagAllowAll(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(feature),
    ]);

    return result[0].toBoolean();
  }

  try_getFeatureFlagAllowAll(feature: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall('getFeatureFlagAllowAll', 'getFeatureFlagAllowAll(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(feature),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getFeatureFlagAllowlist(feature: Bytes): Array<Address> {
    let result = super.call(
      'getFeatureFlagAllowlist',
      'getFeatureFlagAllowlist(bytes32):(address[])',
      [ethereum.Value.fromFixedBytes(feature)]
    );

    return result[0].toAddressArray();
  }

  try_getFeatureFlagAllowlist(feature: Bytes): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      'getFeatureFlagAllowlist',
      'getFeatureFlagAllowlist(bytes32):(address[])',
      [ethereum.Value.fromFixedBytes(feature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getFeatureFlagDenyAll(feature: Bytes): boolean {
    let result = super.call('getFeatureFlagDenyAll', 'getFeatureFlagDenyAll(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(feature),
    ]);

    return result[0].toBoolean();
  }

  try_getFeatureFlagDenyAll(feature: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall('getFeatureFlagDenyAll', 'getFeatureFlagDenyAll(bytes32):(bool)', [
      ethereum.Value.fromFixedBytes(feature),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFeatureAllowed(feature: Bytes, account: Address): boolean {
    let result = super.call('isFeatureAllowed', 'isFeatureAllowed(bytes32,address):(bool)', [
      ethereum.Value.fromFixedBytes(feature),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_isFeatureAllowed(feature: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall('isFeatureAllowed', 'isFeatureAllowed(bytes32,address):(bool)', [
      ethereum.Value.fromFixedBytes(feature),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class NominateNewOwnerCall extends ethereum.Call {
  get inputs(): NominateNewOwnerCall__Inputs {
    return new NominateNewOwnerCall__Inputs(this);
  }

  get outputs(): NominateNewOwnerCall__Outputs {
    return new NominateNewOwnerCall__Outputs(this);
  }
}

export class NominateNewOwnerCall__Inputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }

  get newNominatedOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class NominateNewOwnerCall__Outputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }
}

export class RenounceNominationCall extends ethereum.Call {
  get inputs(): RenounceNominationCall__Inputs {
    return new RenounceNominationCall__Inputs(this);
  }

  get outputs(): RenounceNominationCall__Outputs {
    return new RenounceNominationCall__Outputs(this);
  }
}

export class RenounceNominationCall__Inputs {
  _call: RenounceNominationCall;

  constructor(call: RenounceNominationCall) {
    this._call = call;
  }
}

export class RenounceNominationCall__Outputs {
  _call: RenounceNominationCall;

  constructor(call: RenounceNominationCall) {
    this._call = call;
  }
}

export class SimulateUpgradeToCall extends ethereum.Call {
  get inputs(): SimulateUpgradeToCall__Inputs {
    return new SimulateUpgradeToCall__Inputs(this);
  }

  get outputs(): SimulateUpgradeToCall__Outputs {
    return new SimulateUpgradeToCall__Outputs(this);
  }
}

export class SimulateUpgradeToCall__Inputs {
  _call: SimulateUpgradeToCall;

  constructor(call: SimulateUpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SimulateUpgradeToCall__Outputs {
  _call: SimulateUpgradeToCall;

  constructor(call: SimulateUpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class AcceptMarketOwnershipCall extends ethereum.Call {
  get inputs(): AcceptMarketOwnershipCall__Inputs {
    return new AcceptMarketOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptMarketOwnershipCall__Outputs {
    return new AcceptMarketOwnershipCall__Outputs(this);
  }
}

export class AcceptMarketOwnershipCall__Inputs {
  _call: AcceptMarketOwnershipCall;

  constructor(call: AcceptMarketOwnershipCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptMarketOwnershipCall__Outputs {
  _call: AcceptMarketOwnershipCall;

  constructor(call: AcceptMarketOwnershipCall) {
    this._call = call;
  }
}

export class CreateSynthCall extends ethereum.Call {
  get inputs(): CreateSynthCall__Inputs {
    return new CreateSynthCall__Inputs(this);
  }

  get outputs(): CreateSynthCall__Outputs {
    return new CreateSynthCall__Outputs(this);
  }
}

export class CreateSynthCall__Inputs {
  _call: CreateSynthCall;

  constructor(call: CreateSynthCall) {
    this._call = call;
  }

  get tokenName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get tokenSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get synthOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CreateSynthCall__Outputs {
  _call: CreateSynthCall;

  constructor(call: CreateSynthCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitOrUpgradeNftCall extends ethereum.Call {
  get inputs(): InitOrUpgradeNftCall__Inputs {
    return new InitOrUpgradeNftCall__Inputs(this);
  }

  get outputs(): InitOrUpgradeNftCall__Outputs {
    return new InitOrUpgradeNftCall__Outputs(this);
  }
}

export class InitOrUpgradeNftCall__Inputs {
  _call: InitOrUpgradeNftCall;

  constructor(call: InitOrUpgradeNftCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get uri(): string {
    return this._call.inputValues[3].value.toString();
  }

  get impl(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitOrUpgradeNftCall__Outputs {
  _call: InitOrUpgradeNftCall;

  constructor(call: InitOrUpgradeNftCall) {
    this._call = call;
  }
}

export class InitOrUpgradeTokenCall extends ethereum.Call {
  get inputs(): InitOrUpgradeTokenCall__Inputs {
    return new InitOrUpgradeTokenCall__Inputs(this);
  }

  get outputs(): InitOrUpgradeTokenCall__Outputs {
    return new InitOrUpgradeTokenCall__Outputs(this);
  }
}

export class InitOrUpgradeTokenCall__Inputs {
  _call: InitOrUpgradeTokenCall;

  constructor(call: InitOrUpgradeTokenCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get decimals(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get impl(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class InitOrUpgradeTokenCall__Outputs {
  _call: InitOrUpgradeTokenCall;

  constructor(call: InitOrUpgradeTokenCall) {
    this._call = call;
  }
}

export class NominateMarketOwnerCall extends ethereum.Call {
  get inputs(): NominateMarketOwnerCall__Inputs {
    return new NominateMarketOwnerCall__Inputs(this);
  }

  get outputs(): NominateMarketOwnerCall__Outputs {
    return new NominateMarketOwnerCall__Outputs(this);
  }
}

export class NominateMarketOwnerCall__Inputs {
  _call: NominateMarketOwnerCall;

  constructor(call: NominateMarketOwnerCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newNominatedOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class NominateMarketOwnerCall__Outputs {
  _call: NominateMarketOwnerCall;

  constructor(call: NominateMarketOwnerCall) {
    this._call = call;
  }
}

export class RegisterUnmanagedSystemCall extends ethereum.Call {
  get inputs(): RegisterUnmanagedSystemCall__Inputs {
    return new RegisterUnmanagedSystemCall__Inputs(this);
  }

  get outputs(): RegisterUnmanagedSystemCall__Outputs {
    return new RegisterUnmanagedSystemCall__Outputs(this);
  }
}

export class RegisterUnmanagedSystemCall__Inputs {
  _call: RegisterUnmanagedSystemCall;

  constructor(call: RegisterUnmanagedSystemCall) {
    this._call = call;
  }

  get id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get endpoint(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterUnmanagedSystemCall__Outputs {
  _call: RegisterUnmanagedSystemCall;

  constructor(call: RegisterUnmanagedSystemCall) {
    this._call = call;
  }
}

export class RenounceMarketNominationCall extends ethereum.Call {
  get inputs(): RenounceMarketNominationCall__Inputs {
    return new RenounceMarketNominationCall__Inputs(this);
  }

  get outputs(): RenounceMarketNominationCall__Outputs {
    return new RenounceMarketNominationCall__Outputs(this);
  }
}

export class RenounceMarketNominationCall__Inputs {
  _call: RenounceMarketNominationCall;

  constructor(call: RenounceMarketNominationCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RenounceMarketNominationCall__Outputs {
  _call: RenounceMarketNominationCall;

  constructor(call: RenounceMarketNominationCall) {
    this._call = call;
  }
}

export class RenounceMarketOwnershipCall extends ethereum.Call {
  get inputs(): RenounceMarketOwnershipCall__Inputs {
    return new RenounceMarketOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceMarketOwnershipCall__Outputs {
    return new RenounceMarketOwnershipCall__Outputs(this);
  }
}

export class RenounceMarketOwnershipCall__Inputs {
  _call: RenounceMarketOwnershipCall;

  constructor(call: RenounceMarketOwnershipCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RenounceMarketOwnershipCall__Outputs {
  _call: RenounceMarketOwnershipCall;

  constructor(call: RenounceMarketOwnershipCall) {
    this._call = call;
  }
}

export class SetDecayRateCall extends ethereum.Call {
  get inputs(): SetDecayRateCall__Inputs {
    return new SetDecayRateCall__Inputs(this);
  }

  get outputs(): SetDecayRateCall__Outputs {
    return new SetDecayRateCall__Outputs(this);
  }
}

export class SetDecayRateCall__Inputs {
  _call: SetDecayRateCall;

  constructor(call: SetDecayRateCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get rate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDecayRateCall__Outputs {
  _call: SetDecayRateCall;

  constructor(call: SetDecayRateCall) {
    this._call = call;
  }
}

export class SetSynthImplementationCall extends ethereum.Call {
  get inputs(): SetSynthImplementationCall__Inputs {
    return new SetSynthImplementationCall__Inputs(this);
  }

  get outputs(): SetSynthImplementationCall__Outputs {
    return new SetSynthImplementationCall__Outputs(this);
  }
}

export class SetSynthImplementationCall__Inputs {
  _call: SetSynthImplementationCall;

  constructor(call: SetSynthImplementationCall) {
    this._call = call;
  }

  get synthImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSynthImplementationCall__Outputs {
  _call: SetSynthImplementationCall;

  constructor(call: SetSynthImplementationCall) {
    this._call = call;
  }
}

export class SetSynthetixCall extends ethereum.Call {
  get inputs(): SetSynthetixCall__Inputs {
    return new SetSynthetixCall__Inputs(this);
  }

  get outputs(): SetSynthetixCall__Outputs {
    return new SetSynthetixCall__Outputs(this);
  }
}

export class SetSynthetixCall__Inputs {
  _call: SetSynthetixCall;

  constructor(call: SetSynthetixCall) {
    this._call = call;
  }

  get synthetix(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSynthetixCall__Outputs {
  _call: SetSynthetixCall;

  constructor(call: SetSynthetixCall) {
    this._call = call;
  }
}

export class UpdatePriceDataCall extends ethereum.Call {
  get inputs(): UpdatePriceDataCall__Inputs {
    return new UpdatePriceDataCall__Inputs(this);
  }

  get outputs(): UpdatePriceDataCall__Outputs {
    return new UpdatePriceDataCall__Outputs(this);
  }
}

export class UpdatePriceDataCall__Inputs {
  _call: UpdatePriceDataCall;

  constructor(call: UpdatePriceDataCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get buyFeedId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sellFeedId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UpdatePriceDataCall__Outputs {
  _call: UpdatePriceDataCall;

  constructor(call: UpdatePriceDataCall) {
    this._call = call;
  }
}

export class UpgradeSynthImplCall extends ethereum.Call {
  get inputs(): UpgradeSynthImplCall__Inputs {
    return new UpgradeSynthImplCall__Inputs(this);
  }

  get outputs(): UpgradeSynthImplCall__Outputs {
    return new UpgradeSynthImplCall__Outputs(this);
  }
}

export class UpgradeSynthImplCall__Inputs {
  _call: UpgradeSynthImplCall;

  constructor(call: UpgradeSynthImplCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpgradeSynthImplCall__Outputs {
  _call: UpgradeSynthImplCall;

  constructor(call: UpgradeSynthImplCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get usdAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmountReceived(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get synthAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fees(): BuyCallFeesStruct {
    return changetype<BuyCallFeesStruct>(this._call.outputValues[1].value.toTuple());
  }
}

export class BuyCallFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class BuyExactInCall extends ethereum.Call {
  get inputs(): BuyExactInCall__Inputs {
    return new BuyExactInCall__Inputs(this);
  }

  get outputs(): BuyExactInCall__Outputs {
    return new BuyExactInCall__Outputs(this);
  }
}

export class BuyExactInCall__Inputs {
  _call: BuyExactInCall;

  constructor(call: BuyExactInCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get usdAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmountReceived(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class BuyExactInCall__Outputs {
  _call: BuyExactInCall;

  constructor(call: BuyExactInCall) {
    this._call = call;
  }

  get synthAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fees(): BuyExactInCallFeesStruct {
    return changetype<BuyExactInCallFeesStruct>(this._call.outputValues[1].value.toTuple());
  }
}

export class BuyExactInCallFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class BuyExactOutCall extends ethereum.Call {
  get inputs(): BuyExactOutCall__Inputs {
    return new BuyExactOutCall__Inputs(this);
  }

  get outputs(): BuyExactOutCall__Outputs {
    return new BuyExactOutCall__Outputs(this);
  }
}

export class BuyExactOutCall__Inputs {
  _call: BuyExactOutCall;

  constructor(call: BuyExactOutCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get synthAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxUsdAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class BuyExactOutCall__Outputs {
  _call: BuyExactOutCall;

  constructor(call: BuyExactOutCall) {
    this._call = call;
  }

  get usdAmountCharged(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fees(): BuyExactOutCallFeesStruct {
    return changetype<BuyExactOutCallFeesStruct>(this._call.outputValues[1].value.toTuple());
  }
}

export class BuyExactOutCallFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SellCall extends ethereum.Call {
  get inputs(): SellCall__Inputs {
    return new SellCall__Inputs(this);
  }

  get outputs(): SellCall__Outputs {
    return new SellCall__Outputs(this);
  }
}

export class SellCall__Inputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get synthAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minUsdAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SellCall__Outputs {
  _call: SellCall;

  constructor(call: SellCall) {
    this._call = call;
  }

  get usdAmountReceived(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fees(): SellCallFeesStruct {
    return changetype<SellCallFeesStruct>(this._call.outputValues[1].value.toTuple());
  }
}

export class SellCallFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SellExactInCall extends ethereum.Call {
  get inputs(): SellExactInCall__Inputs {
    return new SellExactInCall__Inputs(this);
  }

  get outputs(): SellExactInCall__Outputs {
    return new SellExactInCall__Outputs(this);
  }
}

export class SellExactInCall__Inputs {
  _call: SellExactInCall;

  constructor(call: SellExactInCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get synthAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmountReceived(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SellExactInCall__Outputs {
  _call: SellExactInCall;

  constructor(call: SellExactInCall) {
    this._call = call;
  }

  get returnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fees(): SellExactInCallFeesStruct {
    return changetype<SellExactInCallFeesStruct>(this._call.outputValues[1].value.toTuple());
  }
}

export class SellExactInCallFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SellExactOutCall extends ethereum.Call {
  get inputs(): SellExactOutCall__Inputs {
    return new SellExactOutCall__Inputs(this);
  }

  get outputs(): SellExactOutCall__Outputs {
    return new SellExactOutCall__Outputs(this);
  }
}

export class SellExactOutCall__Inputs {
  _call: SellExactOutCall;

  constructor(call: SellExactOutCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get usdAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxSynthAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get referrer(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SellExactOutCall__Outputs {
  _call: SellExactOutCall;

  constructor(call: SellExactOutCall) {
    this._call = call;
  }

  get synthToBurn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fees(): SellExactOutCallFeesStruct {
    return changetype<SellExactOutCallFeesStruct>(this._call.outputValues[1].value.toTuple());
  }
}

export class SellExactOutCallFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get asyncOrderId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class CommitOrderCall extends ethereum.Call {
  get inputs(): CommitOrderCall__Inputs {
    return new CommitOrderCall__Inputs(this);
  }

  get outputs(): CommitOrderCall__Outputs {
    return new CommitOrderCall__Outputs(this);
  }
}

export class CommitOrderCall__Inputs {
  _call: CommitOrderCall;

  constructor(call: CommitOrderCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get orderType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get amountProvided(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get settlementStrategyId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get minimumSettlementAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get referrer(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class CommitOrderCall__Outputs {
  _call: CommitOrderCall;

  constructor(call: CommitOrderCall) {
    this._call = call;
  }

  get asyncOrderClaim(): CommitOrderCallAsyncOrderClaimStruct {
    return changetype<CommitOrderCallAsyncOrderClaimStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class CommitOrderCallAsyncOrderClaimStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get orderType(): i32 {
    return this[2].toI32();
  }

  get amountEscrowed(): BigInt {
    return this[3].toBigInt();
  }

  get settlementStrategyId(): BigInt {
    return this[4].toBigInt();
  }

  get settlementTime(): BigInt {
    return this[5].toBigInt();
  }

  get minimumSettlementAmount(): BigInt {
    return this[6].toBigInt();
  }

  get settledAt(): BigInt {
    return this[7].toBigInt();
  }

  get referrer(): Address {
    return this[8].toAddress();
  }
}

export class SettleOrderCall extends ethereum.Call {
  get inputs(): SettleOrderCall__Inputs {
    return new SettleOrderCall__Inputs(this);
  }

  get outputs(): SettleOrderCall__Outputs {
    return new SettleOrderCall__Outputs(this);
  }
}

export class SettleOrderCall__Inputs {
  _call: SettleOrderCall;

  constructor(call: SettleOrderCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get asyncOrderId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SettleOrderCall__Outputs {
  _call: SettleOrderCall;

  constructor(call: SettleOrderCall) {
    this._call = call;
  }

  get finalOrderAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fees(): SettleOrderCallFeesStruct {
    return changetype<SettleOrderCallFeesStruct>(this._call.outputValues[1].value.toTuple());
  }
}

export class SettleOrderCallFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SettlePythOrderCall extends ethereum.Call {
  get inputs(): SettlePythOrderCall__Inputs {
    return new SettlePythOrderCall__Inputs(this);
  }

  get outputs(): SettlePythOrderCall__Outputs {
    return new SettlePythOrderCall__Outputs(this);
  }
}

export class SettlePythOrderCall__Inputs {
  _call: SettlePythOrderCall;

  constructor(call: SettlePythOrderCall) {
    this._call = call;
  }

  get result(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get extraData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SettlePythOrderCall__Outputs {
  _call: SettlePythOrderCall;

  constructor(call: SettlePythOrderCall) {
    this._call = call;
  }

  get finalOrderAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fees(): SettlePythOrderCallFeesStruct {
    return changetype<SettlePythOrderCallFeesStruct>(this._call.outputValues[1].value.toTuple());
  }
}

export class SettlePythOrderCallFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class AddSettlementStrategyCall extends ethereum.Call {
  get inputs(): AddSettlementStrategyCall__Inputs {
    return new AddSettlementStrategyCall__Inputs(this);
  }

  get outputs(): AddSettlementStrategyCall__Outputs {
    return new AddSettlementStrategyCall__Outputs(this);
  }
}

export class AddSettlementStrategyCall__Inputs {
  _call: AddSettlementStrategyCall;

  constructor(call: AddSettlementStrategyCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get strategy(): AddSettlementStrategyCallStrategyStruct {
    return changetype<AddSettlementStrategyCallStrategyStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class AddSettlementStrategyCall__Outputs {
  _call: AddSettlementStrategyCall;

  constructor(call: AddSettlementStrategyCall) {
    this._call = call;
  }

  get strategyId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddSettlementStrategyCallStrategyStruct extends ethereum.Tuple {
  get strategyType(): i32 {
    return this[0].toI32();
  }

  get settlementDelay(): BigInt {
    return this[1].toBigInt();
  }

  get settlementWindowDuration(): BigInt {
    return this[2].toBigInt();
  }

  get priceVerificationContract(): Address {
    return this[3].toAddress();
  }

  get feedId(): Bytes {
    return this[4].toBytes();
  }

  get url(): string {
    return this[5].toString();
  }

  get settlementReward(): BigInt {
    return this[6].toBigInt();
  }

  get priceDeviationTolerance(): BigInt {
    return this[7].toBigInt();
  }

  get minimumUsdExchangeAmount(): BigInt {
    return this[8].toBigInt();
  }

  get maxRoundingLoss(): BigInt {
    return this[9].toBigInt();
  }

  get disabled(): boolean {
    return this[10].toBoolean();
  }
}

export class SetSettlementStrategyEnabledCall extends ethereum.Call {
  get inputs(): SetSettlementStrategyEnabledCall__Inputs {
    return new SetSettlementStrategyEnabledCall__Inputs(this);
  }

  get outputs(): SetSettlementStrategyEnabledCall__Outputs {
    return new SetSettlementStrategyEnabledCall__Outputs(this);
  }
}

export class SetSettlementStrategyEnabledCall__Inputs {
  _call: SetSettlementStrategyEnabledCall;

  constructor(call: SetSettlementStrategyEnabledCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get strategyId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get enabled(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetSettlementStrategyEnabledCall__Outputs {
  _call: SetSettlementStrategyEnabledCall;

  constructor(call: SetSettlementStrategyEnabledCall) {
    this._call = call;
  }
}

export class SetWrapperCall extends ethereum.Call {
  get inputs(): SetWrapperCall__Inputs {
    return new SetWrapperCall__Inputs(this);
  }

  get outputs(): SetWrapperCall__Outputs {
    return new SetWrapperCall__Outputs(this);
  }
}

export class SetWrapperCall__Inputs {
  _call: SetWrapperCall;

  constructor(call: SetWrapperCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get wrapCollateralType(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get maxWrappableAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetWrapperCall__Outputs {
  _call: SetWrapperCall;

  constructor(call: SetWrapperCall) {
    this._call = call;
  }
}

export class UnwrapCall extends ethereum.Call {
  get inputs(): UnwrapCall__Inputs {
    return new UnwrapCall__Inputs(this);
  }

  get outputs(): UnwrapCall__Outputs {
    return new UnwrapCall__Outputs(this);
  }
}

export class UnwrapCall__Inputs {
  _call: UnwrapCall;

  constructor(call: UnwrapCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get unwrapAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmountReceived(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UnwrapCall__Outputs {
  _call: UnwrapCall;

  constructor(call: UnwrapCall) {
    this._call = call;
  }

  get returnCollateralAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fees(): UnwrapCallFeesStruct {
    return changetype<UnwrapCallFeesStruct>(this._call.outputValues[1].value.toTuple());
  }
}

export class UnwrapCallFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class WrapCall extends ethereum.Call {
  get inputs(): WrapCall__Inputs {
    return new WrapCall__Inputs(this);
  }

  get outputs(): WrapCall__Outputs {
    return new WrapCall__Outputs(this);
  }
}

export class WrapCall__Inputs {
  _call: WrapCall;

  constructor(call: WrapCall) {
    this._call = call;
  }

  get marketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get wrapAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minAmountReceived(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WrapCall__Outputs {
  _call: WrapCall;

  constructor(call: WrapCall) {
    this._call = call;
  }

  get amountToMint(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get fees(): WrapCallFeesStruct {
    return changetype<WrapCallFeesStruct>(this._call.outputValues[1].value.toTuple());
  }
}

export class WrapCallFeesStruct extends ethereum.Tuple {
  get fixedFees(): BigInt {
    return this[0].toBigInt();
  }

  get utilizationFees(): BigInt {
    return this[1].toBigInt();
  }

  get skewFees(): BigInt {
    return this[2].toBigInt();
  }

  get wrapperFees(): BigInt {
    return this[3].toBigInt();
  }
}

export class SetAsyncFixedFeeCall extends ethereum.Call {
  get inputs(): SetAsyncFixedFeeCall__Inputs {
    return new SetAsyncFixedFeeCall__Inputs(this);
  }

  get outputs(): SetAsyncFixedFeeCall__Outputs {
    return new SetAsyncFixedFeeCall__Outputs(this);
  }
}

export class SetAsyncFixedFeeCall__Inputs {
  _call: SetAsyncFixedFeeCall;

  constructor(call: SetAsyncFixedFeeCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get asyncFixedFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetAsyncFixedFeeCall__Outputs {
  _call: SetAsyncFixedFeeCall;

  constructor(call: SetAsyncFixedFeeCall) {
    this._call = call;
  }
}

export class SetAtomicFixedFeeCall extends ethereum.Call {
  get inputs(): SetAtomicFixedFeeCall__Inputs {
    return new SetAtomicFixedFeeCall__Inputs(this);
  }

  get outputs(): SetAtomicFixedFeeCall__Outputs {
    return new SetAtomicFixedFeeCall__Outputs(this);
  }
}

export class SetAtomicFixedFeeCall__Inputs {
  _call: SetAtomicFixedFeeCall;

  constructor(call: SetAtomicFixedFeeCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get atomicFixedFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetAtomicFixedFeeCall__Outputs {
  _call: SetAtomicFixedFeeCall;

  constructor(call: SetAtomicFixedFeeCall) {
    this._call = call;
  }
}

export class SetCollateralLeverageCall extends ethereum.Call {
  get inputs(): SetCollateralLeverageCall__Inputs {
    return new SetCollateralLeverageCall__Inputs(this);
  }

  get outputs(): SetCollateralLeverageCall__Outputs {
    return new SetCollateralLeverageCall__Outputs(this);
  }
}

export class SetCollateralLeverageCall__Inputs {
  _call: SetCollateralLeverageCall;

  constructor(call: SetCollateralLeverageCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralLeverage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetCollateralLeverageCall__Outputs {
  _call: SetCollateralLeverageCall;

  constructor(call: SetCollateralLeverageCall) {
    this._call = call;
  }
}

export class SetCustomTransactorFeesCall extends ethereum.Call {
  get inputs(): SetCustomTransactorFeesCall__Inputs {
    return new SetCustomTransactorFeesCall__Inputs(this);
  }

  get outputs(): SetCustomTransactorFeesCall__Outputs {
    return new SetCustomTransactorFeesCall__Outputs(this);
  }
}

export class SetCustomTransactorFeesCall__Inputs {
  _call: SetCustomTransactorFeesCall;

  constructor(call: SetCustomTransactorFeesCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get transactor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get fixedFeeAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetCustomTransactorFeesCall__Outputs {
  _call: SetCustomTransactorFeesCall;

  constructor(call: SetCustomTransactorFeesCall) {
    this._call = call;
  }
}

export class SetFeeCollectorCall extends ethereum.Call {
  get inputs(): SetFeeCollectorCall__Inputs {
    return new SetFeeCollectorCall__Inputs(this);
  }

  get outputs(): SetFeeCollectorCall__Outputs {
    return new SetFeeCollectorCall__Outputs(this);
  }
}

export class SetFeeCollectorCall__Inputs {
  _call: SetFeeCollectorCall;

  constructor(call: SetFeeCollectorCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get feeCollector(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetFeeCollectorCall__Outputs {
  _call: SetFeeCollectorCall;

  constructor(call: SetFeeCollectorCall) {
    this._call = call;
  }
}

export class SetMarketSkewScaleCall extends ethereum.Call {
  get inputs(): SetMarketSkewScaleCall__Inputs {
    return new SetMarketSkewScaleCall__Inputs(this);
  }

  get outputs(): SetMarketSkewScaleCall__Outputs {
    return new SetMarketSkewScaleCall__Outputs(this);
  }
}

export class SetMarketSkewScaleCall__Inputs {
  _call: SetMarketSkewScaleCall;

  constructor(call: SetMarketSkewScaleCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get skewScale(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMarketSkewScaleCall__Outputs {
  _call: SetMarketSkewScaleCall;

  constructor(call: SetMarketSkewScaleCall) {
    this._call = call;
  }
}

export class SetMarketUtilizationFeesCall extends ethereum.Call {
  get inputs(): SetMarketUtilizationFeesCall__Inputs {
    return new SetMarketUtilizationFeesCall__Inputs(this);
  }

  get outputs(): SetMarketUtilizationFeesCall__Outputs {
    return new SetMarketUtilizationFeesCall__Outputs(this);
  }
}

export class SetMarketUtilizationFeesCall__Inputs {
  _call: SetMarketUtilizationFeesCall;

  constructor(call: SetMarketUtilizationFeesCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get utilizationFeeRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMarketUtilizationFeesCall__Outputs {
  _call: SetMarketUtilizationFeesCall;

  constructor(call: SetMarketUtilizationFeesCall) {
    this._call = call;
  }
}

export class SetWrapperFeesCall extends ethereum.Call {
  get inputs(): SetWrapperFeesCall__Inputs {
    return new SetWrapperFeesCall__Inputs(this);
  }

  get outputs(): SetWrapperFeesCall__Outputs {
    return new SetWrapperFeesCall__Outputs(this);
  }
}

export class SetWrapperFeesCall__Inputs {
  _call: SetWrapperFeesCall;

  constructor(call: SetWrapperFeesCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get wrapFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get unwrapFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetWrapperFeesCall__Outputs {
  _call: SetWrapperFeesCall;

  constructor(call: SetWrapperFeesCall) {
    this._call = call;
  }
}

export class UpdateReferrerShareCall extends ethereum.Call {
  get inputs(): UpdateReferrerShareCall__Inputs {
    return new UpdateReferrerShareCall__Inputs(this);
  }

  get outputs(): UpdateReferrerShareCall__Outputs {
    return new UpdateReferrerShareCall__Outputs(this);
  }
}

export class UpdateReferrerShareCall__Inputs {
  _call: UpdateReferrerShareCall;

  constructor(call: UpdateReferrerShareCall) {
    this._call = call;
  }

  get synthMarketId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get referrer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sharePercentage(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateReferrerShareCall__Outputs {
  _call: UpdateReferrerShareCall;

  constructor(call: UpdateReferrerShareCall) {
    this._call = call;
  }
}

export class AddToFeatureFlagAllowlistCall extends ethereum.Call {
  get inputs(): AddToFeatureFlagAllowlistCall__Inputs {
    return new AddToFeatureFlagAllowlistCall__Inputs(this);
  }

  get outputs(): AddToFeatureFlagAllowlistCall__Outputs {
    return new AddToFeatureFlagAllowlistCall__Outputs(this);
  }
}

export class AddToFeatureFlagAllowlistCall__Inputs {
  _call: AddToFeatureFlagAllowlistCall;

  constructor(call: AddToFeatureFlagAllowlistCall) {
    this._call = call;
  }

  get feature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddToFeatureFlagAllowlistCall__Outputs {
  _call: AddToFeatureFlagAllowlistCall;

  constructor(call: AddToFeatureFlagAllowlistCall) {
    this._call = call;
  }
}

export class RemoveFromFeatureFlagAllowlistCall extends ethereum.Call {
  get inputs(): RemoveFromFeatureFlagAllowlistCall__Inputs {
    return new RemoveFromFeatureFlagAllowlistCall__Inputs(this);
  }

  get outputs(): RemoveFromFeatureFlagAllowlistCall__Outputs {
    return new RemoveFromFeatureFlagAllowlistCall__Outputs(this);
  }
}

export class RemoveFromFeatureFlagAllowlistCall__Inputs {
  _call: RemoveFromFeatureFlagAllowlistCall;

  constructor(call: RemoveFromFeatureFlagAllowlistCall) {
    this._call = call;
  }

  get feature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveFromFeatureFlagAllowlistCall__Outputs {
  _call: RemoveFromFeatureFlagAllowlistCall;

  constructor(call: RemoveFromFeatureFlagAllowlistCall) {
    this._call = call;
  }
}

export class SetDeniersCall extends ethereum.Call {
  get inputs(): SetDeniersCall__Inputs {
    return new SetDeniersCall__Inputs(this);
  }

  get outputs(): SetDeniersCall__Outputs {
    return new SetDeniersCall__Outputs(this);
  }
}

export class SetDeniersCall__Inputs {
  _call: SetDeniersCall;

  constructor(call: SetDeniersCall) {
    this._call = call;
  }

  get feature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get deniers(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class SetDeniersCall__Outputs {
  _call: SetDeniersCall;

  constructor(call: SetDeniersCall) {
    this._call = call;
  }
}

export class SetFeatureFlagAllowAllCall extends ethereum.Call {
  get inputs(): SetFeatureFlagAllowAllCall__Inputs {
    return new SetFeatureFlagAllowAllCall__Inputs(this);
  }

  get outputs(): SetFeatureFlagAllowAllCall__Outputs {
    return new SetFeatureFlagAllowAllCall__Outputs(this);
  }
}

export class SetFeatureFlagAllowAllCall__Inputs {
  _call: SetFeatureFlagAllowAllCall;

  constructor(call: SetFeatureFlagAllowAllCall) {
    this._call = call;
  }

  get feature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get allowAll(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetFeatureFlagAllowAllCall__Outputs {
  _call: SetFeatureFlagAllowAllCall;

  constructor(call: SetFeatureFlagAllowAllCall) {
    this._call = call;
  }
}

export class SetFeatureFlagDenyAllCall extends ethereum.Call {
  get inputs(): SetFeatureFlagDenyAllCall__Inputs {
    return new SetFeatureFlagDenyAllCall__Inputs(this);
  }

  get outputs(): SetFeatureFlagDenyAllCall__Outputs {
    return new SetFeatureFlagDenyAllCall__Outputs(this);
  }
}

export class SetFeatureFlagDenyAllCall__Inputs {
  _call: SetFeatureFlagDenyAllCall;

  constructor(call: SetFeatureFlagDenyAllCall) {
    this._call = call;
  }

  get feature(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get denyAll(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetFeatureFlagDenyAllCall__Outputs {
  _call: SetFeatureFlagDenyAllCall;

  constructor(call: SetFeatureFlagDenyAllCall) {
    this._call = call;
  }
}
