name = "spot-market"
version = "<%= package.version %>"
description = "Spot market implementation"

[setting.coreProxyOwner]
description = "owner of v3 core proxy"
defaultValue = "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"

[setting.marketOwner]
description = "spot market owner"
defaultValue = "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"

[import.synthetix]
source = "synthetix:3.0.0-alpha.4"

[setting.oracle_manager_version]
defaultValue = "1.0.0"

[import.oracle_manager]
source = "oracle-manager:<%= settings.oracle_manager_version %>"
options.owner = "<%= settings.owner %>"

[contract.SpotMarketFactoryModule]
artifact = "SpotMarketFactoryModule"

[contract.AtomicOrderModule]
artifact = "AtomicOrderModule"

[contract.AsyncOrderModule]
artifact = "AsyncOrderModule"

[contract.WrapperModule]
artifact = "WrapperModule"

[contract.SynthTokenModule]
artifact = "SynthTokenModule"

[contract.AsyncOrderClaimTokenModule]
artifact = "AsyncOrderClaimTokenModule"

[contract.CoreModule]
artifact = "contracts/modules/CoreModule.sol:CoreModule"

[contract.InitialProxy]
artifact = "contracts/Proxy.sol:Proxy"
args = ["<%= contracts.CoreModule.address %>"]
abiOf = ["CoreModule"]
salt = "<%= settings.salt %>"
depends = ["contract.CoreModule"]

[invoke.acquire_ownership]
target = ["InitialProxy"]
from = "<%= settings.coreProxyOwner %>"
func = "initializeOwnerModule"
args = ["<%= settings.coreProxyOwner %>"]
depends = ["contract.InitialProxy"]

[run.generate_router]
exec = "@synthetixio/hardhat-router/utils/cannon"
func = "generate"
args = [
  "contracts/routers/chain-<%= chainId %>/Router.sol:Router",
  '''<%= JSON.stringify({
    CoreModule: contracts.CoreModule,
    SpotMarketFactoryModule: contracts.SpotMarketFactoryModule,
    AtomicOrderModule: contracts.AtomicOrderModule,
    AsyncOrderModule: contracts.AsyncOrderModule,
    WrapperModule: contracts.WrapperModule,
  }) %>'''
]
modified = ["contracts"]
depends = [
  "contract.CoreModule",
  "contract.SpotMarketFactoryModule",
  "contract.AtomicOrderModule",
  "contract.AsyncOrderModule",
  "contract.WrapperModule"
]

[contract.Router]
artifact = "contracts/routers/chain-<%= chainId %>/Router.sol:Router"
abiOf = [
  "CoreModule",
  "SpotMarketFactoryModule",
  "AtomicOrderModule",
  "AsyncOrderModule",
  "WrapperModule"
]
depends = ["run.generate_router"]

[invoke.upgrade_proxy]
target = ["InitialProxy"]
from = "<%= settings.coreProxyOwner %>"
func = "upgradeTo"
args = ["<%= contracts.Router.address %>"]
factory.Proxy.abiOf = ["Router"]
factory.Proxy.event = "Upgraded"
factory.Proxy.arg = 0
depends = ["contract.Router"]

# create synth router

[run.generate_synth_router]
exec = "@synthetixio/hardhat-router/utils/cannon"
func = "generate"
args = [
  "contracts/routers/chain-<%= chainId %>/SynthTokenModuleRouter.sol:SynthTokenModuleRouter",
  '''<%= JSON.stringify({
    CoreModule: contracts.CoreModule,
    SynthTokenModule: contracts.SynthTokenModule
  }) %>'''
]
modified = ["contracts"]
depends = [
  "contract.CoreModule",
  "contract.SynthTokenModule"
]

[contract.SynthRouter]
artifact = "contracts/routers/chain-<%= chainId %>/SynthTokenModuleRouter.sol:SynthTokenModuleRouter"
abiOf = [
  "CoreModule",
  "SynthTokenModule"
]
depends = ["run.generate_synth_router"]

# create async order claim token router
[run.generate_async_order_claim_router]
exec = "@synthetixio/hardhat-router/utils/cannon"
func = "generate"
args = [
  "contracts/routers/chain-<%= chainId %>/AsyncOrderClaimTokenModuleRouter.sol:AsyncOrderClaimTokenModuleRouter",
  '''<%= JSON.stringify({
    CoreModule: contracts.CoreModule,
    AsyncOrderClaimTokenModule: contracts.AsyncOrderClaimTokenModule
  }) %>'''
]
modified = ["contracts"]
depends = [
  "contract.CoreModule",
  "contract.AsyncOrderClaimTokenModule"
]

[contract.AsyncOrderClaimRouter]
artifact = "contracts/routers/chain-<%= chainId %>/AsyncOrderClaimTokenModuleRouter.sol:AsyncOrderClaimTokenModuleRouter"
abiOf = [
  "CoreModule",
  "AsyncOrderClaimTokenModule"
]
depends = ["run.generate_async_order_claim_router"]


[invoke.initialize_spot_market_factory]
target = ["Proxy"]
from = "<%= settings.coreProxyOwner %>"
func = "initialize"
args = [
  "<%= imports.synthetix.contracts.CoreProxy.address %>",
  "<%= imports.synthetix.contracts.USDProxy.address %>",
  "<%= imports.oracle_manager.contracts.Proxy.address %>",
  "<%= contracts.SynthRouter.address %>",
]
depends = ["invoke.upgrade_proxy", "import.synthetix", "import.oracle_manager", "run.generate_synth_router", "run.generate_async_order_claim_router"]

# add pool owner to feature flag allow list (owner must be pdao for this to be successful)
[invoke.addSpotMarketToFeatureFlag]
target = ["synthetix.CoreProxy"]
func = "addToFeatureFlagAllowlist"
from = "<%= settings.coreProxyOwner %>"
args = ["0x72656769737465724d61726b6574000000000000000000000000000000000000", "<%= contracts.Proxy.address %>"] # formatBytes32String("registerMarket")
depends = ['import.synthetix', 'invoke.upgrade_proxy']

# post invokes

[invoke.register_snxETH_market]
target = ["Proxy"]
from = "<%= settings.coreProxyOwner %>"
func = "registerSynth"
args = [
  "Synthetic Ether",
  "snxETH",
  "<%= settings.coreProxyOwner %>"
]
depends = ["invoke.addSpotMarketToFeatureFlag"]
