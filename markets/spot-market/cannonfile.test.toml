name = "synthetix-spot-market"
version = "<%= package.version %>-testable"
description = "Spot market implementation"

[setting.coreProxyOwner]
description = "owner of v3 core proxy"
defaultValue = "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"

[setting.owner]
description = "spot market owner"
defaultValue = "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"

[setting.synthetixPackage]
defaultValue = "synthetix:<%= package.version %>-testable"
depends = []

[import.synthetix]
source = "<%= settings.synthetixPackage %>"

[contract.SpotMarketFactoryModule]
artifact = "SpotMarketFactoryModule"

[contract.AtomicOrderModule]
artifact = "AtomicOrderModule"

[contract.AsyncOrderModule]
artifact = "AsyncOrderModule"

[contract.AsyncOrderSettlementModule]
artifact = "AsyncOrderSettlementModule"

[contract.AsyncOrderConfigurationModule]
artifact = "AsyncOrderConfigurationModule"

[contract.WrapperModule]
artifact = "WrapperModule"

[contract.MarketConfigurationModule]
artifact = "MarketConfigurationModule"

[contract.SynthTokenModule]
artifact = "SynthTokenModule"

[contract.CoreModule]
artifact = "contracts/modules/CoreModule.sol:CoreModule"

[contract.FeatureFlagModule]
artifact = "contracts/modules/FeatureFlagModule.sol:FeatureFlagModule"

[contract.InitialSpotMarketProxy]
artifact = "contracts/Proxy.sol:Proxy"
args = ["<%= contracts.CoreModule.address %>", "<%= settings.owner %>"]
abiOf = ["CoreModule"]
salt = "<%= settings.salt %>"

# Core
[router.SpotMarketRouter]
contracts = [
    "CoreModule",
    "SpotMarketFactoryModule",
    "AtomicOrderModule",
    "AsyncOrderModule",
    "AsyncOrderSettlementModule",
    "AsyncOrderConfigurationModule",
    "WrapperModule",
    "MarketConfigurationModule",
    "FeatureFlagModule",
]

[invoke.upgrade_spot_market_proxy]
target = ["InitialSpotMarketProxy"]
from = "<%= settings.coreProxyOwner %>"
func = "upgradeTo"
args = ["<%= contracts.SpotMarketRouter.address %>"]
factory.SpotMarketProxy.abiOf = ["SpotMarketRouter"]
factory.SpotMarketProxy.event = "Upgraded"
factory.SpotMarketProxy.arg = 0

# create synth router
[router.SynthRouter]
contracts = ["CoreModule", "SynthTokenModule"]

[invoke.set_synthetix_system]
target = ["SpotMarketProxy"]
from = "<%= settings.coreProxyOwner %>"
func = "setSynthetix"
args = ["<%= imports.synthetix.contracts.CoreProxy.address %>"]

[invoke.set_synth_implementation]
target = ["SpotMarketProxy"]
from = "<%= settings.coreProxyOwner %>"
func = "setSynthImplementation"
args = ["<%= contracts.SynthRouter.address %>"]

# add pool owner to feature flag allow list
[invoke.addSpotMarketToFeatureFlag]
target = ["synthetix.CoreProxy"]
func = "addToFeatureFlagAllowlist"
from = "<%= settings.coreProxyOwner %>"
args = [
    "0x72656769737465724d61726b6574000000000000000000000000000000000000",
    "<%= contracts.SpotMarketProxy.address %>",
] # formatBytes32String("registerMarket")

[invoke.addCreateSynthToFeatureFlag]
target = ["SpotMarketProxy"]
func = "addToFeatureFlagAllowlist"
from = "<%= settings.owner %>"
args = [
    "0x63726561746553796e7468000000000000000000000000000000000000000000",
    "<%= settings.owner %>",
] # formatBytes32String("createSynth")

[contract.FeeCollectorMock]
artifact = "contracts/mocks/FeeCollectorMock.sol:FeeCollectorMock"

[contract.MockPythERC7412Wrapper]
artifact = "contracts/mocks/MockPythERC7412Wrapper.sol:MockPythERC7412Wrapper"

[invoke.set_usd_token_for_fee_collector]
target = ["FeeCollectorMock"]
func = "setUsdToken"
args = ["<%= imports.synthetix.contracts.USDProxy.address %>"]
