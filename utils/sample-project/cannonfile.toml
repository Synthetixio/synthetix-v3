name = "synthetix-sample-project"
version = "<%= package.version %>"
description = "Sample usage of the router manager"

[setting.salt]
description = "Change this to a unique string when deploying multiple instances of the system. Note that only the proxy contract will be unique."
defaultValue = "sample-project"

[setting.owner]
description = "Admin user for the system"
defaultValue = "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266"

[contract.CoreModule]
artifact = "contracts/modules/CoreModule.sol:CoreModule"

[contract.InitializableModule]
artifact = "contracts/modules/InitializableModule.sol:InitializableModule"

[contract.SettingsModule]
artifact = "contracts/modules/SettingsModule.sol:SettingsModule"

[contract.SomeModule]
artifact = "contracts/modules/SomeModule.sol:SomeModule"

[contract.AnotherModule]
artifact = "contracts/modules/AnotherModule.sol:AnotherModule"

[contract.InitialProxy]
artifact = "contracts/Proxy.sol:Proxy"
args = ["<%= contracts.CoreModule.address %>"]
abiOf = ["CoreModule"]
salt = "<%= settings.salt %>"
depends = ["contract.CoreModule"]

[invoke.acquire_ownership]
target = ["InitialProxy"]
from = "<%= settings.owner %>"
func = "initializeOwnerModule"
args = ["<%= settings.owner %>"]
depends = ["contract.InitialProxy"]

[run.generate_router]
exec = "@synthetixio/hardhat-router/utils/cannon"
func = "generate"
args = [
  "contracts/routers/chain-<%= chainId %>/Router.sol:Router",
  '''<%= JSON.stringify({
    CoreModule: contracts.CoreModule,
    InitializableModule: contracts.InitializableModule,
    SettingsModule: contracts.SettingsModule,
    SomeModule: contracts.SomeModule,
    AnotherModule: contracts.AnotherModule,
  }) %>'''
]
modified = ["contracts"]
depends = [
  "contract.CoreModule",
  "contract.InitializableModule",
  "contract.SettingsModule",
  "contract.SomeModule",
  "contract.AnotherModule"
]

[contract.Router]
artifact = "contracts/routers/chain-<%= chainId %>/Router.sol:Router"
abiOf = [
  "CoreModule",
  "InitializableModule",
  "SettingsModule",
  "SomeModule",
  "AnotherModule"
]
depends = ["run.generate_router"]

[invoke.upgrade_proxy]
target = ["InitialProxy"]
from = "<%= settings.owner %>"
func = "upgradeTo"
args = ["<%= contracts.Router.address %>"]
factory.Proxy.abiOf = ["Router"]
factory.Proxy.event = "Upgraded"
factory.Proxy.arg = 0
depends = ["invoke.acquire_ownership", "contract.Router"]
