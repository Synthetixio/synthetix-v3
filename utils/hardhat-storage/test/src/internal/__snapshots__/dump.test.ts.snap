// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`internal/dump.ts sample-project contract with storage and interface 1`] = `
"// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.17;

// @custom:artifact contracts/storage/GlobalStorage.sol:GlobalStorage
contract GlobalStorage {
    bytes32 private constant _SLOT_GLOBAL_STORAGE = keccak256(abi.encode("io.synthetix.sample-project.Global"));
    struct GlobalStore {
        uint value;
        uint someValue;
    }
    function _globalStore() internal pure returns (GlobalStore storage store) {
        bytes32 s = _SLOT_GLOBAL_STORAGE;
        assembly {
            store.slot := s
        }
    }
}
"
`;

exports[`internal/dump.ts single contract with state variables, contracts and structs 1`] = `
"// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.17;

// @custom:artifact ExampleContract.sol:ExampleContract
contract ExampleContract {
    enum NodeType {
        NONE,
        REDUCER,
        EXTERNAL,
        CHAINLINK,
        PYTH
    }
    struct Data {
        address owner;
        mapping(address => uint128) permissions;
        NodeType nodeType;
    }
    function load() internal pure returns (Data storage store) {
        bytes32 s = keccak256(abi.encode("ExampleContract"));
        assembly {
            store.slot := s
        }
    }
}
"
`;

exports[`internal/dump.ts smple-project contract with storage and interface 1`] = `
"// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.17;

// @custom:artifact contracts/storage/GlobalStorage.sol:GlobalStorage
contract GlobalStorage {
    struct GlobalStore {
        uint value;
        uint someValue;
    }
    function _globalStore() internal pure returns (GlobalStore storage store) {
        assembly {
            store.slot := 0x8f203f5ee9f9a1d361b4a0f56abfdac49cdd246db58538b151edf87309e955b9
        }
    }
}
"
`;
