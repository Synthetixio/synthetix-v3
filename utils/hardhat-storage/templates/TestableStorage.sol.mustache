//SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------
// GENERATED CODE - do not edit manually!!
// run `yarn hardhat generate-testable` to regenerate
// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------

import { {{libraryName}} } from "{{{relativeSourceName}}}";

contract Testable{{{libraryName}}}Storage {
    {{#loadParams}}
    function _getInstanceStore({{{loadParams}}}) internal pure returns ({{{libraryName}}}.Data storage) {
        return {{{libraryName}}}.load({{{loadInject}}});
    }
    {{/loadParams}}
    {{^loadParams}}
    function _getInstanceStore() internal pure returns ({{{libraryName}}}.Data storage data) {
        bytes32 s = keccak256(abi.encode("Testable{{{libraryName}}}"));
        assembly {
            data.slot := s
        }
    }
    {{/loadParams}}

    {{#fields}}
    function {{{libraryName}}}_set_{{{name}}}({{#loadParams}}{{{loadParams}}}, {{/loadParams}}{{{type}}} val) external {
        {{{libraryName}}}.Data storage store = _getInstanceStore({{{loadInject}}});
        store.{{{name}}} = val;
    }

    function {{{libraryName}}}_get_{{{name}}}({{{loadParams}}}) external view returns ({{type}}) {
        {{{libraryName}}}.Data storage store = _getInstanceStore({{{loadInject}}});
        return store.{{{name}}};
    }

    {{/fields}}
    {{#indexedFields}}
    function {{{libraryName}}}_set_{{{name}}}({{#loadParams}}{{{loadParams}}}, {{/loadParams}}{{{indexType}}} idx, {{{type}}} val) external {
        {{{libraryName}}}.Data storage store = _getInstanceStore({{{loadInject}}});
        store.{{{name}}}[idx] = val;
    }

    function {{{libraryName}}}_get_{{{name}}}({{#loadParams}}{{{loadParams}}}, {{/loadParams}}{{{indexType}}} idx) external view returns ({{type}}) {
        {{{libraryName}}}.Data storage store = _getInstanceStore({{{loadInject}}});
        return store.{{{name}}}[idx];
    }

    {{#isArray}}
    function {{{libraryName}}}_push_{{{name}}}({{#loadParams}}{{{loadParams}}}, {{/loadParams}}{{{type}}} val) external {
        {{{libraryName}}}.Data storage store = _getInstanceStore({{{loadInject}}});

        store.{{{name}}}.push(val);
    }

    function {{{libraryName}}}_pop_{{{name}}}({{{loadParams}}}) external {
        {{{libraryName}}}.Data storage store = _getInstanceStore({{{loadInject}}});

        store.{{{name}}}.pop();
    }

    {{/isArray}}
    {{/indexedFields}}
    {{#methods}}
    function {{{libraryName}}}_{{{name}}}({{#loadParams}}{{{loadParams}}}{{#params}}, {{/params}}{{/loadParams}}{{{params}}}) external{{#mutability}} {{{mutability}}}{{/mutability}} {{#returns}}returns ({{{returns}}}) {{/returns}}{
        {{{libraryName}}}.Data storage store = _getInstanceStore({{{loadInject}}});
        return {{{libraryName}}}.{{{name}}}({{{paramsInject}}});
    }

    {{/methods}}
}
