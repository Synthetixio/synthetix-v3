name: Publish Cannon

on:
  pull_request: {}
  push:
    branches:
      - "main"

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Install Foundry (Cannon)
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly
      - run: anvil -V
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16.16.0"
          cache: "npm"
      - run: npm ci
      - run: npm run build

      # start the base release
      - name: cannon:build
        run: npx hardhat cannon:build
        working-directory: ./packages/synthetix-main

      # pull in all the active networks (TODO)
      # these are needed mostly for convenience but also becuase it most accurately represents the state of the chain if
      # we include the unreleased changes in this built package
      #- name: cannon:upgrade
      #  run: |
      #    npx hardhat cannon:

      # push to registry
      - id: publish
        name: cannon:publish
        env:
          INFURA_IPFS_ID: ${{ secrets.INFURA_IPFS_ID }}
          INFURA_IPFS_SECRET: ${{ secrets.INFURA_IPFS_SECRET }}
        # run the publish and extract the Qm... string
        run: |
          export result=$(npx hardhat cannon:publish --skip-register synthetix:$(jq -r .version < package.json))
          echo "$result" >> $GITHUB_STEP_SUMMARY
          echo "cannon_package=@ipfs:$(echo "$result" | sed -n 's/.* \(Qm[^ ]*\).*/\1/p')" >> $GITHUB_OUTPUT
        working-directory: ./packages/synthetix-main

      # put a note on any PRs that includes the IPFS download information
      - if: github.event.pull_request.base.ref == 'main'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Core system deployment now available `npx @usecannon/cli ${{steps.publish.outputs.cannon_package}}` ðŸš€'
            })
