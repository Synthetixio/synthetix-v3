name = "andromeda-sandbox-consumer"
version = "1"
description = "Consumer of Andromeda Perps Sandbox"

[import.andromeda_sandbox]
source = "andromeda-sandbox"

[setting.test_user]
defaultValue = "0x70997970C51812dc3A010C7d01b50e0d17dc79C8" # PK 0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d
description = "Hardhat/Anvil second test account"

[setting.test_user_account_id]
defaultValue = "69"

[setting.test_user_perps_account_id]
defaultValue = "420"

#
#
#
# Provide liquidity to the Spartan Council Pool
#
#
#
[invoke.create_account]
target = ["andromeda_sandbox.synthetix.CoreProxy"]
from = "<%= settings.test_user %>"
func = "createAccount(uint128)"
args = ["<%= settings.test_user_account_id %>"]
extra.test_user_account_id.event = "AccountCreated"
extra.test_user_account_id.arg = 0
depends = ["import.andromeda_sandbox"]

[invoke.mint_10k_usdc_for_liquidity]
target = ["andromeda_sandbox.usdc_token.MintableToken"]
from = "<%= settings.test_user %>"
func = "mint"
args = ["<%= parseEther(String(10_000)) %>", "<%= settings.test_user %>"]
depends = ["invoke.create_account"]

[invoke.approve_10k_usdc_for_SpotMarketProxy_to_wrap_for_liquidity]
target = ["andromeda_sandbox.usdc_token.MintableToken"]
from = "<%= settings.test_user %>"
func = "approve"
args = [
    "<%= imports.andromeda_sandbox.imports.spot_factory.contracts.SpotMarketProxy.address %>",
    "<%= parseEther(String(10_000)) %>",
]
depends = ["invoke.mint_10k_usdc_for_liquidity"]

[invoke.wrap_10k_usdc_into_synth_usdc_for_liquidity]
target = ["andromeda_sandbox.spot_factory.SpotMarketProxy"]
from = "<%= settings.test_user %>"
func = "wrap"
args = [
    # uint128 marketId
    "<%= imports.andromeda_sandbox.extras.synth_usdc_market_id %>",
    # uint256 wrapAmount
    "<%= parseEther(String(10_000)) %>",
    # uint256 minAmountReceived (0% slippage!)
    "<%= parseEther(String(10_000)) %>"
]
depends = ["invoke.approve_10k_usdc_for_SpotMarketProxy_to_wrap_for_liquidity"]

[invoke.approve_10k_synth_usdc_for_CoreProxy_to_deposit]
target = ["<%= imports.andromeda_sandbox.extras.synth_usdc_token_address %>"]
abi = "<%= JSON.stringify(['function approve(address spender, uint256 amount) returns (bool)']) %>"
from = "<%= settings.test_user %>"
func = "approve"
args = [
    "<%= imports.andromeda_sandbox.imports.synthetix.contracts.CoreProxy.address %>",
    "<%= parseEther(String(10_000)) %>",
]
depends = ["invoke.wrap_10k_usdc_into_synth_usdc_for_liquidity"]

[invoke.deposit_10k_synth_usdc_for_liquidity]
target = ["andromeda_sandbox.synthetix.CoreProxy"]
from = "<%= settings.test_user %>"
func = "deposit"
args = [
    "<%= extras.test_user_account_id %>",
    "<%= imports.andromeda_sandbox.extras.synth_usdc_token_address %>",
    "<%= parseEther(String(10_000)) %>",
]
depends = ["invoke.approve_10k_synth_usdc_for_CoreProxy_to_deposit"]

[invoke.delegate_10k_synth_usdc_to_pool]
target = ["andromeda_sandbox.synthetix.CoreProxy"]
from = "<%= settings.test_user %>"
func = "delegateCollateral"
args = [
    # examples of how to debug internal values line by line
    "<%= /* console.log(extras) || */ extras.test_user_account_id %>",
    "<%= /* console.log(imports.andromeda_sandbox.extras) || */ imports.andromeda_sandbox.extras.spartan_council_pool_id %>",
    "<%= /* console.log(imports.andromeda_sandbox.imports) || */ imports.andromeda_sandbox.extras.synth_usdc_token_address %>",
    "<%= parseEther(String(10_000)) %>",
    "<%= parseEther('1') %>",
]
depends = ["invoke.deposit_10k_synth_usdc_for_liquidity"]

#
#
#
# Acquire susd for Perps
#
#
#
[invoke.mint_20k_usdc_for_perps]
target = ["andromeda_sandbox.usdc_token.MintableToken"]
from = "<%= settings.test_user %>"
func = "mint"
args = ["<%= parseEther(String(20_000)) %>", "<%= settings.test_user %>"]
depends = ["invoke.delegate_10k_synth_usdc_to_pool"]

[invoke.approve_20k_usdc_for_SpotMarketProxy_for_wrapping]
target = ["andromeda_sandbox.usdc_token.MintableToken"]
from = "<%= settings.test_user %>"
func = "approve"
args = [
    "<%= imports.andromeda_sandbox.imports.spot_factory.contracts.SpotMarketProxy.address %>",
    "<%= parseEther(String(20_000)) %>",
]
depends = ["invoke.mint_20k_usdc_for_perps"]

[invoke.wrap_20k_usdc_into_synth_usdc]
target = ["andromeda_sandbox.spot_factory.SpotMarketProxy"]
from = "<%= settings.test_user %>"
func = "wrap"
args = [
    # uint128 marketId
    "<%= imports.andromeda_sandbox.extras.synth_usdc_market_id %>",
    # uint256 wrapAmount
    "<%= parseEther(String(20_000)) %>",
    # uint256 minAmountReceived (0% slippage!)
    "<%= parseEther(String(20_000)) %>"
]
depends = ["invoke.approve_20k_usdc_for_SpotMarketProxy_for_wrapping"]

[invoke.atomic_sell_20k_synth_usdc_for_20k_susd]
target = ["andromeda_sandbox.spot_factory.SpotMarketProxy"]
from = "<%= settings.test_user %>"
func = "sell"
args = [
    # uint128 marketId
    "<%= imports.andromeda_sandbox.extras.synth_usdc_market_id %>",
    # uint256 synthAmount
    "<%= parseEther(String(20_000)) %>",
    # uint256 minUsdAmount (0% slippage!)
    "<%= parseEther(String(20_000)) %>",
    # address referrer
    "<%= AddressZero %>"
]
depends = ["invoke.wrap_20k_usdc_into_synth_usdc"]

#
#
#
# Depositing sUSD into the Perps market
#
#
#
[invoke.create_perps_account]
target = ["andromeda_sandbox.perps_factory.PerpsMarketProxy"]
from = "<%= settings.test_user %>"
func = "createAccount(uint128)"
args = ["<%= settings.test_user_perps_account_id %>"]
extra.test_user_perps_account_id.event = "AccountCreated"
extra.test_user_perps_account_id.arg = 0
depends = [
    # We want to ensure pool has some liquidity before test user start interacting with perps market, so adding this dependency step
    "invoke.delegate_10k_synth_usdc_to_pool",
    # We want to ensure user has sUSD available in their wallet too
    "invoke.atomic_sell_20k_synth_usdc_for_20k_susd"
]

[invoke.approve_1k_susd_for_PerpsMarketProxy_to_trade]
target = ["andromeda_sandbox.synthetix.USDProxy"]
from = "<%= settings.test_user %>"
func = "approve"
args = [
    "<%= imports.andromeda_sandbox.imports.perps_factory.contracts.PerpsMarketProxy.address %>",
    "<%= parseEther(String(1_000)) %>",
]
depends = ["invoke.create_perps_account"]

[invoke.deposit_1k_susd_to_perps]
target = ["andromeda_sandbox.perps_factory.PerpsMarketProxy"]
from = "<%= settings.test_user %>"
func = "modifyCollateral"
args = [
    "<%= extras.test_user_perps_account_id %>",
    0, # 0 is a special market id for susd
    "<%= parseEther(String(1_000)) %>",
]
depends = ["invoke.approve_1k_susd_for_PerpsMarketProxy_to_trade"]

#
#
#
# Withdrawing 300 sUSD from perps to get 300 USDC back into the wallet
#
#
#
[invoke.approve_700_susd_for_PerpsMarketProxy_to_withdraw]
target = ["andromeda_sandbox.synthetix.USDProxy"]
from = "<%= settings.test_user %>"
func = "approve"
args = [
    "<%= imports.andromeda_sandbox.imports.perps_factory.contracts.PerpsMarketProxy.address %>",
    "<%= parseEther(String(700)) %>",
]
depends = ["invoke.deposit_1k_susd_to_perps"]

[invoke.withdraw_300_susd_from_perps]
target = ["andromeda_sandbox.perps_factory.PerpsMarketProxy"]
from = "<%= settings.test_user %>"
func = "modifyCollateral"
args = [
    "<%= extras.test_user_perps_account_id %>",
    0, # 0 is a special market id for susd
    "<%= parseEther(String(700)) %>",
]
depends = ["invoke.approve_700_susd_for_PerpsMarketProxy_to_withdraw"]

[invoke.approve_300_susd_for_SpotMarketProxy_to_buy_synth_usdc]
target = ["andromeda_sandbox.synthetix.USDProxy"]
from = "<%= settings.test_user %>"
func = "approve"
args = [
    "<%= imports.andromeda_sandbox.imports.spot_factory.contracts.SpotMarketProxy.address %>",
    "<%= parseEther('300') %>",
]
depends = ["invoke.withdraw_300_susd_from_perps"]

[invoke.atomic_buy_300_synth_usdc_with_300_susd]
target = ["andromeda_sandbox.spot_factory.SpotMarketProxy"]
from = "<%= settings.test_user %>"
func = "buy"
args = [
    # uint128 marketId
    "<%= imports.andromeda_sandbox.extras.synth_usdc_market_id %>",
    # uint256 usdAmount
    "<%= parseEther('300') %>",
    # uint256 minAmountReceived (0% slippage!)
    "<%= parseEther('300') %>",
    # address referrer
    "<%= AddressZero %>"
]
depends = ["invoke.approve_300_susd_for_SpotMarketProxy_to_buy_synth_usdc"]

[invoke.unwrap_300_usdc_from_synth_usdc]
target = ["andromeda_sandbox.spot_factory.SpotMarketProxy"]
from = "<%= settings.test_user %>"
func = "unwrap"
args = [
    # uint128 marketId
    "<%= imports.andromeda_sandbox.extras.synth_usdc_market_id %>",
    # uint256 unwrapAmount
    "<%= parseEther('300') %>",
    # uint256 minAmountReceived (0% slippage!)
    "<%= parseEther('300') %>"
]
depends = ["invoke.atomic_buy_300_synth_usdc_with_300_susd"]

#
#
#
# Trading perps
# TODO: figure out order settlements and closing orders
#
#
#
[invoke.commit_perps_eth_order]
target = ["andromeda_sandbox.perps_factory.PerpsMarketProxy"]
from = "<%= settings.test_user %>"
func = "commitOrder"
args = [
    # eth price is $1000, acceptablePrice with 5% slippage: $1050
    { marketId = "<%= imports.andromeda_sandbox.extras.perps_eth_market_id %>", accountId = "<%= extras.test_user_perps_account_id %>", sizeDelta = "<%= parseEther('1') %>", settlementStrategyId = "0", acceptablePrice = "<%= parseEther('1050') %>", referrer = "<%= AddressZero %>", trackingCode = "<%= HashZero %>" },
]
depends = ["invoke.unwrap_300_usdc_from_synth_usdc"]
