name = "andromeda-sandbox"
version = "1"
description = "Andromeda Perps Sandbox"

[setting.owner]
# Matches owner of core system that's provisions on Cannon network
defaultValue = "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266" # PK 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80
# We can change the owner of pools and modules deployed in the Sandbox if we want
#defaultValue = "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC" # PK 0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a
description = "Hardhat/Anvil first test account"

#
#
# TODO: We will need to use Pyth Mock, so these settings will change.
#
#
[setting.pyth_price_verification_address]
defaultValue = "0x5955C1478F0dAD753C7E2B4dD1b4bC530C64749f"

[setting.pyth_feed_url]
defaultValue = "https://api.synthetix.io/pyth-testnet/api/get_vaa_ccip?data={data}"

[setting.pyth_eth_feed_id]
defaultValue = "0xca80ba6dc32e08d06f1aa886011eed1d77c77be9eb761cc10d72b7d0a2fd57a6"

#
#
# Provision Synthetix V3 Core
#
#
[import.synthetix]
source = "synthetix:dev"

[invoke.configure_minimum_liquidity_ratio]
target = ["synthetix.CoreProxy"]
fromCall.func = "owner"
func = "setMinLiquidityRatio(uint256)"
args = ["<%= parseEther('2') %>"]

[invoke.configure_withdraw_timeout]
target = ["synthetix.CoreProxy"]
fromCall.func = "owner"
func = "setConfig"
args = [
    "<%= formatBytes32String('accountTimeoutWithdraw') %>",
    # seconds
    "<%= hexZeroPad(hexlify(0), 32) %>"
]

#
#
# Provions Spot factory
#
#
[import.spot_factory]
source = "synthetix-spot-market:dev"

#
#
# Provision Mintable Sandbox token $USDC
#
#
[provision.usdc_token]
source = "mintable-token:1.1"
options.symbol = "USDC"
options.name = "Mintable USD Coin"

#
#
# Synth USDC
#
#
[invoke.create_synth_usdc]
target = ["spot_factory.SpotMarketProxy"]
fromCall.func = "owner"
func = "createSynth"
args = ["Synthetic USDC", "sUSDC", "<%= settings.owner %>"]
extra.synth_usdc_market_id.event = "SynthRegistered"
extra.synth_usdc_market_id.arg = 0
extra.synth_usdc_token_address.event = "SynthRegistered"
extra.synth_usdc_token_address.arg = 1

[invoke.register_usdc_oracle_node_with_constant_price]
target = ["synthetix.oracle_manager.Proxy"]
func = "registerNode"
args = [
    8, # 8 = constant
    "<%= defaultAbiCoder.encode(['int256'], [parseEther('1')]) %>", # 1 parameter: price, always $1
    []
]
extra.usdc_oracle_id.event = "NodeRegistered"
extra.usdc_oracle_id.arg = 0

[invoke.configure_price_data_for_synth_usdc]
target = ["spot_factory.SpotMarketProxy"]
fromCall.func = "getMarketOwner"
fromCall.args = ["<%= extras.synth_usdc_market_id %>"]
func = "updatePriceData"
args = [
    "<%= extras.synth_usdc_market_id %>",
    "<%= extras.usdc_oracle_id %>",
    "<%= extras.usdc_oracle_id %>"
]

[invoke.configure_maximum_market_collateral_for_synth_usdc]
target = ["synthetix.CoreProxy"]
fromCall.func = "owner"
func = "configureMaximumMarketCollateral"
args = [
    "<%= extras.synth_usdc_market_id %>",
    "<%= imports.usdc_token.contracts.MintableToken.address %>",
    "<%= MaxUint256 %>"
]

[invoke.initialise_synth_usdc_wrapper_with_unlimited_cap]
target = ["spot_factory.SpotMarketProxy"]
fromCall.func = "getMarketOwner"
fromCall.args = ["<%= extras.synth_usdc_market_id %>"]
func = "setWrapper"
args = [
    "<%= extras.synth_usdc_market_id %>",
    "<%= imports.usdc_token.contracts.MintableToken.address %>",
    "<%= MaxUint256 %>"
]

[invoke.configure_usdc_token_as_collateral]
target = ["synthetix.CoreProxy"]
fromCall.func = "owner"
func = "configureCollateral"
args = [
    { tokenAddress = "<%= imports.usdc_token.contracts.MintableToken.address %>", oracleNodeId = "<%= extras.usdc_oracle_id %>", issuanceRatioD18 = "<%= MaxUint256 %>", liquidationRatioD18 = "<%= parseEther('1.5') %>", liquidationRewardD18 = "<%= parseEther('0.01') %>", minDelegationD18 = "<%= parseEther('1') %>", depositingEnabled = true },
]

#
#
# Provision Perps factory
#
#
[import.perps_factory]
source = "synthetix-perps-market:dev"
depends = ["import.spot_factory"]

[invoke.permit_owner_to_register_markets]
target = ["synthetix.CoreProxy"]
fromCall.func = "owner"
func = "addToFeatureFlagAllowlist"
args = ["<%= formatBytes32String('registerMarket') %>", "<%= settings.owner %>"]

#
#
#
#
#
#
#
#
#
#
#
#
#
# ETH stuff
#
#
#
#
#
#
#
#
#
#
#
#
#
# Provision mintable Wrapped Ethereum token $WETH
#
#
[provision.weth_token]
source = "mintable-token:1.1"
options.symbol = "WETH"
options.name = "Wrapped Ethereum"

#
#
# Synth ETH
#
#
[invoke.create_synth_eth]
target = ["spot_factory.SpotMarketProxy"]
fromCall.func = "owner"
func = "createSynth"
args = ["Synthetic ETH", "sETH", "<%= settings.owner %>"]
extra.synth_eth_market_id.event = "SynthRegistered"
extra.synth_eth_market_id.arg = 0
extra.synth_eth_token_address.event = "SynthRegistered"
extra.synth_eth_token_address.arg = 1

[invoke.register_eth_oracle_node_with_constant_price]
target = ["synthetix.oracle_manager.Proxy"]
func = "registerNode"
args = [
    8, # 8 = constant
    "<%= defaultAbiCoder.encode(['int256'], [parseEther('1000')]) %>", # 1 parameter: price
    []
]
extra.eth_oracle_id.event = "NodeRegistered"
extra.eth_oracle_id.arg = 0

#
#
# Perps ETH
#
#
[invoke.create_eth_perps_market]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "createMarket"
args = ["100", "Ethereum", "ETH"]
extra.perps_eth_market_id.event = "MarketCreated"
extra.perps_eth_market_id.arg = 0
depends = ['invoke.permit_owner_to_register_markets']

[invoke.configure_price_data_for_perps_eth]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "updatePriceData"
args = [
    "<%= extras.perps_eth_market_id %>", # uint128 perpsMarketId
    "<%= extras.eth_oracle_id %>"
    # bytes32 feedId
]

[invoke.configure_settlement_strategy_for_perps_eth]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "addSettlementStrategy"
args = [
    "<%= extras.perps_eth_market_id %>",
    # strategyType = 0 (pyth)
    { strategyType = "0", settlementDelay = "15", settlementWindowDuration = "60", priceWindowDuration = "600", priceVerificationContract = "<%= settings.pyth_price_verification_address %>", feedId = "<%= settings.pyth_eth_feed_id %>", url = "<%= settings.pyth_feed_url %>", settlementReward = 0, priceDeviationTolerance = "<%= parseEther('1') %>", disabled = false }
]

[invoke.configure_funding_parameters_for_perps_eth]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setFundingParameters"
args = [
    "<%= extras.perps_eth_market_id %>", # uint128 marketId
    "<%= parseEther('1000000') %>", # uint256 skewScale
    "<%= parseEther('9') %>"
    # uint256 maxFundingVelocity
]

[invoke.configure_order_fees_for_perps_eth]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setOrderFees"
args = [
    "<%= extras.perps_eth_market_id %>", # uint128 marketId
    "<%= parseEther('0.0002') %>", # uint256 makerFeeRatio
    "<%= parseEther('0.0005') %>"
    # uint256 takerFeeRatio
]

[invoke.configure_max_market_size_for_perps_eth]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxMarketSize"
args = [
    "<%= extras.perps_eth_market_id %>", # uint128 marketId
    "<%= parseEther('100000') %>"
    # uint256 maxMarketSize
]

[invoke.configure_max_liquidation_parameters_for_perps_eth]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxLiquidationParameters"
args = [
    "<%= extras.perps_eth_market_id %>", # uint128 marketId
    "<%= parseEther('1') %>", # uint256 maxLiquidationLimitAccumulationMultiplier
    "30", # uint256 maxSecondsInLiquidationWindow
    "<%= parseEther('0.0016') %>", # uint256 maxLiquidationPd
    "0x0000000000000000000000000000000000000000"
    # address endorsedLiquidator
]

[invoke.configure_liquidation_parameters_for_perps_eth]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationParameters"
args = [
    "<%= extras.perps_eth_market_id %>", # uint128 marketId
    "<%= parseEther('1') %>", # uint256 initialMarginRatioD18
    "<%= parseEther('0.02') %>", # uint256 minimumInitialMarginRatioD18
    "<%= parseEther('0.5') %>", # uint256 maintenanceMarginScalarD18
    "<%= parseEther('0.01') %>", # uint256 liquidationRewardRatioD18
    "<%= parseEther('0') %>"
    # uint256 minimumPositionMargin
]

[invoke.configure_locked_oi_ratio_for_perps_eth]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLockedOiRatio"
args = [
    "<%= extras.perps_eth_market_id %>", # uint128 marketId
    "<%= parseEther('0.5') %>"
    # uint256 lockedOiRatioD18
]

[invoke.configure_max_collateral_amount_for_perps_eth]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxCollateralAmount"
args = [
    "<%= extras.synth_eth_market_id %>", # uint128 synthMarketId
    "<%= MaxUint256 %>"
    # uint256 collateralAmount
]

#
#
# Global Perps configuration
#
#
[invoke.configure_perps_liquidation_reward_limits]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setLiquidationRewardGuards"
args = ["<%= parseEther('1') %>", "<%= parseEther('500') %>"]

[invoke.configure_perps_max_collateral_for_susd]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setMaxCollateralAmount"
args = ["0", "<%= MaxUint256 %>"]

[invoke.configure_perps_synth_deduction_priority]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setSynthDeductionPriority"
args = [
    [
        #"<%= extras.synth_usdc_market_id %>",
        #"<%= extras.synth_eth_market_id %>",
        #"<%= extras.synth_btc_market_id %>",
        "0"
    ]
]

[invoke.configure_per_account_caps_perps]
target = ["perps_factory.PerpsMarketProxy"]
fromCall.func = "owner"
func = "setPerAccountCaps"
args = ["5", "3"]

#
#
#
# Create Spartan Council pool
#
#
[invoke.permit_owner_to_create_pools]
target = ["synthetix.CoreProxy"]
fromCall.func = "owner"
func = "addToFeatureFlagAllowlist"
args = ["<%= formatBytes32String('createPool') %>", "<%= settings.owner %>"]

[invoke.create_spartan_council_pool]
target = ["synthetix.CoreProxy"]
func = "createPool"
from = "<%= settings.owner %>"
args = ["1", "<%= settings.owner %>"]
extra.spartan_council_pool_id.event = "PoolCreated"
extra.spartan_council_pool_id.arg = 0
depends = ["invoke.permit_owner_to_create_pools"]

[invoke.configure_spartan_council_pool_name]
target = ["synthetix.CoreProxy"]
fromCall.func = "getPoolOwner"
fromCall.args = ["<%= extras.spartan_council_pool_id %>"]
func = "setPoolName"
args = ["<%= extras.spartan_council_pool_id %>", "Spartan Council Pool"]

[invoke.make_spartan_council_pool_a_preferred_pool]
target = ["synthetix.CoreProxy"]
fromCall.func = "owner"
func = "setPreferredPool"
args = ["<%= extras.spartan_council_pool_id %>"]

[invoke.configure_spartan_council_pool]
target = ["synthetix.CoreProxy"]
fromCall.func = "getPoolOwner"
fromCall.args = ["<%= extras.spartan_council_pool_id %>"]
func = "setPoolConfiguration"
args = [
    "<%= extras.spartan_council_pool_id %>",
    [
        { marketId = "<%= imports.perps_factory.extras.superMarketId %>", weightD18 = 1, maxDebtShareValueD18 = "<%= parseEther('1') %>" }
    ]
]
